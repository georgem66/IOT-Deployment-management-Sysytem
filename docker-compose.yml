version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: iot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: iot_security_db
      POSTGRES_USER: iot_admin
      POSTGRES_PASSWORD: secure_password_2024
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - iot-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: iot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - iot-network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: iot-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://iot_admin:secure_password_2024@postgres:5432/iot_security_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your_jwt_secret_key_here_change_in_production
      JWT_EXPIRATION: 24h
      CORS_ORIGIN: http://localhost:3001
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - iot-network

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: iot-frontend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      REACT_APP_API_URL: http://localhost:3000
      REACT_APP_WS_URL: ws://localhost:3000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - iot-network

volumes:
  postgres_data:
  redis_data:

networks:
  iot-network:
    driver: bridge