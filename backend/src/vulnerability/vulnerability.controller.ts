import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  UseGuards,
  ParseUUIDPipe,
} from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { ApiTags, ApiBearerAuth, ApiOperation, ApiResponse, ApiQuery } from '@nestjs/swagger';
import { VulnerabilityService } from './vulnerability.service';
import { CreateScanDto, ScanQueryDto } from './dto/vulnerability.dto';
import { CurrentUser } from '../auth/decorators/current-user.decorator';

@ApiTags('Vulnerability Scanning')
@Controller('vulnerability')
@UseGuards(AuthGuard('jwt'))
@ApiBearerAuth()
export class VulnerabilityController {
  constructor(private readonly vulnerabilityService: VulnerabilityService) {}

  @Post('scan')
  @ApiOperation({ 
    summary: 'Initiate a security scan for a device',
    description: 'Starts an asynchronous vulnerability scan that will run in the background'
  })
  @ApiResponse({ status: 201, description: 'Scan initiated successfully' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 404, description: 'Device not found or access denied' })
  async createScan(
    @Body() createScanDto: CreateScanDto,
    @CurrentUser() user
  ) {
    return this.vulnerabilityService.createScan(createScanDto, user.id, user.role);
  }

  @Get('scans')
  @ApiOperation({ summary: 'Get vulnerability scan reports' })
  @ApiResponse({ status: 200, description: 'Scan reports retrieved successfully' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiQuery({ name: 'scanType', required: false, enum: ['PORT_SCAN', 'VULNERABILITY_SCAN', 'NETWORK_SCAN', 'COMPLIANCE_SCAN'] })
  @ApiQuery({ name: 'deviceId', required: false, description: 'Filter by device UUID' })
  @ApiQuery({ name: 'limit', required: false, description: 'Limit number of results' })
  async findAll(
    @Query() query: ScanQueryDto,
    @CurrentUser() user
  ) {
    return this.vulnerabilityService.findAll(query, user.id, user.role);
  }

  @Get('statistics')
  @ApiOperation({ summary: 'Get vulnerability scanning statistics' })
  @ApiResponse({ status: 200, description: 'Statistics retrieved successfully' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  async getStatistics(@CurrentUser() user) {
    return this.vulnerabilityService.getScanStatistics(user.id, user.role);
  }

  @Get('scans/:id')
  @ApiOperation({ summary: 'Get detailed scan report by ID' })
  @ApiResponse({ status: 200, description: 'Scan report retrieved successfully' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 404, description: 'Scan report not found or access denied' })
  async findOne(
    @Param('id', ParseUUIDPipe) id: string,
    @CurrentUser() user
  ) {
    return this.vulnerabilityService.findOne(id, user.id, user.role);
  }

  @Get('device/:deviceId/scans')
  @ApiOperation({ summary: 'Get scan history for a specific device' })
  @ApiResponse({ status: 200, description: 'Device scan history retrieved successfully' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 404, description: 'Device not found or access denied' })
  async getDeviceScanHistory(
    @Param('deviceId', ParseUUIDPipe) deviceId: string,
    @CurrentUser() user
  ) {
    return this.vulnerabilityService.getDeviceScanHistory(deviceId, user.id, user.role);
  }

  @Patch('scans/:id/cancel')
  @ApiOperation({ summary: 'Cancel a running or pending scan' })
  @ApiResponse({ status: 200, description: 'Scan cancelled successfully' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 404, description: 'Scan not found or access denied' })
  @ApiResponse({ status: 400, description: 'Cannot cancel completed scan' })
  async cancelScan(
    @Param('id', ParseUUIDPipe) id: string,
    @CurrentUser() user
  ) {
    return this.vulnerabilityService.cancelScan(id, user.id, user.role);
  }

  @Delete('scans/:id')
  @ApiOperation({ summary: 'Delete a scan report' })
  @ApiResponse({ status: 200, description: 'Scan report deleted successfully' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 404, description: 'Scan report not found or access denied' })
  async remove(
    @Param('id', ParseUUIDPipe) id: string,
    @CurrentUser() user
  ) {
    await this.vulnerabilityService.deleteScan(id, user.id, user.role);
    return { message: 'Scan report deleted successfully' };
  }
}
