// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  devices   Device[]
  auditLogs AuditLog[]
  alerts    Alert[]

  @@map("users")
}

model Device {
  id              String       @id @default(uuid())
  name            String
  type            DeviceType
  ipAddress       String
  macAddress      String       @unique
  manufacturer    String?
  model           String?
  firmwareVersion String?
  osVersion       String?
  status          DeviceStatus @default(OFFLINE)
  lastSeen        DateTime?
  registeredAt    DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Security attributes
  securityScore Float?    @default(0)
  riskLevel     RiskLevel @default(UNKNOWN)

  // Owner
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Relations
  telemetry       DeviceTelemetry[]
  scans           VulnerabilityReport[]
  alerts          Alert[]
  firmwareUpdates FirmwareUpdate[]
  logs            DeviceLog[]

  @@map("devices")
}

model DeviceTelemetry {
  id        String   @id @default(uuid())
  deviceId  String
  timestamp DateTime @default(now())

  // System metrics
  cpuUsage    Float?
  memoryUsage Float?
  diskUsage   Float?
  temperature Float?

  // Network metrics
  networkIn  Float?
  networkOut Float?

  // Custom metrics (JSON)
  customData Json?

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId, timestamp])
  @@map("device_telemetry")
}

model VulnerabilityReport {
  id          String     @id @default(uuid())
  deviceId    String
  scanType    ScanType
  status      ScanStatus @default(PENDING)
  startedAt   DateTime   @default(now())
  completedAt DateTime?

  // Results
  criticalCount Int @default(0)
  highCount     Int @default(0)
  mediumCount   Int @default(0)
  lowCount      Int @default(0)

  // Detailed results (JSON)
  findings Json?

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId, startedAt])
  @@map("vulnerability_reports")
}

model Alert {
  id          String        @id @default(uuid())
  deviceId    String?
  userId      String?
  type        AlertType
  severity    AlertSeverity
  title       String
  description String
  status      AlertStatus   @default(ACTIVE)
  createdAt   DateTime      @default(now())
  resolvedAt  DateTime?

  // Metadata (JSON)
  metadata Json?

  device Device? @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt, status])
  @@map("alerts")
}

model FirmwareUpdate {
  id         String         @id @default(uuid())
  deviceId   String
  version    String
  fileName   String
  fileSize   Int
  checksum   String
  status     FirmwareStatus @default(PENDING)
  uploadedAt DateTime       @default(now())
  deployedAt DateTime?

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("firmware_updates")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([timestamp, action])
  @@map("audit_logs")
}

model DeviceLog {
  id        String   @id @default(uuid())
  deviceId  String
  level     LogLevel
  message   String
  source    String?
  timestamp DateTime @default(now())

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId, timestamp])
  @@map("device_logs")
}

// Enums
enum UserRole {
  ADMIN
  USER
}

enum DeviceType {
  SENSOR
  CAMERA
  GATEWAY
  ACTUATOR
  CONTROLLER
  OTHER
}

enum DeviceStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
  ERROR
}

enum RiskLevel {
  CRITICAL
  HIGH
  MEDIUM
  LOW
  UNKNOWN
}

enum ScanType {
  PORT_SCAN
  VULNERABILITY_SCAN
  NETWORK_SCAN
  COMPLIANCE_SCAN
}

enum ScanStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum AlertType {
  SECURITY_BREACH
  DEVICE_OFFLINE
  HIGH_CPU_USAGE
  HIGH_MEMORY_USAGE
  ANOMALY_DETECTED
  VULNERABILITY_FOUND
  FIRMWARE_OUTDATED
  AUTHENTICATION_FAILURE
  NETWORK_INTRUSION
}

enum AlertSeverity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
  INFO
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  IGNORED
}

enum FirmwareStatus {
  PENDING
  DOWNLOADING
  DEPLOYING
  COMPLETED
  FAILED
}

enum LogLevel {
  ERROR
  WARN
  INFO
  DEBUG
}
