
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Device
 * 
 */
export type Device = $Result.DefaultSelection<Prisma.$DevicePayload>
/**
 * Model DeviceTelemetry
 * 
 */
export type DeviceTelemetry = $Result.DefaultSelection<Prisma.$DeviceTelemetryPayload>
/**
 * Model VulnerabilityReport
 * 
 */
export type VulnerabilityReport = $Result.DefaultSelection<Prisma.$VulnerabilityReportPayload>
/**
 * Model Alert
 * 
 */
export type Alert = $Result.DefaultSelection<Prisma.$AlertPayload>
/**
 * Model FirmwareUpdate
 * 
 */
export type FirmwareUpdate = $Result.DefaultSelection<Prisma.$FirmwareUpdatePayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model DeviceLog
 * 
 */
export type DeviceLog = $Result.DefaultSelection<Prisma.$DeviceLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const DeviceType: {
  SENSOR: 'SENSOR',
  CAMERA: 'CAMERA',
  GATEWAY: 'GATEWAY',
  ACTUATOR: 'ACTUATOR',
  CONTROLLER: 'CONTROLLER',
  OTHER: 'OTHER'
};

export type DeviceType = (typeof DeviceType)[keyof typeof DeviceType]


export const DeviceStatus: {
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE',
  MAINTENANCE: 'MAINTENANCE',
  ERROR: 'ERROR'
};

export type DeviceStatus = (typeof DeviceStatus)[keyof typeof DeviceStatus]


export const RiskLevel: {
  CRITICAL: 'CRITICAL',
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW',
  UNKNOWN: 'UNKNOWN'
};

export type RiskLevel = (typeof RiskLevel)[keyof typeof RiskLevel]


export const ScanType: {
  PORT_SCAN: 'PORT_SCAN',
  VULNERABILITY_SCAN: 'VULNERABILITY_SCAN',
  NETWORK_SCAN: 'NETWORK_SCAN',
  COMPLIANCE_SCAN: 'COMPLIANCE_SCAN'
};

export type ScanType = (typeof ScanType)[keyof typeof ScanType]


export const ScanStatus: {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type ScanStatus = (typeof ScanStatus)[keyof typeof ScanStatus]


export const AlertType: {
  SECURITY_BREACH: 'SECURITY_BREACH',
  DEVICE_OFFLINE: 'DEVICE_OFFLINE',
  HIGH_CPU_USAGE: 'HIGH_CPU_USAGE',
  HIGH_MEMORY_USAGE: 'HIGH_MEMORY_USAGE',
  ANOMALY_DETECTED: 'ANOMALY_DETECTED',
  VULNERABILITY_FOUND: 'VULNERABILITY_FOUND',
  FIRMWARE_OUTDATED: 'FIRMWARE_OUTDATED',
  AUTHENTICATION_FAILURE: 'AUTHENTICATION_FAILURE',
  NETWORK_INTRUSION: 'NETWORK_INTRUSION'
};

export type AlertType = (typeof AlertType)[keyof typeof AlertType]


export const AlertSeverity: {
  CRITICAL: 'CRITICAL',
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW',
  INFO: 'INFO'
};

export type AlertSeverity = (typeof AlertSeverity)[keyof typeof AlertSeverity]


export const AlertStatus: {
  ACTIVE: 'ACTIVE',
  ACKNOWLEDGED: 'ACKNOWLEDGED',
  RESOLVED: 'RESOLVED',
  IGNORED: 'IGNORED'
};

export type AlertStatus = (typeof AlertStatus)[keyof typeof AlertStatus]


export const FirmwareStatus: {
  PENDING: 'PENDING',
  DOWNLOADING: 'DOWNLOADING',
  DEPLOYING: 'DEPLOYING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

export type FirmwareStatus = (typeof FirmwareStatus)[keyof typeof FirmwareStatus]


export const LogLevel: {
  ERROR: 'ERROR',
  WARN: 'WARN',
  INFO: 'INFO',
  DEBUG: 'DEBUG'
};

export type LogLevel = (typeof LogLevel)[keyof typeof LogLevel]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type DeviceType = $Enums.DeviceType

export const DeviceType: typeof $Enums.DeviceType

export type DeviceStatus = $Enums.DeviceStatus

export const DeviceStatus: typeof $Enums.DeviceStatus

export type RiskLevel = $Enums.RiskLevel

export const RiskLevel: typeof $Enums.RiskLevel

export type ScanType = $Enums.ScanType

export const ScanType: typeof $Enums.ScanType

export type ScanStatus = $Enums.ScanStatus

export const ScanStatus: typeof $Enums.ScanStatus

export type AlertType = $Enums.AlertType

export const AlertType: typeof $Enums.AlertType

export type AlertSeverity = $Enums.AlertSeverity

export const AlertSeverity: typeof $Enums.AlertSeverity

export type AlertStatus = $Enums.AlertStatus

export const AlertStatus: typeof $Enums.AlertStatus

export type FirmwareStatus = $Enums.FirmwareStatus

export const FirmwareStatus: typeof $Enums.FirmwareStatus

export type LogLevel = $Enums.LogLevel

export const LogLevel: typeof $Enums.LogLevel

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.device`: Exposes CRUD operations for the **Device** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Devices
    * const devices = await prisma.device.findMany()
    * ```
    */
  get device(): Prisma.DeviceDelegate<ExtArgs>;

  /**
   * `prisma.deviceTelemetry`: Exposes CRUD operations for the **DeviceTelemetry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeviceTelemetries
    * const deviceTelemetries = await prisma.deviceTelemetry.findMany()
    * ```
    */
  get deviceTelemetry(): Prisma.DeviceTelemetryDelegate<ExtArgs>;

  /**
   * `prisma.vulnerabilityReport`: Exposes CRUD operations for the **VulnerabilityReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VulnerabilityReports
    * const vulnerabilityReports = await prisma.vulnerabilityReport.findMany()
    * ```
    */
  get vulnerabilityReport(): Prisma.VulnerabilityReportDelegate<ExtArgs>;

  /**
   * `prisma.alert`: Exposes CRUD operations for the **Alert** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alerts
    * const alerts = await prisma.alert.findMany()
    * ```
    */
  get alert(): Prisma.AlertDelegate<ExtArgs>;

  /**
   * `prisma.firmwareUpdate`: Exposes CRUD operations for the **FirmwareUpdate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FirmwareUpdates
    * const firmwareUpdates = await prisma.firmwareUpdate.findMany()
    * ```
    */
  get firmwareUpdate(): Prisma.FirmwareUpdateDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.deviceLog`: Exposes CRUD operations for the **DeviceLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeviceLogs
    * const deviceLogs = await prisma.deviceLog.findMany()
    * ```
    */
  get deviceLog(): Prisma.DeviceLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Device: 'Device',
    DeviceTelemetry: 'DeviceTelemetry',
    VulnerabilityReport: 'VulnerabilityReport',
    Alert: 'Alert',
    FirmwareUpdate: 'FirmwareUpdate',
    AuditLog: 'AuditLog',
    DeviceLog: 'DeviceLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "device" | "deviceTelemetry" | "vulnerabilityReport" | "alert" | "firmwareUpdate" | "auditLog" | "deviceLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Device: {
        payload: Prisma.$DevicePayload<ExtArgs>
        fields: Prisma.DeviceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeviceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeviceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          findFirst: {
            args: Prisma.DeviceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeviceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          findMany: {
            args: Prisma.DeviceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>[]
          }
          create: {
            args: Prisma.DeviceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          createMany: {
            args: Prisma.DeviceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeviceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>[]
          }
          delete: {
            args: Prisma.DeviceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          update: {
            args: Prisma.DeviceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          deleteMany: {
            args: Prisma.DeviceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeviceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DeviceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          aggregate: {
            args: Prisma.DeviceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDevice>
          }
          groupBy: {
            args: Prisma.DeviceGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeviceGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeviceCountArgs<ExtArgs>
            result: $Utils.Optional<DeviceCountAggregateOutputType> | number
          }
        }
      }
      DeviceTelemetry: {
        payload: Prisma.$DeviceTelemetryPayload<ExtArgs>
        fields: Prisma.DeviceTelemetryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeviceTelemetryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTelemetryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeviceTelemetryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTelemetryPayload>
          }
          findFirst: {
            args: Prisma.DeviceTelemetryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTelemetryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeviceTelemetryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTelemetryPayload>
          }
          findMany: {
            args: Prisma.DeviceTelemetryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTelemetryPayload>[]
          }
          create: {
            args: Prisma.DeviceTelemetryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTelemetryPayload>
          }
          createMany: {
            args: Prisma.DeviceTelemetryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeviceTelemetryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTelemetryPayload>[]
          }
          delete: {
            args: Prisma.DeviceTelemetryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTelemetryPayload>
          }
          update: {
            args: Prisma.DeviceTelemetryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTelemetryPayload>
          }
          deleteMany: {
            args: Prisma.DeviceTelemetryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeviceTelemetryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DeviceTelemetryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTelemetryPayload>
          }
          aggregate: {
            args: Prisma.DeviceTelemetryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeviceTelemetry>
          }
          groupBy: {
            args: Prisma.DeviceTelemetryGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeviceTelemetryGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeviceTelemetryCountArgs<ExtArgs>
            result: $Utils.Optional<DeviceTelemetryCountAggregateOutputType> | number
          }
        }
      }
      VulnerabilityReport: {
        payload: Prisma.$VulnerabilityReportPayload<ExtArgs>
        fields: Prisma.VulnerabilityReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VulnerabilityReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VulnerabilityReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityReportPayload>
          }
          findFirst: {
            args: Prisma.VulnerabilityReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VulnerabilityReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityReportPayload>
          }
          findMany: {
            args: Prisma.VulnerabilityReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityReportPayload>[]
          }
          create: {
            args: Prisma.VulnerabilityReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityReportPayload>
          }
          createMany: {
            args: Prisma.VulnerabilityReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VulnerabilityReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityReportPayload>[]
          }
          delete: {
            args: Prisma.VulnerabilityReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityReportPayload>
          }
          update: {
            args: Prisma.VulnerabilityReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityReportPayload>
          }
          deleteMany: {
            args: Prisma.VulnerabilityReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VulnerabilityReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VulnerabilityReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VulnerabilityReportPayload>
          }
          aggregate: {
            args: Prisma.VulnerabilityReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVulnerabilityReport>
          }
          groupBy: {
            args: Prisma.VulnerabilityReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<VulnerabilityReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.VulnerabilityReportCountArgs<ExtArgs>
            result: $Utils.Optional<VulnerabilityReportCountAggregateOutputType> | number
          }
        }
      }
      Alert: {
        payload: Prisma.$AlertPayload<ExtArgs>
        fields: Prisma.AlertFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlertFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlertFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          findFirst: {
            args: Prisma.AlertFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlertFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          findMany: {
            args: Prisma.AlertFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>[]
          }
          create: {
            args: Prisma.AlertCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          createMany: {
            args: Prisma.AlertCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlertCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>[]
          }
          delete: {
            args: Prisma.AlertDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          update: {
            args: Prisma.AlertUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          deleteMany: {
            args: Prisma.AlertDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlertUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlertUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          aggregate: {
            args: Prisma.AlertAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlert>
          }
          groupBy: {
            args: Prisma.AlertGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlertGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlertCountArgs<ExtArgs>
            result: $Utils.Optional<AlertCountAggregateOutputType> | number
          }
        }
      }
      FirmwareUpdate: {
        payload: Prisma.$FirmwareUpdatePayload<ExtArgs>
        fields: Prisma.FirmwareUpdateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FirmwareUpdateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FirmwareUpdatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FirmwareUpdateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FirmwareUpdatePayload>
          }
          findFirst: {
            args: Prisma.FirmwareUpdateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FirmwareUpdatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FirmwareUpdateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FirmwareUpdatePayload>
          }
          findMany: {
            args: Prisma.FirmwareUpdateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FirmwareUpdatePayload>[]
          }
          create: {
            args: Prisma.FirmwareUpdateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FirmwareUpdatePayload>
          }
          createMany: {
            args: Prisma.FirmwareUpdateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FirmwareUpdateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FirmwareUpdatePayload>[]
          }
          delete: {
            args: Prisma.FirmwareUpdateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FirmwareUpdatePayload>
          }
          update: {
            args: Prisma.FirmwareUpdateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FirmwareUpdatePayload>
          }
          deleteMany: {
            args: Prisma.FirmwareUpdateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FirmwareUpdateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FirmwareUpdateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FirmwareUpdatePayload>
          }
          aggregate: {
            args: Prisma.FirmwareUpdateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFirmwareUpdate>
          }
          groupBy: {
            args: Prisma.FirmwareUpdateGroupByArgs<ExtArgs>
            result: $Utils.Optional<FirmwareUpdateGroupByOutputType>[]
          }
          count: {
            args: Prisma.FirmwareUpdateCountArgs<ExtArgs>
            result: $Utils.Optional<FirmwareUpdateCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      DeviceLog: {
        payload: Prisma.$DeviceLogPayload<ExtArgs>
        fields: Prisma.DeviceLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeviceLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeviceLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceLogPayload>
          }
          findFirst: {
            args: Prisma.DeviceLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeviceLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceLogPayload>
          }
          findMany: {
            args: Prisma.DeviceLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceLogPayload>[]
          }
          create: {
            args: Prisma.DeviceLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceLogPayload>
          }
          createMany: {
            args: Prisma.DeviceLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeviceLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceLogPayload>[]
          }
          delete: {
            args: Prisma.DeviceLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceLogPayload>
          }
          update: {
            args: Prisma.DeviceLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceLogPayload>
          }
          deleteMany: {
            args: Prisma.DeviceLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeviceLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DeviceLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceLogPayload>
          }
          aggregate: {
            args: Prisma.DeviceLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeviceLog>
          }
          groupBy: {
            args: Prisma.DeviceLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeviceLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeviceLogCountArgs<ExtArgs>
            result: $Utils.Optional<DeviceLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    devices: number
    auditLogs: number
    alerts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    devices?: boolean | UserCountOutputTypeCountDevicesArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    alerts?: boolean | UserCountOutputTypeCountAlertsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDevicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAlertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
  }


  /**
   * Count Type DeviceCountOutputType
   */

  export type DeviceCountOutputType = {
    telemetry: number
    scans: number
    alerts: number
    firmwareUpdates: number
    logs: number
  }

  export type DeviceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    telemetry?: boolean | DeviceCountOutputTypeCountTelemetryArgs
    scans?: boolean | DeviceCountOutputTypeCountScansArgs
    alerts?: boolean | DeviceCountOutputTypeCountAlertsArgs
    firmwareUpdates?: boolean | DeviceCountOutputTypeCountFirmwareUpdatesArgs
    logs?: boolean | DeviceCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceCountOutputType
     */
    select?: DeviceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeCountTelemetryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceTelemetryWhereInput
  }

  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeCountScansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VulnerabilityReportWhereInput
  }

  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeCountAlertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
  }

  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeCountFirmwareUpdatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FirmwareUpdateWhereInput
  }

  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    devices?: boolean | User$devicesArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    alerts?: boolean | User$alertsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    devices?: boolean | User$devicesArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    alerts?: boolean | User$alertsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      devices: Prisma.$DevicePayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      alerts: Prisma.$AlertPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      firstName: string
      lastName: string
      role: $Enums.UserRole
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    devices<T extends User$devicesArgs<ExtArgs> = {}>(args?: Subset<T, User$devicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    alerts<T extends User$alertsArgs<ExtArgs> = {}>(args?: Subset<T, User$alertsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.devices
   */
  export type User$devicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    where?: DeviceWhereInput
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    cursor?: DeviceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeviceScalarFieldEnum | DeviceScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.alerts
   */
  export type User$alertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    cursor?: AlertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Device
   */

  export type AggregateDevice = {
    _count: DeviceCountAggregateOutputType | null
    _avg: DeviceAvgAggregateOutputType | null
    _sum: DeviceSumAggregateOutputType | null
    _min: DeviceMinAggregateOutputType | null
    _max: DeviceMaxAggregateOutputType | null
  }

  export type DeviceAvgAggregateOutputType = {
    securityScore: number | null
  }

  export type DeviceSumAggregateOutputType = {
    securityScore: number | null
  }

  export type DeviceMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.DeviceType | null
    ipAddress: string | null
    macAddress: string | null
    manufacturer: string | null
    model: string | null
    firmwareVersion: string | null
    osVersion: string | null
    status: $Enums.DeviceStatus | null
    lastSeen: Date | null
    registeredAt: Date | null
    updatedAt: Date | null
    securityScore: number | null
    riskLevel: $Enums.RiskLevel | null
    ownerId: string | null
  }

  export type DeviceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.DeviceType | null
    ipAddress: string | null
    macAddress: string | null
    manufacturer: string | null
    model: string | null
    firmwareVersion: string | null
    osVersion: string | null
    status: $Enums.DeviceStatus | null
    lastSeen: Date | null
    registeredAt: Date | null
    updatedAt: Date | null
    securityScore: number | null
    riskLevel: $Enums.RiskLevel | null
    ownerId: string | null
  }

  export type DeviceCountAggregateOutputType = {
    id: number
    name: number
    type: number
    ipAddress: number
    macAddress: number
    manufacturer: number
    model: number
    firmwareVersion: number
    osVersion: number
    status: number
    lastSeen: number
    registeredAt: number
    updatedAt: number
    securityScore: number
    riskLevel: number
    ownerId: number
    _all: number
  }


  export type DeviceAvgAggregateInputType = {
    securityScore?: true
  }

  export type DeviceSumAggregateInputType = {
    securityScore?: true
  }

  export type DeviceMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    ipAddress?: true
    macAddress?: true
    manufacturer?: true
    model?: true
    firmwareVersion?: true
    osVersion?: true
    status?: true
    lastSeen?: true
    registeredAt?: true
    updatedAt?: true
    securityScore?: true
    riskLevel?: true
    ownerId?: true
  }

  export type DeviceMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    ipAddress?: true
    macAddress?: true
    manufacturer?: true
    model?: true
    firmwareVersion?: true
    osVersion?: true
    status?: true
    lastSeen?: true
    registeredAt?: true
    updatedAt?: true
    securityScore?: true
    riskLevel?: true
    ownerId?: true
  }

  export type DeviceCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    ipAddress?: true
    macAddress?: true
    manufacturer?: true
    model?: true
    firmwareVersion?: true
    osVersion?: true
    status?: true
    lastSeen?: true
    registeredAt?: true
    updatedAt?: true
    securityScore?: true
    riskLevel?: true
    ownerId?: true
    _all?: true
  }

  export type DeviceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Device to aggregate.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Devices
    **/
    _count?: true | DeviceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeviceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeviceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceMaxAggregateInputType
  }

  export type GetDeviceAggregateType<T extends DeviceAggregateArgs> = {
        [P in keyof T & keyof AggregateDevice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDevice[P]>
      : GetScalarType<T[P], AggregateDevice[P]>
  }




  export type DeviceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceWhereInput
    orderBy?: DeviceOrderByWithAggregationInput | DeviceOrderByWithAggregationInput[]
    by: DeviceScalarFieldEnum[] | DeviceScalarFieldEnum
    having?: DeviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceCountAggregateInputType | true
    _avg?: DeviceAvgAggregateInputType
    _sum?: DeviceSumAggregateInputType
    _min?: DeviceMinAggregateInputType
    _max?: DeviceMaxAggregateInputType
  }

  export type DeviceGroupByOutputType = {
    id: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer: string | null
    model: string | null
    firmwareVersion: string | null
    osVersion: string | null
    status: $Enums.DeviceStatus
    lastSeen: Date | null
    registeredAt: Date
    updatedAt: Date
    securityScore: number | null
    riskLevel: $Enums.RiskLevel
    ownerId: string
    _count: DeviceCountAggregateOutputType | null
    _avg: DeviceAvgAggregateOutputType | null
    _sum: DeviceSumAggregateOutputType | null
    _min: DeviceMinAggregateOutputType | null
    _max: DeviceMaxAggregateOutputType | null
  }

  type GetDeviceGroupByPayload<T extends DeviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeviceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceGroupByOutputType[P]>
        }
      >
    >


  export type DeviceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    ipAddress?: boolean
    macAddress?: boolean
    manufacturer?: boolean
    model?: boolean
    firmwareVersion?: boolean
    osVersion?: boolean
    status?: boolean
    lastSeen?: boolean
    registeredAt?: boolean
    updatedAt?: boolean
    securityScore?: boolean
    riskLevel?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    telemetry?: boolean | Device$telemetryArgs<ExtArgs>
    scans?: boolean | Device$scansArgs<ExtArgs>
    alerts?: boolean | Device$alertsArgs<ExtArgs>
    firmwareUpdates?: boolean | Device$firmwareUpdatesArgs<ExtArgs>
    logs?: boolean | Device$logsArgs<ExtArgs>
    _count?: boolean | DeviceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["device"]>

  export type DeviceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    ipAddress?: boolean
    macAddress?: boolean
    manufacturer?: boolean
    model?: boolean
    firmwareVersion?: boolean
    osVersion?: boolean
    status?: boolean
    lastSeen?: boolean
    registeredAt?: boolean
    updatedAt?: boolean
    securityScore?: boolean
    riskLevel?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["device"]>

  export type DeviceSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    ipAddress?: boolean
    macAddress?: boolean
    manufacturer?: boolean
    model?: boolean
    firmwareVersion?: boolean
    osVersion?: boolean
    status?: boolean
    lastSeen?: boolean
    registeredAt?: boolean
    updatedAt?: boolean
    securityScore?: boolean
    riskLevel?: boolean
    ownerId?: boolean
  }

  export type DeviceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    telemetry?: boolean | Device$telemetryArgs<ExtArgs>
    scans?: boolean | Device$scansArgs<ExtArgs>
    alerts?: boolean | Device$alertsArgs<ExtArgs>
    firmwareUpdates?: boolean | Device$firmwareUpdatesArgs<ExtArgs>
    logs?: boolean | Device$logsArgs<ExtArgs>
    _count?: boolean | DeviceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DeviceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DevicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Device"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      telemetry: Prisma.$DeviceTelemetryPayload<ExtArgs>[]
      scans: Prisma.$VulnerabilityReportPayload<ExtArgs>[]
      alerts: Prisma.$AlertPayload<ExtArgs>[]
      firmwareUpdates: Prisma.$FirmwareUpdatePayload<ExtArgs>[]
      logs: Prisma.$DeviceLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.DeviceType
      ipAddress: string
      macAddress: string
      manufacturer: string | null
      model: string | null
      firmwareVersion: string | null
      osVersion: string | null
      status: $Enums.DeviceStatus
      lastSeen: Date | null
      registeredAt: Date
      updatedAt: Date
      securityScore: number | null
      riskLevel: $Enums.RiskLevel
      ownerId: string
    }, ExtArgs["result"]["device"]>
    composites: {}
  }

  type DeviceGetPayload<S extends boolean | null | undefined | DeviceDefaultArgs> = $Result.GetResult<Prisma.$DevicePayload, S>

  type DeviceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DeviceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DeviceCountAggregateInputType | true
    }

  export interface DeviceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Device'], meta: { name: 'Device' } }
    /**
     * Find zero or one Device that matches the filter.
     * @param {DeviceFindUniqueArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeviceFindUniqueArgs>(args: SelectSubset<T, DeviceFindUniqueArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Device that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DeviceFindUniqueOrThrowArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeviceFindUniqueOrThrowArgs>(args: SelectSubset<T, DeviceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Device that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindFirstArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeviceFindFirstArgs>(args?: SelectSubset<T, DeviceFindFirstArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Device that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindFirstOrThrowArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeviceFindFirstOrThrowArgs>(args?: SelectSubset<T, DeviceFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Devices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Devices
     * const devices = await prisma.device.findMany()
     * 
     * // Get first 10 Devices
     * const devices = await prisma.device.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deviceWithIdOnly = await prisma.device.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DeviceFindManyArgs>(args?: SelectSubset<T, DeviceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Device.
     * @param {DeviceCreateArgs} args - Arguments to create a Device.
     * @example
     * // Create one Device
     * const Device = await prisma.device.create({
     *   data: {
     *     // ... data to create a Device
     *   }
     * })
     * 
     */
    create<T extends DeviceCreateArgs>(args: SelectSubset<T, DeviceCreateArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Devices.
     * @param {DeviceCreateManyArgs} args - Arguments to create many Devices.
     * @example
     * // Create many Devices
     * const device = await prisma.device.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeviceCreateManyArgs>(args?: SelectSubset<T, DeviceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Devices and returns the data saved in the database.
     * @param {DeviceCreateManyAndReturnArgs} args - Arguments to create many Devices.
     * @example
     * // Create many Devices
     * const device = await prisma.device.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Devices and only return the `id`
     * const deviceWithIdOnly = await prisma.device.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeviceCreateManyAndReturnArgs>(args?: SelectSubset<T, DeviceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Device.
     * @param {DeviceDeleteArgs} args - Arguments to delete one Device.
     * @example
     * // Delete one Device
     * const Device = await prisma.device.delete({
     *   where: {
     *     // ... filter to delete one Device
     *   }
     * })
     * 
     */
    delete<T extends DeviceDeleteArgs>(args: SelectSubset<T, DeviceDeleteArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Device.
     * @param {DeviceUpdateArgs} args - Arguments to update one Device.
     * @example
     * // Update one Device
     * const device = await prisma.device.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeviceUpdateArgs>(args: SelectSubset<T, DeviceUpdateArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Devices.
     * @param {DeviceDeleteManyArgs} args - Arguments to filter Devices to delete.
     * @example
     * // Delete a few Devices
     * const { count } = await prisma.device.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeviceDeleteManyArgs>(args?: SelectSubset<T, DeviceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Devices
     * const device = await prisma.device.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeviceUpdateManyArgs>(args: SelectSubset<T, DeviceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Device.
     * @param {DeviceUpsertArgs} args - Arguments to update or create a Device.
     * @example
     * // Update or create a Device
     * const device = await prisma.device.upsert({
     *   create: {
     *     // ... data to create a Device
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Device we want to update
     *   }
     * })
     */
    upsert<T extends DeviceUpsertArgs>(args: SelectSubset<T, DeviceUpsertArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceCountArgs} args - Arguments to filter Devices to count.
     * @example
     * // Count the number of Devices
     * const count = await prisma.device.count({
     *   where: {
     *     // ... the filter for the Devices we want to count
     *   }
     * })
    **/
    count<T extends DeviceCountArgs>(
      args?: Subset<T, DeviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Device.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceAggregateArgs>(args: Subset<T, DeviceAggregateArgs>): Prisma.PrismaPromise<GetDeviceAggregateType<T>>

    /**
     * Group by Device.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceGroupByArgs['orderBy'] }
        : { orderBy?: DeviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Device model
   */
  readonly fields: DeviceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Device.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeviceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    telemetry<T extends Device$telemetryArgs<ExtArgs> = {}>(args?: Subset<T, Device$telemetryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceTelemetryPayload<ExtArgs>, T, "findMany"> | Null>
    scans<T extends Device$scansArgs<ExtArgs> = {}>(args?: Subset<T, Device$scansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VulnerabilityReportPayload<ExtArgs>, T, "findMany"> | Null>
    alerts<T extends Device$alertsArgs<ExtArgs> = {}>(args?: Subset<T, Device$alertsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany"> | Null>
    firmwareUpdates<T extends Device$firmwareUpdatesArgs<ExtArgs> = {}>(args?: Subset<T, Device$firmwareUpdatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FirmwareUpdatePayload<ExtArgs>, T, "findMany"> | Null>
    logs<T extends Device$logsArgs<ExtArgs> = {}>(args?: Subset<T, Device$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Device model
   */ 
  interface DeviceFieldRefs {
    readonly id: FieldRef<"Device", 'String'>
    readonly name: FieldRef<"Device", 'String'>
    readonly type: FieldRef<"Device", 'DeviceType'>
    readonly ipAddress: FieldRef<"Device", 'String'>
    readonly macAddress: FieldRef<"Device", 'String'>
    readonly manufacturer: FieldRef<"Device", 'String'>
    readonly model: FieldRef<"Device", 'String'>
    readonly firmwareVersion: FieldRef<"Device", 'String'>
    readonly osVersion: FieldRef<"Device", 'String'>
    readonly status: FieldRef<"Device", 'DeviceStatus'>
    readonly lastSeen: FieldRef<"Device", 'DateTime'>
    readonly registeredAt: FieldRef<"Device", 'DateTime'>
    readonly updatedAt: FieldRef<"Device", 'DateTime'>
    readonly securityScore: FieldRef<"Device", 'Float'>
    readonly riskLevel: FieldRef<"Device", 'RiskLevel'>
    readonly ownerId: FieldRef<"Device", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Device findUnique
   */
  export type DeviceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device findUniqueOrThrow
   */
  export type DeviceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device findFirst
   */
  export type DeviceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devices.
     */
    distinct?: DeviceScalarFieldEnum | DeviceScalarFieldEnum[]
  }

  /**
   * Device findFirstOrThrow
   */
  export type DeviceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devices.
     */
    distinct?: DeviceScalarFieldEnum | DeviceScalarFieldEnum[]
  }

  /**
   * Device findMany
   */
  export type DeviceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Devices to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    distinct?: DeviceScalarFieldEnum | DeviceScalarFieldEnum[]
  }

  /**
   * Device create
   */
  export type DeviceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * The data needed to create a Device.
     */
    data: XOR<DeviceCreateInput, DeviceUncheckedCreateInput>
  }

  /**
   * Device createMany
   */
  export type DeviceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Devices.
     */
    data: DeviceCreateManyInput | DeviceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Device createManyAndReturn
   */
  export type DeviceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Devices.
     */
    data: DeviceCreateManyInput | DeviceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Device update
   */
  export type DeviceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * The data needed to update a Device.
     */
    data: XOR<DeviceUpdateInput, DeviceUncheckedUpdateInput>
    /**
     * Choose, which Device to update.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device updateMany
   */
  export type DeviceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Devices.
     */
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyInput>
    /**
     * Filter which Devices to update
     */
    where?: DeviceWhereInput
  }

  /**
   * Device upsert
   */
  export type DeviceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * The filter to search for the Device to update in case it exists.
     */
    where: DeviceWhereUniqueInput
    /**
     * In case the Device found by the `where` argument doesn't exist, create a new Device with this data.
     */
    create: XOR<DeviceCreateInput, DeviceUncheckedCreateInput>
    /**
     * In case the Device was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceUpdateInput, DeviceUncheckedUpdateInput>
  }

  /**
   * Device delete
   */
  export type DeviceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter which Device to delete.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device deleteMany
   */
  export type DeviceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Devices to delete
     */
    where?: DeviceWhereInput
  }

  /**
   * Device.telemetry
   */
  export type Device$telemetryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTelemetry
     */
    select?: DeviceTelemetrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceTelemetryInclude<ExtArgs> | null
    where?: DeviceTelemetryWhereInput
    orderBy?: DeviceTelemetryOrderByWithRelationInput | DeviceTelemetryOrderByWithRelationInput[]
    cursor?: DeviceTelemetryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeviceTelemetryScalarFieldEnum | DeviceTelemetryScalarFieldEnum[]
  }

  /**
   * Device.scans
   */
  export type Device$scansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityReport
     */
    select?: VulnerabilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VulnerabilityReportInclude<ExtArgs> | null
    where?: VulnerabilityReportWhereInput
    orderBy?: VulnerabilityReportOrderByWithRelationInput | VulnerabilityReportOrderByWithRelationInput[]
    cursor?: VulnerabilityReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VulnerabilityReportScalarFieldEnum | VulnerabilityReportScalarFieldEnum[]
  }

  /**
   * Device.alerts
   */
  export type Device$alertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    cursor?: AlertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Device.firmwareUpdates
   */
  export type Device$firmwareUpdatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FirmwareUpdate
     */
    select?: FirmwareUpdateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FirmwareUpdateInclude<ExtArgs> | null
    where?: FirmwareUpdateWhereInput
    orderBy?: FirmwareUpdateOrderByWithRelationInput | FirmwareUpdateOrderByWithRelationInput[]
    cursor?: FirmwareUpdateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FirmwareUpdateScalarFieldEnum | FirmwareUpdateScalarFieldEnum[]
  }

  /**
   * Device.logs
   */
  export type Device$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceLog
     */
    select?: DeviceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceLogInclude<ExtArgs> | null
    where?: DeviceLogWhereInput
    orderBy?: DeviceLogOrderByWithRelationInput | DeviceLogOrderByWithRelationInput[]
    cursor?: DeviceLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeviceLogScalarFieldEnum | DeviceLogScalarFieldEnum[]
  }

  /**
   * Device without action
   */
  export type DeviceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
  }


  /**
   * Model DeviceTelemetry
   */

  export type AggregateDeviceTelemetry = {
    _count: DeviceTelemetryCountAggregateOutputType | null
    _avg: DeviceTelemetryAvgAggregateOutputType | null
    _sum: DeviceTelemetrySumAggregateOutputType | null
    _min: DeviceTelemetryMinAggregateOutputType | null
    _max: DeviceTelemetryMaxAggregateOutputType | null
  }

  export type DeviceTelemetryAvgAggregateOutputType = {
    cpuUsage: number | null
    memoryUsage: number | null
    diskUsage: number | null
    temperature: number | null
    networkIn: number | null
    networkOut: number | null
  }

  export type DeviceTelemetrySumAggregateOutputType = {
    cpuUsage: number | null
    memoryUsage: number | null
    diskUsage: number | null
    temperature: number | null
    networkIn: number | null
    networkOut: number | null
  }

  export type DeviceTelemetryMinAggregateOutputType = {
    id: string | null
    deviceId: string | null
    timestamp: Date | null
    cpuUsage: number | null
    memoryUsage: number | null
    diskUsage: number | null
    temperature: number | null
    networkIn: number | null
    networkOut: number | null
  }

  export type DeviceTelemetryMaxAggregateOutputType = {
    id: string | null
    deviceId: string | null
    timestamp: Date | null
    cpuUsage: number | null
    memoryUsage: number | null
    diskUsage: number | null
    temperature: number | null
    networkIn: number | null
    networkOut: number | null
  }

  export type DeviceTelemetryCountAggregateOutputType = {
    id: number
    deviceId: number
    timestamp: number
    cpuUsage: number
    memoryUsage: number
    diskUsage: number
    temperature: number
    networkIn: number
    networkOut: number
    customData: number
    _all: number
  }


  export type DeviceTelemetryAvgAggregateInputType = {
    cpuUsage?: true
    memoryUsage?: true
    diskUsage?: true
    temperature?: true
    networkIn?: true
    networkOut?: true
  }

  export type DeviceTelemetrySumAggregateInputType = {
    cpuUsage?: true
    memoryUsage?: true
    diskUsage?: true
    temperature?: true
    networkIn?: true
    networkOut?: true
  }

  export type DeviceTelemetryMinAggregateInputType = {
    id?: true
    deviceId?: true
    timestamp?: true
    cpuUsage?: true
    memoryUsage?: true
    diskUsage?: true
    temperature?: true
    networkIn?: true
    networkOut?: true
  }

  export type DeviceTelemetryMaxAggregateInputType = {
    id?: true
    deviceId?: true
    timestamp?: true
    cpuUsage?: true
    memoryUsage?: true
    diskUsage?: true
    temperature?: true
    networkIn?: true
    networkOut?: true
  }

  export type DeviceTelemetryCountAggregateInputType = {
    id?: true
    deviceId?: true
    timestamp?: true
    cpuUsage?: true
    memoryUsage?: true
    diskUsage?: true
    temperature?: true
    networkIn?: true
    networkOut?: true
    customData?: true
    _all?: true
  }

  export type DeviceTelemetryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceTelemetry to aggregate.
     */
    where?: DeviceTelemetryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceTelemetries to fetch.
     */
    orderBy?: DeviceTelemetryOrderByWithRelationInput | DeviceTelemetryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceTelemetryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceTelemetries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceTelemetries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeviceTelemetries
    **/
    _count?: true | DeviceTelemetryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeviceTelemetryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeviceTelemetrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceTelemetryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceTelemetryMaxAggregateInputType
  }

  export type GetDeviceTelemetryAggregateType<T extends DeviceTelemetryAggregateArgs> = {
        [P in keyof T & keyof AggregateDeviceTelemetry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeviceTelemetry[P]>
      : GetScalarType<T[P], AggregateDeviceTelemetry[P]>
  }




  export type DeviceTelemetryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceTelemetryWhereInput
    orderBy?: DeviceTelemetryOrderByWithAggregationInput | DeviceTelemetryOrderByWithAggregationInput[]
    by: DeviceTelemetryScalarFieldEnum[] | DeviceTelemetryScalarFieldEnum
    having?: DeviceTelemetryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceTelemetryCountAggregateInputType | true
    _avg?: DeviceTelemetryAvgAggregateInputType
    _sum?: DeviceTelemetrySumAggregateInputType
    _min?: DeviceTelemetryMinAggregateInputType
    _max?: DeviceTelemetryMaxAggregateInputType
  }

  export type DeviceTelemetryGroupByOutputType = {
    id: string
    deviceId: string
    timestamp: Date
    cpuUsage: number | null
    memoryUsage: number | null
    diskUsage: number | null
    temperature: number | null
    networkIn: number | null
    networkOut: number | null
    customData: JsonValue | null
    _count: DeviceTelemetryCountAggregateOutputType | null
    _avg: DeviceTelemetryAvgAggregateOutputType | null
    _sum: DeviceTelemetrySumAggregateOutputType | null
    _min: DeviceTelemetryMinAggregateOutputType | null
    _max: DeviceTelemetryMaxAggregateOutputType | null
  }

  type GetDeviceTelemetryGroupByPayload<T extends DeviceTelemetryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeviceTelemetryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceTelemetryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceTelemetryGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceTelemetryGroupByOutputType[P]>
        }
      >
    >


  export type DeviceTelemetrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deviceId?: boolean
    timestamp?: boolean
    cpuUsage?: boolean
    memoryUsage?: boolean
    diskUsage?: boolean
    temperature?: boolean
    networkIn?: boolean
    networkOut?: boolean
    customData?: boolean
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deviceTelemetry"]>

  export type DeviceTelemetrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deviceId?: boolean
    timestamp?: boolean
    cpuUsage?: boolean
    memoryUsage?: boolean
    diskUsage?: boolean
    temperature?: boolean
    networkIn?: boolean
    networkOut?: boolean
    customData?: boolean
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deviceTelemetry"]>

  export type DeviceTelemetrySelectScalar = {
    id?: boolean
    deviceId?: boolean
    timestamp?: boolean
    cpuUsage?: boolean
    memoryUsage?: boolean
    diskUsage?: boolean
    temperature?: boolean
    networkIn?: boolean
    networkOut?: boolean
    customData?: boolean
  }

  export type DeviceTelemetryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }
  export type DeviceTelemetryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }

  export type $DeviceTelemetryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DeviceTelemetry"
    objects: {
      device: Prisma.$DevicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      deviceId: string
      timestamp: Date
      cpuUsage: number | null
      memoryUsage: number | null
      diskUsage: number | null
      temperature: number | null
      networkIn: number | null
      networkOut: number | null
      customData: Prisma.JsonValue | null
    }, ExtArgs["result"]["deviceTelemetry"]>
    composites: {}
  }

  type DeviceTelemetryGetPayload<S extends boolean | null | undefined | DeviceTelemetryDefaultArgs> = $Result.GetResult<Prisma.$DeviceTelemetryPayload, S>

  type DeviceTelemetryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DeviceTelemetryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DeviceTelemetryCountAggregateInputType | true
    }

  export interface DeviceTelemetryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeviceTelemetry'], meta: { name: 'DeviceTelemetry' } }
    /**
     * Find zero or one DeviceTelemetry that matches the filter.
     * @param {DeviceTelemetryFindUniqueArgs} args - Arguments to find a DeviceTelemetry
     * @example
     * // Get one DeviceTelemetry
     * const deviceTelemetry = await prisma.deviceTelemetry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeviceTelemetryFindUniqueArgs>(args: SelectSubset<T, DeviceTelemetryFindUniqueArgs<ExtArgs>>): Prisma__DeviceTelemetryClient<$Result.GetResult<Prisma.$DeviceTelemetryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DeviceTelemetry that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DeviceTelemetryFindUniqueOrThrowArgs} args - Arguments to find a DeviceTelemetry
     * @example
     * // Get one DeviceTelemetry
     * const deviceTelemetry = await prisma.deviceTelemetry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeviceTelemetryFindUniqueOrThrowArgs>(args: SelectSubset<T, DeviceTelemetryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeviceTelemetryClient<$Result.GetResult<Prisma.$DeviceTelemetryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DeviceTelemetry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceTelemetryFindFirstArgs} args - Arguments to find a DeviceTelemetry
     * @example
     * // Get one DeviceTelemetry
     * const deviceTelemetry = await prisma.deviceTelemetry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeviceTelemetryFindFirstArgs>(args?: SelectSubset<T, DeviceTelemetryFindFirstArgs<ExtArgs>>): Prisma__DeviceTelemetryClient<$Result.GetResult<Prisma.$DeviceTelemetryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DeviceTelemetry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceTelemetryFindFirstOrThrowArgs} args - Arguments to find a DeviceTelemetry
     * @example
     * // Get one DeviceTelemetry
     * const deviceTelemetry = await prisma.deviceTelemetry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeviceTelemetryFindFirstOrThrowArgs>(args?: SelectSubset<T, DeviceTelemetryFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeviceTelemetryClient<$Result.GetResult<Prisma.$DeviceTelemetryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DeviceTelemetries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceTelemetryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeviceTelemetries
     * const deviceTelemetries = await prisma.deviceTelemetry.findMany()
     * 
     * // Get first 10 DeviceTelemetries
     * const deviceTelemetries = await prisma.deviceTelemetry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deviceTelemetryWithIdOnly = await prisma.deviceTelemetry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DeviceTelemetryFindManyArgs>(args?: SelectSubset<T, DeviceTelemetryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceTelemetryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DeviceTelemetry.
     * @param {DeviceTelemetryCreateArgs} args - Arguments to create a DeviceTelemetry.
     * @example
     * // Create one DeviceTelemetry
     * const DeviceTelemetry = await prisma.deviceTelemetry.create({
     *   data: {
     *     // ... data to create a DeviceTelemetry
     *   }
     * })
     * 
     */
    create<T extends DeviceTelemetryCreateArgs>(args: SelectSubset<T, DeviceTelemetryCreateArgs<ExtArgs>>): Prisma__DeviceTelemetryClient<$Result.GetResult<Prisma.$DeviceTelemetryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DeviceTelemetries.
     * @param {DeviceTelemetryCreateManyArgs} args - Arguments to create many DeviceTelemetries.
     * @example
     * // Create many DeviceTelemetries
     * const deviceTelemetry = await prisma.deviceTelemetry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeviceTelemetryCreateManyArgs>(args?: SelectSubset<T, DeviceTelemetryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DeviceTelemetries and returns the data saved in the database.
     * @param {DeviceTelemetryCreateManyAndReturnArgs} args - Arguments to create many DeviceTelemetries.
     * @example
     * // Create many DeviceTelemetries
     * const deviceTelemetry = await prisma.deviceTelemetry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DeviceTelemetries and only return the `id`
     * const deviceTelemetryWithIdOnly = await prisma.deviceTelemetry.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeviceTelemetryCreateManyAndReturnArgs>(args?: SelectSubset<T, DeviceTelemetryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceTelemetryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DeviceTelemetry.
     * @param {DeviceTelemetryDeleteArgs} args - Arguments to delete one DeviceTelemetry.
     * @example
     * // Delete one DeviceTelemetry
     * const DeviceTelemetry = await prisma.deviceTelemetry.delete({
     *   where: {
     *     // ... filter to delete one DeviceTelemetry
     *   }
     * })
     * 
     */
    delete<T extends DeviceTelemetryDeleteArgs>(args: SelectSubset<T, DeviceTelemetryDeleteArgs<ExtArgs>>): Prisma__DeviceTelemetryClient<$Result.GetResult<Prisma.$DeviceTelemetryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DeviceTelemetry.
     * @param {DeviceTelemetryUpdateArgs} args - Arguments to update one DeviceTelemetry.
     * @example
     * // Update one DeviceTelemetry
     * const deviceTelemetry = await prisma.deviceTelemetry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeviceTelemetryUpdateArgs>(args: SelectSubset<T, DeviceTelemetryUpdateArgs<ExtArgs>>): Prisma__DeviceTelemetryClient<$Result.GetResult<Prisma.$DeviceTelemetryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DeviceTelemetries.
     * @param {DeviceTelemetryDeleteManyArgs} args - Arguments to filter DeviceTelemetries to delete.
     * @example
     * // Delete a few DeviceTelemetries
     * const { count } = await prisma.deviceTelemetry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeviceTelemetryDeleteManyArgs>(args?: SelectSubset<T, DeviceTelemetryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeviceTelemetries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceTelemetryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeviceTelemetries
     * const deviceTelemetry = await prisma.deviceTelemetry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeviceTelemetryUpdateManyArgs>(args: SelectSubset<T, DeviceTelemetryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DeviceTelemetry.
     * @param {DeviceTelemetryUpsertArgs} args - Arguments to update or create a DeviceTelemetry.
     * @example
     * // Update or create a DeviceTelemetry
     * const deviceTelemetry = await prisma.deviceTelemetry.upsert({
     *   create: {
     *     // ... data to create a DeviceTelemetry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeviceTelemetry we want to update
     *   }
     * })
     */
    upsert<T extends DeviceTelemetryUpsertArgs>(args: SelectSubset<T, DeviceTelemetryUpsertArgs<ExtArgs>>): Prisma__DeviceTelemetryClient<$Result.GetResult<Prisma.$DeviceTelemetryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DeviceTelemetries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceTelemetryCountArgs} args - Arguments to filter DeviceTelemetries to count.
     * @example
     * // Count the number of DeviceTelemetries
     * const count = await prisma.deviceTelemetry.count({
     *   where: {
     *     // ... the filter for the DeviceTelemetries we want to count
     *   }
     * })
    **/
    count<T extends DeviceTelemetryCountArgs>(
      args?: Subset<T, DeviceTelemetryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceTelemetryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeviceTelemetry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceTelemetryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceTelemetryAggregateArgs>(args: Subset<T, DeviceTelemetryAggregateArgs>): Prisma.PrismaPromise<GetDeviceTelemetryAggregateType<T>>

    /**
     * Group by DeviceTelemetry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceTelemetryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceTelemetryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceTelemetryGroupByArgs['orderBy'] }
        : { orderBy?: DeviceTelemetryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceTelemetryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceTelemetryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DeviceTelemetry model
   */
  readonly fields: DeviceTelemetryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DeviceTelemetry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeviceTelemetryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    device<T extends DeviceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DeviceDefaultArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DeviceTelemetry model
   */ 
  interface DeviceTelemetryFieldRefs {
    readonly id: FieldRef<"DeviceTelemetry", 'String'>
    readonly deviceId: FieldRef<"DeviceTelemetry", 'String'>
    readonly timestamp: FieldRef<"DeviceTelemetry", 'DateTime'>
    readonly cpuUsage: FieldRef<"DeviceTelemetry", 'Float'>
    readonly memoryUsage: FieldRef<"DeviceTelemetry", 'Float'>
    readonly diskUsage: FieldRef<"DeviceTelemetry", 'Float'>
    readonly temperature: FieldRef<"DeviceTelemetry", 'Float'>
    readonly networkIn: FieldRef<"DeviceTelemetry", 'Float'>
    readonly networkOut: FieldRef<"DeviceTelemetry", 'Float'>
    readonly customData: FieldRef<"DeviceTelemetry", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * DeviceTelemetry findUnique
   */
  export type DeviceTelemetryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTelemetry
     */
    select?: DeviceTelemetrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceTelemetryInclude<ExtArgs> | null
    /**
     * Filter, which DeviceTelemetry to fetch.
     */
    where: DeviceTelemetryWhereUniqueInput
  }

  /**
   * DeviceTelemetry findUniqueOrThrow
   */
  export type DeviceTelemetryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTelemetry
     */
    select?: DeviceTelemetrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceTelemetryInclude<ExtArgs> | null
    /**
     * Filter, which DeviceTelemetry to fetch.
     */
    where: DeviceTelemetryWhereUniqueInput
  }

  /**
   * DeviceTelemetry findFirst
   */
  export type DeviceTelemetryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTelemetry
     */
    select?: DeviceTelemetrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceTelemetryInclude<ExtArgs> | null
    /**
     * Filter, which DeviceTelemetry to fetch.
     */
    where?: DeviceTelemetryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceTelemetries to fetch.
     */
    orderBy?: DeviceTelemetryOrderByWithRelationInput | DeviceTelemetryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceTelemetries.
     */
    cursor?: DeviceTelemetryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceTelemetries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceTelemetries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceTelemetries.
     */
    distinct?: DeviceTelemetryScalarFieldEnum | DeviceTelemetryScalarFieldEnum[]
  }

  /**
   * DeviceTelemetry findFirstOrThrow
   */
  export type DeviceTelemetryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTelemetry
     */
    select?: DeviceTelemetrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceTelemetryInclude<ExtArgs> | null
    /**
     * Filter, which DeviceTelemetry to fetch.
     */
    where?: DeviceTelemetryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceTelemetries to fetch.
     */
    orderBy?: DeviceTelemetryOrderByWithRelationInput | DeviceTelemetryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceTelemetries.
     */
    cursor?: DeviceTelemetryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceTelemetries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceTelemetries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceTelemetries.
     */
    distinct?: DeviceTelemetryScalarFieldEnum | DeviceTelemetryScalarFieldEnum[]
  }

  /**
   * DeviceTelemetry findMany
   */
  export type DeviceTelemetryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTelemetry
     */
    select?: DeviceTelemetrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceTelemetryInclude<ExtArgs> | null
    /**
     * Filter, which DeviceTelemetries to fetch.
     */
    where?: DeviceTelemetryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceTelemetries to fetch.
     */
    orderBy?: DeviceTelemetryOrderByWithRelationInput | DeviceTelemetryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeviceTelemetries.
     */
    cursor?: DeviceTelemetryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceTelemetries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceTelemetries.
     */
    skip?: number
    distinct?: DeviceTelemetryScalarFieldEnum | DeviceTelemetryScalarFieldEnum[]
  }

  /**
   * DeviceTelemetry create
   */
  export type DeviceTelemetryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTelemetry
     */
    select?: DeviceTelemetrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceTelemetryInclude<ExtArgs> | null
    /**
     * The data needed to create a DeviceTelemetry.
     */
    data: XOR<DeviceTelemetryCreateInput, DeviceTelemetryUncheckedCreateInput>
  }

  /**
   * DeviceTelemetry createMany
   */
  export type DeviceTelemetryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DeviceTelemetries.
     */
    data: DeviceTelemetryCreateManyInput | DeviceTelemetryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeviceTelemetry createManyAndReturn
   */
  export type DeviceTelemetryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTelemetry
     */
    select?: DeviceTelemetrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DeviceTelemetries.
     */
    data: DeviceTelemetryCreateManyInput | DeviceTelemetryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceTelemetryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DeviceTelemetry update
   */
  export type DeviceTelemetryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTelemetry
     */
    select?: DeviceTelemetrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceTelemetryInclude<ExtArgs> | null
    /**
     * The data needed to update a DeviceTelemetry.
     */
    data: XOR<DeviceTelemetryUpdateInput, DeviceTelemetryUncheckedUpdateInput>
    /**
     * Choose, which DeviceTelemetry to update.
     */
    where: DeviceTelemetryWhereUniqueInput
  }

  /**
   * DeviceTelemetry updateMany
   */
  export type DeviceTelemetryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DeviceTelemetries.
     */
    data: XOR<DeviceTelemetryUpdateManyMutationInput, DeviceTelemetryUncheckedUpdateManyInput>
    /**
     * Filter which DeviceTelemetries to update
     */
    where?: DeviceTelemetryWhereInput
  }

  /**
   * DeviceTelemetry upsert
   */
  export type DeviceTelemetryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTelemetry
     */
    select?: DeviceTelemetrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceTelemetryInclude<ExtArgs> | null
    /**
     * The filter to search for the DeviceTelemetry to update in case it exists.
     */
    where: DeviceTelemetryWhereUniqueInput
    /**
     * In case the DeviceTelemetry found by the `where` argument doesn't exist, create a new DeviceTelemetry with this data.
     */
    create: XOR<DeviceTelemetryCreateInput, DeviceTelemetryUncheckedCreateInput>
    /**
     * In case the DeviceTelemetry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceTelemetryUpdateInput, DeviceTelemetryUncheckedUpdateInput>
  }

  /**
   * DeviceTelemetry delete
   */
  export type DeviceTelemetryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTelemetry
     */
    select?: DeviceTelemetrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceTelemetryInclude<ExtArgs> | null
    /**
     * Filter which DeviceTelemetry to delete.
     */
    where: DeviceTelemetryWhereUniqueInput
  }

  /**
   * DeviceTelemetry deleteMany
   */
  export type DeviceTelemetryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceTelemetries to delete
     */
    where?: DeviceTelemetryWhereInput
  }

  /**
   * DeviceTelemetry without action
   */
  export type DeviceTelemetryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTelemetry
     */
    select?: DeviceTelemetrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceTelemetryInclude<ExtArgs> | null
  }


  /**
   * Model VulnerabilityReport
   */

  export type AggregateVulnerabilityReport = {
    _count: VulnerabilityReportCountAggregateOutputType | null
    _avg: VulnerabilityReportAvgAggregateOutputType | null
    _sum: VulnerabilityReportSumAggregateOutputType | null
    _min: VulnerabilityReportMinAggregateOutputType | null
    _max: VulnerabilityReportMaxAggregateOutputType | null
  }

  export type VulnerabilityReportAvgAggregateOutputType = {
    criticalCount: number | null
    highCount: number | null
    mediumCount: number | null
    lowCount: number | null
  }

  export type VulnerabilityReportSumAggregateOutputType = {
    criticalCount: number | null
    highCount: number | null
    mediumCount: number | null
    lowCount: number | null
  }

  export type VulnerabilityReportMinAggregateOutputType = {
    id: string | null
    deviceId: string | null
    scanType: $Enums.ScanType | null
    status: $Enums.ScanStatus | null
    startedAt: Date | null
    completedAt: Date | null
    criticalCount: number | null
    highCount: number | null
    mediumCount: number | null
    lowCount: number | null
  }

  export type VulnerabilityReportMaxAggregateOutputType = {
    id: string | null
    deviceId: string | null
    scanType: $Enums.ScanType | null
    status: $Enums.ScanStatus | null
    startedAt: Date | null
    completedAt: Date | null
    criticalCount: number | null
    highCount: number | null
    mediumCount: number | null
    lowCount: number | null
  }

  export type VulnerabilityReportCountAggregateOutputType = {
    id: number
    deviceId: number
    scanType: number
    status: number
    startedAt: number
    completedAt: number
    criticalCount: number
    highCount: number
    mediumCount: number
    lowCount: number
    findings: number
    _all: number
  }


  export type VulnerabilityReportAvgAggregateInputType = {
    criticalCount?: true
    highCount?: true
    mediumCount?: true
    lowCount?: true
  }

  export type VulnerabilityReportSumAggregateInputType = {
    criticalCount?: true
    highCount?: true
    mediumCount?: true
    lowCount?: true
  }

  export type VulnerabilityReportMinAggregateInputType = {
    id?: true
    deviceId?: true
    scanType?: true
    status?: true
    startedAt?: true
    completedAt?: true
    criticalCount?: true
    highCount?: true
    mediumCount?: true
    lowCount?: true
  }

  export type VulnerabilityReportMaxAggregateInputType = {
    id?: true
    deviceId?: true
    scanType?: true
    status?: true
    startedAt?: true
    completedAt?: true
    criticalCount?: true
    highCount?: true
    mediumCount?: true
    lowCount?: true
  }

  export type VulnerabilityReportCountAggregateInputType = {
    id?: true
    deviceId?: true
    scanType?: true
    status?: true
    startedAt?: true
    completedAt?: true
    criticalCount?: true
    highCount?: true
    mediumCount?: true
    lowCount?: true
    findings?: true
    _all?: true
  }

  export type VulnerabilityReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VulnerabilityReport to aggregate.
     */
    where?: VulnerabilityReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VulnerabilityReports to fetch.
     */
    orderBy?: VulnerabilityReportOrderByWithRelationInput | VulnerabilityReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VulnerabilityReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VulnerabilityReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VulnerabilityReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VulnerabilityReports
    **/
    _count?: true | VulnerabilityReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VulnerabilityReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VulnerabilityReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VulnerabilityReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VulnerabilityReportMaxAggregateInputType
  }

  export type GetVulnerabilityReportAggregateType<T extends VulnerabilityReportAggregateArgs> = {
        [P in keyof T & keyof AggregateVulnerabilityReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVulnerabilityReport[P]>
      : GetScalarType<T[P], AggregateVulnerabilityReport[P]>
  }




  export type VulnerabilityReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VulnerabilityReportWhereInput
    orderBy?: VulnerabilityReportOrderByWithAggregationInput | VulnerabilityReportOrderByWithAggregationInput[]
    by: VulnerabilityReportScalarFieldEnum[] | VulnerabilityReportScalarFieldEnum
    having?: VulnerabilityReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VulnerabilityReportCountAggregateInputType | true
    _avg?: VulnerabilityReportAvgAggregateInputType
    _sum?: VulnerabilityReportSumAggregateInputType
    _min?: VulnerabilityReportMinAggregateInputType
    _max?: VulnerabilityReportMaxAggregateInputType
  }

  export type VulnerabilityReportGroupByOutputType = {
    id: string
    deviceId: string
    scanType: $Enums.ScanType
    status: $Enums.ScanStatus
    startedAt: Date
    completedAt: Date | null
    criticalCount: number
    highCount: number
    mediumCount: number
    lowCount: number
    findings: JsonValue | null
    _count: VulnerabilityReportCountAggregateOutputType | null
    _avg: VulnerabilityReportAvgAggregateOutputType | null
    _sum: VulnerabilityReportSumAggregateOutputType | null
    _min: VulnerabilityReportMinAggregateOutputType | null
    _max: VulnerabilityReportMaxAggregateOutputType | null
  }

  type GetVulnerabilityReportGroupByPayload<T extends VulnerabilityReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VulnerabilityReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VulnerabilityReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VulnerabilityReportGroupByOutputType[P]>
            : GetScalarType<T[P], VulnerabilityReportGroupByOutputType[P]>
        }
      >
    >


  export type VulnerabilityReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deviceId?: boolean
    scanType?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    criticalCount?: boolean
    highCount?: boolean
    mediumCount?: boolean
    lowCount?: boolean
    findings?: boolean
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vulnerabilityReport"]>

  export type VulnerabilityReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deviceId?: boolean
    scanType?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    criticalCount?: boolean
    highCount?: boolean
    mediumCount?: boolean
    lowCount?: boolean
    findings?: boolean
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vulnerabilityReport"]>

  export type VulnerabilityReportSelectScalar = {
    id?: boolean
    deviceId?: boolean
    scanType?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    criticalCount?: boolean
    highCount?: boolean
    mediumCount?: boolean
    lowCount?: boolean
    findings?: boolean
  }

  export type VulnerabilityReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }
  export type VulnerabilityReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }

  export type $VulnerabilityReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VulnerabilityReport"
    objects: {
      device: Prisma.$DevicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      deviceId: string
      scanType: $Enums.ScanType
      status: $Enums.ScanStatus
      startedAt: Date
      completedAt: Date | null
      criticalCount: number
      highCount: number
      mediumCount: number
      lowCount: number
      findings: Prisma.JsonValue | null
    }, ExtArgs["result"]["vulnerabilityReport"]>
    composites: {}
  }

  type VulnerabilityReportGetPayload<S extends boolean | null | undefined | VulnerabilityReportDefaultArgs> = $Result.GetResult<Prisma.$VulnerabilityReportPayload, S>

  type VulnerabilityReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VulnerabilityReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VulnerabilityReportCountAggregateInputType | true
    }

  export interface VulnerabilityReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VulnerabilityReport'], meta: { name: 'VulnerabilityReport' } }
    /**
     * Find zero or one VulnerabilityReport that matches the filter.
     * @param {VulnerabilityReportFindUniqueArgs} args - Arguments to find a VulnerabilityReport
     * @example
     * // Get one VulnerabilityReport
     * const vulnerabilityReport = await prisma.vulnerabilityReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VulnerabilityReportFindUniqueArgs>(args: SelectSubset<T, VulnerabilityReportFindUniqueArgs<ExtArgs>>): Prisma__VulnerabilityReportClient<$Result.GetResult<Prisma.$VulnerabilityReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VulnerabilityReport that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VulnerabilityReportFindUniqueOrThrowArgs} args - Arguments to find a VulnerabilityReport
     * @example
     * // Get one VulnerabilityReport
     * const vulnerabilityReport = await prisma.vulnerabilityReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VulnerabilityReportFindUniqueOrThrowArgs>(args: SelectSubset<T, VulnerabilityReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VulnerabilityReportClient<$Result.GetResult<Prisma.$VulnerabilityReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VulnerabilityReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VulnerabilityReportFindFirstArgs} args - Arguments to find a VulnerabilityReport
     * @example
     * // Get one VulnerabilityReport
     * const vulnerabilityReport = await prisma.vulnerabilityReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VulnerabilityReportFindFirstArgs>(args?: SelectSubset<T, VulnerabilityReportFindFirstArgs<ExtArgs>>): Prisma__VulnerabilityReportClient<$Result.GetResult<Prisma.$VulnerabilityReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VulnerabilityReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VulnerabilityReportFindFirstOrThrowArgs} args - Arguments to find a VulnerabilityReport
     * @example
     * // Get one VulnerabilityReport
     * const vulnerabilityReport = await prisma.vulnerabilityReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VulnerabilityReportFindFirstOrThrowArgs>(args?: SelectSubset<T, VulnerabilityReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__VulnerabilityReportClient<$Result.GetResult<Prisma.$VulnerabilityReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VulnerabilityReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VulnerabilityReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VulnerabilityReports
     * const vulnerabilityReports = await prisma.vulnerabilityReport.findMany()
     * 
     * // Get first 10 VulnerabilityReports
     * const vulnerabilityReports = await prisma.vulnerabilityReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vulnerabilityReportWithIdOnly = await prisma.vulnerabilityReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VulnerabilityReportFindManyArgs>(args?: SelectSubset<T, VulnerabilityReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VulnerabilityReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VulnerabilityReport.
     * @param {VulnerabilityReportCreateArgs} args - Arguments to create a VulnerabilityReport.
     * @example
     * // Create one VulnerabilityReport
     * const VulnerabilityReport = await prisma.vulnerabilityReport.create({
     *   data: {
     *     // ... data to create a VulnerabilityReport
     *   }
     * })
     * 
     */
    create<T extends VulnerabilityReportCreateArgs>(args: SelectSubset<T, VulnerabilityReportCreateArgs<ExtArgs>>): Prisma__VulnerabilityReportClient<$Result.GetResult<Prisma.$VulnerabilityReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VulnerabilityReports.
     * @param {VulnerabilityReportCreateManyArgs} args - Arguments to create many VulnerabilityReports.
     * @example
     * // Create many VulnerabilityReports
     * const vulnerabilityReport = await prisma.vulnerabilityReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VulnerabilityReportCreateManyArgs>(args?: SelectSubset<T, VulnerabilityReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VulnerabilityReports and returns the data saved in the database.
     * @param {VulnerabilityReportCreateManyAndReturnArgs} args - Arguments to create many VulnerabilityReports.
     * @example
     * // Create many VulnerabilityReports
     * const vulnerabilityReport = await prisma.vulnerabilityReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VulnerabilityReports and only return the `id`
     * const vulnerabilityReportWithIdOnly = await prisma.vulnerabilityReport.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VulnerabilityReportCreateManyAndReturnArgs>(args?: SelectSubset<T, VulnerabilityReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VulnerabilityReportPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a VulnerabilityReport.
     * @param {VulnerabilityReportDeleteArgs} args - Arguments to delete one VulnerabilityReport.
     * @example
     * // Delete one VulnerabilityReport
     * const VulnerabilityReport = await prisma.vulnerabilityReport.delete({
     *   where: {
     *     // ... filter to delete one VulnerabilityReport
     *   }
     * })
     * 
     */
    delete<T extends VulnerabilityReportDeleteArgs>(args: SelectSubset<T, VulnerabilityReportDeleteArgs<ExtArgs>>): Prisma__VulnerabilityReportClient<$Result.GetResult<Prisma.$VulnerabilityReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VulnerabilityReport.
     * @param {VulnerabilityReportUpdateArgs} args - Arguments to update one VulnerabilityReport.
     * @example
     * // Update one VulnerabilityReport
     * const vulnerabilityReport = await prisma.vulnerabilityReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VulnerabilityReportUpdateArgs>(args: SelectSubset<T, VulnerabilityReportUpdateArgs<ExtArgs>>): Prisma__VulnerabilityReportClient<$Result.GetResult<Prisma.$VulnerabilityReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VulnerabilityReports.
     * @param {VulnerabilityReportDeleteManyArgs} args - Arguments to filter VulnerabilityReports to delete.
     * @example
     * // Delete a few VulnerabilityReports
     * const { count } = await prisma.vulnerabilityReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VulnerabilityReportDeleteManyArgs>(args?: SelectSubset<T, VulnerabilityReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VulnerabilityReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VulnerabilityReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VulnerabilityReports
     * const vulnerabilityReport = await prisma.vulnerabilityReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VulnerabilityReportUpdateManyArgs>(args: SelectSubset<T, VulnerabilityReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VulnerabilityReport.
     * @param {VulnerabilityReportUpsertArgs} args - Arguments to update or create a VulnerabilityReport.
     * @example
     * // Update or create a VulnerabilityReport
     * const vulnerabilityReport = await prisma.vulnerabilityReport.upsert({
     *   create: {
     *     // ... data to create a VulnerabilityReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VulnerabilityReport we want to update
     *   }
     * })
     */
    upsert<T extends VulnerabilityReportUpsertArgs>(args: SelectSubset<T, VulnerabilityReportUpsertArgs<ExtArgs>>): Prisma__VulnerabilityReportClient<$Result.GetResult<Prisma.$VulnerabilityReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VulnerabilityReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VulnerabilityReportCountArgs} args - Arguments to filter VulnerabilityReports to count.
     * @example
     * // Count the number of VulnerabilityReports
     * const count = await prisma.vulnerabilityReport.count({
     *   where: {
     *     // ... the filter for the VulnerabilityReports we want to count
     *   }
     * })
    **/
    count<T extends VulnerabilityReportCountArgs>(
      args?: Subset<T, VulnerabilityReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VulnerabilityReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VulnerabilityReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VulnerabilityReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VulnerabilityReportAggregateArgs>(args: Subset<T, VulnerabilityReportAggregateArgs>): Prisma.PrismaPromise<GetVulnerabilityReportAggregateType<T>>

    /**
     * Group by VulnerabilityReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VulnerabilityReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VulnerabilityReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VulnerabilityReportGroupByArgs['orderBy'] }
        : { orderBy?: VulnerabilityReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VulnerabilityReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVulnerabilityReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VulnerabilityReport model
   */
  readonly fields: VulnerabilityReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VulnerabilityReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VulnerabilityReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    device<T extends DeviceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DeviceDefaultArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VulnerabilityReport model
   */ 
  interface VulnerabilityReportFieldRefs {
    readonly id: FieldRef<"VulnerabilityReport", 'String'>
    readonly deviceId: FieldRef<"VulnerabilityReport", 'String'>
    readonly scanType: FieldRef<"VulnerabilityReport", 'ScanType'>
    readonly status: FieldRef<"VulnerabilityReport", 'ScanStatus'>
    readonly startedAt: FieldRef<"VulnerabilityReport", 'DateTime'>
    readonly completedAt: FieldRef<"VulnerabilityReport", 'DateTime'>
    readonly criticalCount: FieldRef<"VulnerabilityReport", 'Int'>
    readonly highCount: FieldRef<"VulnerabilityReport", 'Int'>
    readonly mediumCount: FieldRef<"VulnerabilityReport", 'Int'>
    readonly lowCount: FieldRef<"VulnerabilityReport", 'Int'>
    readonly findings: FieldRef<"VulnerabilityReport", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * VulnerabilityReport findUnique
   */
  export type VulnerabilityReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityReport
     */
    select?: VulnerabilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VulnerabilityReportInclude<ExtArgs> | null
    /**
     * Filter, which VulnerabilityReport to fetch.
     */
    where: VulnerabilityReportWhereUniqueInput
  }

  /**
   * VulnerabilityReport findUniqueOrThrow
   */
  export type VulnerabilityReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityReport
     */
    select?: VulnerabilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VulnerabilityReportInclude<ExtArgs> | null
    /**
     * Filter, which VulnerabilityReport to fetch.
     */
    where: VulnerabilityReportWhereUniqueInput
  }

  /**
   * VulnerabilityReport findFirst
   */
  export type VulnerabilityReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityReport
     */
    select?: VulnerabilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VulnerabilityReportInclude<ExtArgs> | null
    /**
     * Filter, which VulnerabilityReport to fetch.
     */
    where?: VulnerabilityReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VulnerabilityReports to fetch.
     */
    orderBy?: VulnerabilityReportOrderByWithRelationInput | VulnerabilityReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VulnerabilityReports.
     */
    cursor?: VulnerabilityReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VulnerabilityReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VulnerabilityReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VulnerabilityReports.
     */
    distinct?: VulnerabilityReportScalarFieldEnum | VulnerabilityReportScalarFieldEnum[]
  }

  /**
   * VulnerabilityReport findFirstOrThrow
   */
  export type VulnerabilityReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityReport
     */
    select?: VulnerabilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VulnerabilityReportInclude<ExtArgs> | null
    /**
     * Filter, which VulnerabilityReport to fetch.
     */
    where?: VulnerabilityReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VulnerabilityReports to fetch.
     */
    orderBy?: VulnerabilityReportOrderByWithRelationInput | VulnerabilityReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VulnerabilityReports.
     */
    cursor?: VulnerabilityReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VulnerabilityReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VulnerabilityReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VulnerabilityReports.
     */
    distinct?: VulnerabilityReportScalarFieldEnum | VulnerabilityReportScalarFieldEnum[]
  }

  /**
   * VulnerabilityReport findMany
   */
  export type VulnerabilityReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityReport
     */
    select?: VulnerabilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VulnerabilityReportInclude<ExtArgs> | null
    /**
     * Filter, which VulnerabilityReports to fetch.
     */
    where?: VulnerabilityReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VulnerabilityReports to fetch.
     */
    orderBy?: VulnerabilityReportOrderByWithRelationInput | VulnerabilityReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VulnerabilityReports.
     */
    cursor?: VulnerabilityReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VulnerabilityReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VulnerabilityReports.
     */
    skip?: number
    distinct?: VulnerabilityReportScalarFieldEnum | VulnerabilityReportScalarFieldEnum[]
  }

  /**
   * VulnerabilityReport create
   */
  export type VulnerabilityReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityReport
     */
    select?: VulnerabilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VulnerabilityReportInclude<ExtArgs> | null
    /**
     * The data needed to create a VulnerabilityReport.
     */
    data: XOR<VulnerabilityReportCreateInput, VulnerabilityReportUncheckedCreateInput>
  }

  /**
   * VulnerabilityReport createMany
   */
  export type VulnerabilityReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VulnerabilityReports.
     */
    data: VulnerabilityReportCreateManyInput | VulnerabilityReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VulnerabilityReport createManyAndReturn
   */
  export type VulnerabilityReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityReport
     */
    select?: VulnerabilityReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many VulnerabilityReports.
     */
    data: VulnerabilityReportCreateManyInput | VulnerabilityReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VulnerabilityReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VulnerabilityReport update
   */
  export type VulnerabilityReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityReport
     */
    select?: VulnerabilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VulnerabilityReportInclude<ExtArgs> | null
    /**
     * The data needed to update a VulnerabilityReport.
     */
    data: XOR<VulnerabilityReportUpdateInput, VulnerabilityReportUncheckedUpdateInput>
    /**
     * Choose, which VulnerabilityReport to update.
     */
    where: VulnerabilityReportWhereUniqueInput
  }

  /**
   * VulnerabilityReport updateMany
   */
  export type VulnerabilityReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VulnerabilityReports.
     */
    data: XOR<VulnerabilityReportUpdateManyMutationInput, VulnerabilityReportUncheckedUpdateManyInput>
    /**
     * Filter which VulnerabilityReports to update
     */
    where?: VulnerabilityReportWhereInput
  }

  /**
   * VulnerabilityReport upsert
   */
  export type VulnerabilityReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityReport
     */
    select?: VulnerabilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VulnerabilityReportInclude<ExtArgs> | null
    /**
     * The filter to search for the VulnerabilityReport to update in case it exists.
     */
    where: VulnerabilityReportWhereUniqueInput
    /**
     * In case the VulnerabilityReport found by the `where` argument doesn't exist, create a new VulnerabilityReport with this data.
     */
    create: XOR<VulnerabilityReportCreateInput, VulnerabilityReportUncheckedCreateInput>
    /**
     * In case the VulnerabilityReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VulnerabilityReportUpdateInput, VulnerabilityReportUncheckedUpdateInput>
  }

  /**
   * VulnerabilityReport delete
   */
  export type VulnerabilityReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityReport
     */
    select?: VulnerabilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VulnerabilityReportInclude<ExtArgs> | null
    /**
     * Filter which VulnerabilityReport to delete.
     */
    where: VulnerabilityReportWhereUniqueInput
  }

  /**
   * VulnerabilityReport deleteMany
   */
  export type VulnerabilityReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VulnerabilityReports to delete
     */
    where?: VulnerabilityReportWhereInput
  }

  /**
   * VulnerabilityReport without action
   */
  export type VulnerabilityReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VulnerabilityReport
     */
    select?: VulnerabilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VulnerabilityReportInclude<ExtArgs> | null
  }


  /**
   * Model Alert
   */

  export type AggregateAlert = {
    _count: AlertCountAggregateOutputType | null
    _min: AlertMinAggregateOutputType | null
    _max: AlertMaxAggregateOutputType | null
  }

  export type AlertMinAggregateOutputType = {
    id: string | null
    deviceId: string | null
    userId: string | null
    type: $Enums.AlertType | null
    severity: $Enums.AlertSeverity | null
    title: string | null
    description: string | null
    status: $Enums.AlertStatus | null
    createdAt: Date | null
    resolvedAt: Date | null
  }

  export type AlertMaxAggregateOutputType = {
    id: string | null
    deviceId: string | null
    userId: string | null
    type: $Enums.AlertType | null
    severity: $Enums.AlertSeverity | null
    title: string | null
    description: string | null
    status: $Enums.AlertStatus | null
    createdAt: Date | null
    resolvedAt: Date | null
  }

  export type AlertCountAggregateOutputType = {
    id: number
    deviceId: number
    userId: number
    type: number
    severity: number
    title: number
    description: number
    status: number
    createdAt: number
    resolvedAt: number
    metadata: number
    _all: number
  }


  export type AlertMinAggregateInputType = {
    id?: true
    deviceId?: true
    userId?: true
    type?: true
    severity?: true
    title?: true
    description?: true
    status?: true
    createdAt?: true
    resolvedAt?: true
  }

  export type AlertMaxAggregateInputType = {
    id?: true
    deviceId?: true
    userId?: true
    type?: true
    severity?: true
    title?: true
    description?: true
    status?: true
    createdAt?: true
    resolvedAt?: true
  }

  export type AlertCountAggregateInputType = {
    id?: true
    deviceId?: true
    userId?: true
    type?: true
    severity?: true
    title?: true
    description?: true
    status?: true
    createdAt?: true
    resolvedAt?: true
    metadata?: true
    _all?: true
  }

  export type AlertAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alert to aggregate.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alerts
    **/
    _count?: true | AlertCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlertMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlertMaxAggregateInputType
  }

  export type GetAlertAggregateType<T extends AlertAggregateArgs> = {
        [P in keyof T & keyof AggregateAlert]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlert[P]>
      : GetScalarType<T[P], AggregateAlert[P]>
  }




  export type AlertGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithAggregationInput | AlertOrderByWithAggregationInput[]
    by: AlertScalarFieldEnum[] | AlertScalarFieldEnum
    having?: AlertScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlertCountAggregateInputType | true
    _min?: AlertMinAggregateInputType
    _max?: AlertMaxAggregateInputType
  }

  export type AlertGroupByOutputType = {
    id: string
    deviceId: string | null
    userId: string | null
    type: $Enums.AlertType
    severity: $Enums.AlertSeverity
    title: string
    description: string
    status: $Enums.AlertStatus
    createdAt: Date
    resolvedAt: Date | null
    metadata: JsonValue | null
    _count: AlertCountAggregateOutputType | null
    _min: AlertMinAggregateOutputType | null
    _max: AlertMaxAggregateOutputType | null
  }

  type GetAlertGroupByPayload<T extends AlertGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlertGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlertGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlertGroupByOutputType[P]>
            : GetScalarType<T[P], AlertGroupByOutputType[P]>
        }
      >
    >


  export type AlertSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deviceId?: boolean
    userId?: boolean
    type?: boolean
    severity?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    resolvedAt?: boolean
    metadata?: boolean
    device?: boolean | Alert$deviceArgs<ExtArgs>
    user?: boolean | Alert$userArgs<ExtArgs>
  }, ExtArgs["result"]["alert"]>

  export type AlertSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deviceId?: boolean
    userId?: boolean
    type?: boolean
    severity?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    resolvedAt?: boolean
    metadata?: boolean
    device?: boolean | Alert$deviceArgs<ExtArgs>
    user?: boolean | Alert$userArgs<ExtArgs>
  }, ExtArgs["result"]["alert"]>

  export type AlertSelectScalar = {
    id?: boolean
    deviceId?: boolean
    userId?: boolean
    type?: boolean
    severity?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    resolvedAt?: boolean
    metadata?: boolean
  }

  export type AlertInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    device?: boolean | Alert$deviceArgs<ExtArgs>
    user?: boolean | Alert$userArgs<ExtArgs>
  }
  export type AlertIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    device?: boolean | Alert$deviceArgs<ExtArgs>
    user?: boolean | Alert$userArgs<ExtArgs>
  }

  export type $AlertPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alert"
    objects: {
      device: Prisma.$DevicePayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      deviceId: string | null
      userId: string | null
      type: $Enums.AlertType
      severity: $Enums.AlertSeverity
      title: string
      description: string
      status: $Enums.AlertStatus
      createdAt: Date
      resolvedAt: Date | null
      metadata: Prisma.JsonValue | null
    }, ExtArgs["result"]["alert"]>
    composites: {}
  }

  type AlertGetPayload<S extends boolean | null | undefined | AlertDefaultArgs> = $Result.GetResult<Prisma.$AlertPayload, S>

  type AlertCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlertFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlertCountAggregateInputType | true
    }

  export interface AlertDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alert'], meta: { name: 'Alert' } }
    /**
     * Find zero or one Alert that matches the filter.
     * @param {AlertFindUniqueArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlertFindUniqueArgs>(args: SelectSubset<T, AlertFindUniqueArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Alert that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AlertFindUniqueOrThrowArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlertFindUniqueOrThrowArgs>(args: SelectSubset<T, AlertFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Alert that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindFirstArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlertFindFirstArgs>(args?: SelectSubset<T, AlertFindFirstArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Alert that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindFirstOrThrowArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlertFindFirstOrThrowArgs>(args?: SelectSubset<T, AlertFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Alerts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alerts
     * const alerts = await prisma.alert.findMany()
     * 
     * // Get first 10 Alerts
     * const alerts = await prisma.alert.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alertWithIdOnly = await prisma.alert.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlertFindManyArgs>(args?: SelectSubset<T, AlertFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Alert.
     * @param {AlertCreateArgs} args - Arguments to create a Alert.
     * @example
     * // Create one Alert
     * const Alert = await prisma.alert.create({
     *   data: {
     *     // ... data to create a Alert
     *   }
     * })
     * 
     */
    create<T extends AlertCreateArgs>(args: SelectSubset<T, AlertCreateArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Alerts.
     * @param {AlertCreateManyArgs} args - Arguments to create many Alerts.
     * @example
     * // Create many Alerts
     * const alert = await prisma.alert.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlertCreateManyArgs>(args?: SelectSubset<T, AlertCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alerts and returns the data saved in the database.
     * @param {AlertCreateManyAndReturnArgs} args - Arguments to create many Alerts.
     * @example
     * // Create many Alerts
     * const alert = await prisma.alert.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alerts and only return the `id`
     * const alertWithIdOnly = await prisma.alert.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlertCreateManyAndReturnArgs>(args?: SelectSubset<T, AlertCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Alert.
     * @param {AlertDeleteArgs} args - Arguments to delete one Alert.
     * @example
     * // Delete one Alert
     * const Alert = await prisma.alert.delete({
     *   where: {
     *     // ... filter to delete one Alert
     *   }
     * })
     * 
     */
    delete<T extends AlertDeleteArgs>(args: SelectSubset<T, AlertDeleteArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Alert.
     * @param {AlertUpdateArgs} args - Arguments to update one Alert.
     * @example
     * // Update one Alert
     * const alert = await prisma.alert.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlertUpdateArgs>(args: SelectSubset<T, AlertUpdateArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Alerts.
     * @param {AlertDeleteManyArgs} args - Arguments to filter Alerts to delete.
     * @example
     * // Delete a few Alerts
     * const { count } = await prisma.alert.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlertDeleteManyArgs>(args?: SelectSubset<T, AlertDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alerts
     * const alert = await prisma.alert.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlertUpdateManyArgs>(args: SelectSubset<T, AlertUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alert.
     * @param {AlertUpsertArgs} args - Arguments to update or create a Alert.
     * @example
     * // Update or create a Alert
     * const alert = await prisma.alert.upsert({
     *   create: {
     *     // ... data to create a Alert
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alert we want to update
     *   }
     * })
     */
    upsert<T extends AlertUpsertArgs>(args: SelectSubset<T, AlertUpsertArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertCountArgs} args - Arguments to filter Alerts to count.
     * @example
     * // Count the number of Alerts
     * const count = await prisma.alert.count({
     *   where: {
     *     // ... the filter for the Alerts we want to count
     *   }
     * })
    **/
    count<T extends AlertCountArgs>(
      args?: Subset<T, AlertCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlertCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlertAggregateArgs>(args: Subset<T, AlertAggregateArgs>): Prisma.PrismaPromise<GetAlertAggregateType<T>>

    /**
     * Group by Alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlertGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlertGroupByArgs['orderBy'] }
        : { orderBy?: AlertGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlertGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlertGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alert model
   */
  readonly fields: AlertFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alert.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlertClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    device<T extends Alert$deviceArgs<ExtArgs> = {}>(args?: Subset<T, Alert$deviceArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends Alert$userArgs<ExtArgs> = {}>(args?: Subset<T, Alert$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alert model
   */ 
  interface AlertFieldRefs {
    readonly id: FieldRef<"Alert", 'String'>
    readonly deviceId: FieldRef<"Alert", 'String'>
    readonly userId: FieldRef<"Alert", 'String'>
    readonly type: FieldRef<"Alert", 'AlertType'>
    readonly severity: FieldRef<"Alert", 'AlertSeverity'>
    readonly title: FieldRef<"Alert", 'String'>
    readonly description: FieldRef<"Alert", 'String'>
    readonly status: FieldRef<"Alert", 'AlertStatus'>
    readonly createdAt: FieldRef<"Alert", 'DateTime'>
    readonly resolvedAt: FieldRef<"Alert", 'DateTime'>
    readonly metadata: FieldRef<"Alert", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Alert findUnique
   */
  export type AlertFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert findUniqueOrThrow
   */
  export type AlertFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert findFirst
   */
  export type AlertFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alerts.
     */
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert findFirstOrThrow
   */
  export type AlertFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alerts.
     */
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert findMany
   */
  export type AlertFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alerts to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert create
   */
  export type AlertCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The data needed to create a Alert.
     */
    data: XOR<AlertCreateInput, AlertUncheckedCreateInput>
  }

  /**
   * Alert createMany
   */
  export type AlertCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alerts.
     */
    data: AlertCreateManyInput | AlertCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alert createManyAndReturn
   */
  export type AlertCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Alerts.
     */
    data: AlertCreateManyInput | AlertCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alert update
   */
  export type AlertUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The data needed to update a Alert.
     */
    data: XOR<AlertUpdateInput, AlertUncheckedUpdateInput>
    /**
     * Choose, which Alert to update.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert updateMany
   */
  export type AlertUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alerts.
     */
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyInput>
    /**
     * Filter which Alerts to update
     */
    where?: AlertWhereInput
  }

  /**
   * Alert upsert
   */
  export type AlertUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The filter to search for the Alert to update in case it exists.
     */
    where: AlertWhereUniqueInput
    /**
     * In case the Alert found by the `where` argument doesn't exist, create a new Alert with this data.
     */
    create: XOR<AlertCreateInput, AlertUncheckedCreateInput>
    /**
     * In case the Alert was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlertUpdateInput, AlertUncheckedUpdateInput>
  }

  /**
   * Alert delete
   */
  export type AlertDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter which Alert to delete.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert deleteMany
   */
  export type AlertDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alerts to delete
     */
    where?: AlertWhereInput
  }

  /**
   * Alert.device
   */
  export type Alert$deviceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    where?: DeviceWhereInput
  }

  /**
   * Alert.user
   */
  export type Alert$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Alert without action
   */
  export type AlertDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
  }


  /**
   * Model FirmwareUpdate
   */

  export type AggregateFirmwareUpdate = {
    _count: FirmwareUpdateCountAggregateOutputType | null
    _avg: FirmwareUpdateAvgAggregateOutputType | null
    _sum: FirmwareUpdateSumAggregateOutputType | null
    _min: FirmwareUpdateMinAggregateOutputType | null
    _max: FirmwareUpdateMaxAggregateOutputType | null
  }

  export type FirmwareUpdateAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type FirmwareUpdateSumAggregateOutputType = {
    fileSize: number | null
  }

  export type FirmwareUpdateMinAggregateOutputType = {
    id: string | null
    deviceId: string | null
    version: string | null
    fileName: string | null
    fileSize: number | null
    checksum: string | null
    status: $Enums.FirmwareStatus | null
    uploadedAt: Date | null
    deployedAt: Date | null
  }

  export type FirmwareUpdateMaxAggregateOutputType = {
    id: string | null
    deviceId: string | null
    version: string | null
    fileName: string | null
    fileSize: number | null
    checksum: string | null
    status: $Enums.FirmwareStatus | null
    uploadedAt: Date | null
    deployedAt: Date | null
  }

  export type FirmwareUpdateCountAggregateOutputType = {
    id: number
    deviceId: number
    version: number
    fileName: number
    fileSize: number
    checksum: number
    status: number
    uploadedAt: number
    deployedAt: number
    _all: number
  }


  export type FirmwareUpdateAvgAggregateInputType = {
    fileSize?: true
  }

  export type FirmwareUpdateSumAggregateInputType = {
    fileSize?: true
  }

  export type FirmwareUpdateMinAggregateInputType = {
    id?: true
    deviceId?: true
    version?: true
    fileName?: true
    fileSize?: true
    checksum?: true
    status?: true
    uploadedAt?: true
    deployedAt?: true
  }

  export type FirmwareUpdateMaxAggregateInputType = {
    id?: true
    deviceId?: true
    version?: true
    fileName?: true
    fileSize?: true
    checksum?: true
    status?: true
    uploadedAt?: true
    deployedAt?: true
  }

  export type FirmwareUpdateCountAggregateInputType = {
    id?: true
    deviceId?: true
    version?: true
    fileName?: true
    fileSize?: true
    checksum?: true
    status?: true
    uploadedAt?: true
    deployedAt?: true
    _all?: true
  }

  export type FirmwareUpdateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FirmwareUpdate to aggregate.
     */
    where?: FirmwareUpdateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FirmwareUpdates to fetch.
     */
    orderBy?: FirmwareUpdateOrderByWithRelationInput | FirmwareUpdateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FirmwareUpdateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FirmwareUpdates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FirmwareUpdates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FirmwareUpdates
    **/
    _count?: true | FirmwareUpdateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FirmwareUpdateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FirmwareUpdateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FirmwareUpdateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FirmwareUpdateMaxAggregateInputType
  }

  export type GetFirmwareUpdateAggregateType<T extends FirmwareUpdateAggregateArgs> = {
        [P in keyof T & keyof AggregateFirmwareUpdate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFirmwareUpdate[P]>
      : GetScalarType<T[P], AggregateFirmwareUpdate[P]>
  }




  export type FirmwareUpdateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FirmwareUpdateWhereInput
    orderBy?: FirmwareUpdateOrderByWithAggregationInput | FirmwareUpdateOrderByWithAggregationInput[]
    by: FirmwareUpdateScalarFieldEnum[] | FirmwareUpdateScalarFieldEnum
    having?: FirmwareUpdateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FirmwareUpdateCountAggregateInputType | true
    _avg?: FirmwareUpdateAvgAggregateInputType
    _sum?: FirmwareUpdateSumAggregateInputType
    _min?: FirmwareUpdateMinAggregateInputType
    _max?: FirmwareUpdateMaxAggregateInputType
  }

  export type FirmwareUpdateGroupByOutputType = {
    id: string
    deviceId: string
    version: string
    fileName: string
    fileSize: number
    checksum: string
    status: $Enums.FirmwareStatus
    uploadedAt: Date
    deployedAt: Date | null
    _count: FirmwareUpdateCountAggregateOutputType | null
    _avg: FirmwareUpdateAvgAggregateOutputType | null
    _sum: FirmwareUpdateSumAggregateOutputType | null
    _min: FirmwareUpdateMinAggregateOutputType | null
    _max: FirmwareUpdateMaxAggregateOutputType | null
  }

  type GetFirmwareUpdateGroupByPayload<T extends FirmwareUpdateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FirmwareUpdateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FirmwareUpdateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FirmwareUpdateGroupByOutputType[P]>
            : GetScalarType<T[P], FirmwareUpdateGroupByOutputType[P]>
        }
      >
    >


  export type FirmwareUpdateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deviceId?: boolean
    version?: boolean
    fileName?: boolean
    fileSize?: boolean
    checksum?: boolean
    status?: boolean
    uploadedAt?: boolean
    deployedAt?: boolean
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["firmwareUpdate"]>

  export type FirmwareUpdateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deviceId?: boolean
    version?: boolean
    fileName?: boolean
    fileSize?: boolean
    checksum?: boolean
    status?: boolean
    uploadedAt?: boolean
    deployedAt?: boolean
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["firmwareUpdate"]>

  export type FirmwareUpdateSelectScalar = {
    id?: boolean
    deviceId?: boolean
    version?: boolean
    fileName?: boolean
    fileSize?: boolean
    checksum?: boolean
    status?: boolean
    uploadedAt?: boolean
    deployedAt?: boolean
  }

  export type FirmwareUpdateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }
  export type FirmwareUpdateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }

  export type $FirmwareUpdatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FirmwareUpdate"
    objects: {
      device: Prisma.$DevicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      deviceId: string
      version: string
      fileName: string
      fileSize: number
      checksum: string
      status: $Enums.FirmwareStatus
      uploadedAt: Date
      deployedAt: Date | null
    }, ExtArgs["result"]["firmwareUpdate"]>
    composites: {}
  }

  type FirmwareUpdateGetPayload<S extends boolean | null | undefined | FirmwareUpdateDefaultArgs> = $Result.GetResult<Prisma.$FirmwareUpdatePayload, S>

  type FirmwareUpdateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FirmwareUpdateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FirmwareUpdateCountAggregateInputType | true
    }

  export interface FirmwareUpdateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FirmwareUpdate'], meta: { name: 'FirmwareUpdate' } }
    /**
     * Find zero or one FirmwareUpdate that matches the filter.
     * @param {FirmwareUpdateFindUniqueArgs} args - Arguments to find a FirmwareUpdate
     * @example
     * // Get one FirmwareUpdate
     * const firmwareUpdate = await prisma.firmwareUpdate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FirmwareUpdateFindUniqueArgs>(args: SelectSubset<T, FirmwareUpdateFindUniqueArgs<ExtArgs>>): Prisma__FirmwareUpdateClient<$Result.GetResult<Prisma.$FirmwareUpdatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FirmwareUpdate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FirmwareUpdateFindUniqueOrThrowArgs} args - Arguments to find a FirmwareUpdate
     * @example
     * // Get one FirmwareUpdate
     * const firmwareUpdate = await prisma.firmwareUpdate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FirmwareUpdateFindUniqueOrThrowArgs>(args: SelectSubset<T, FirmwareUpdateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FirmwareUpdateClient<$Result.GetResult<Prisma.$FirmwareUpdatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FirmwareUpdate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FirmwareUpdateFindFirstArgs} args - Arguments to find a FirmwareUpdate
     * @example
     * // Get one FirmwareUpdate
     * const firmwareUpdate = await prisma.firmwareUpdate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FirmwareUpdateFindFirstArgs>(args?: SelectSubset<T, FirmwareUpdateFindFirstArgs<ExtArgs>>): Prisma__FirmwareUpdateClient<$Result.GetResult<Prisma.$FirmwareUpdatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FirmwareUpdate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FirmwareUpdateFindFirstOrThrowArgs} args - Arguments to find a FirmwareUpdate
     * @example
     * // Get one FirmwareUpdate
     * const firmwareUpdate = await prisma.firmwareUpdate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FirmwareUpdateFindFirstOrThrowArgs>(args?: SelectSubset<T, FirmwareUpdateFindFirstOrThrowArgs<ExtArgs>>): Prisma__FirmwareUpdateClient<$Result.GetResult<Prisma.$FirmwareUpdatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FirmwareUpdates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FirmwareUpdateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FirmwareUpdates
     * const firmwareUpdates = await prisma.firmwareUpdate.findMany()
     * 
     * // Get first 10 FirmwareUpdates
     * const firmwareUpdates = await prisma.firmwareUpdate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const firmwareUpdateWithIdOnly = await prisma.firmwareUpdate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FirmwareUpdateFindManyArgs>(args?: SelectSubset<T, FirmwareUpdateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FirmwareUpdatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FirmwareUpdate.
     * @param {FirmwareUpdateCreateArgs} args - Arguments to create a FirmwareUpdate.
     * @example
     * // Create one FirmwareUpdate
     * const FirmwareUpdate = await prisma.firmwareUpdate.create({
     *   data: {
     *     // ... data to create a FirmwareUpdate
     *   }
     * })
     * 
     */
    create<T extends FirmwareUpdateCreateArgs>(args: SelectSubset<T, FirmwareUpdateCreateArgs<ExtArgs>>): Prisma__FirmwareUpdateClient<$Result.GetResult<Prisma.$FirmwareUpdatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FirmwareUpdates.
     * @param {FirmwareUpdateCreateManyArgs} args - Arguments to create many FirmwareUpdates.
     * @example
     * // Create many FirmwareUpdates
     * const firmwareUpdate = await prisma.firmwareUpdate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FirmwareUpdateCreateManyArgs>(args?: SelectSubset<T, FirmwareUpdateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FirmwareUpdates and returns the data saved in the database.
     * @param {FirmwareUpdateCreateManyAndReturnArgs} args - Arguments to create many FirmwareUpdates.
     * @example
     * // Create many FirmwareUpdates
     * const firmwareUpdate = await prisma.firmwareUpdate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FirmwareUpdates and only return the `id`
     * const firmwareUpdateWithIdOnly = await prisma.firmwareUpdate.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FirmwareUpdateCreateManyAndReturnArgs>(args?: SelectSubset<T, FirmwareUpdateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FirmwareUpdatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FirmwareUpdate.
     * @param {FirmwareUpdateDeleteArgs} args - Arguments to delete one FirmwareUpdate.
     * @example
     * // Delete one FirmwareUpdate
     * const FirmwareUpdate = await prisma.firmwareUpdate.delete({
     *   where: {
     *     // ... filter to delete one FirmwareUpdate
     *   }
     * })
     * 
     */
    delete<T extends FirmwareUpdateDeleteArgs>(args: SelectSubset<T, FirmwareUpdateDeleteArgs<ExtArgs>>): Prisma__FirmwareUpdateClient<$Result.GetResult<Prisma.$FirmwareUpdatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FirmwareUpdate.
     * @param {FirmwareUpdateUpdateArgs} args - Arguments to update one FirmwareUpdate.
     * @example
     * // Update one FirmwareUpdate
     * const firmwareUpdate = await prisma.firmwareUpdate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FirmwareUpdateUpdateArgs>(args: SelectSubset<T, FirmwareUpdateUpdateArgs<ExtArgs>>): Prisma__FirmwareUpdateClient<$Result.GetResult<Prisma.$FirmwareUpdatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FirmwareUpdates.
     * @param {FirmwareUpdateDeleteManyArgs} args - Arguments to filter FirmwareUpdates to delete.
     * @example
     * // Delete a few FirmwareUpdates
     * const { count } = await prisma.firmwareUpdate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FirmwareUpdateDeleteManyArgs>(args?: SelectSubset<T, FirmwareUpdateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FirmwareUpdates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FirmwareUpdateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FirmwareUpdates
     * const firmwareUpdate = await prisma.firmwareUpdate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FirmwareUpdateUpdateManyArgs>(args: SelectSubset<T, FirmwareUpdateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FirmwareUpdate.
     * @param {FirmwareUpdateUpsertArgs} args - Arguments to update or create a FirmwareUpdate.
     * @example
     * // Update or create a FirmwareUpdate
     * const firmwareUpdate = await prisma.firmwareUpdate.upsert({
     *   create: {
     *     // ... data to create a FirmwareUpdate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FirmwareUpdate we want to update
     *   }
     * })
     */
    upsert<T extends FirmwareUpdateUpsertArgs>(args: SelectSubset<T, FirmwareUpdateUpsertArgs<ExtArgs>>): Prisma__FirmwareUpdateClient<$Result.GetResult<Prisma.$FirmwareUpdatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FirmwareUpdates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FirmwareUpdateCountArgs} args - Arguments to filter FirmwareUpdates to count.
     * @example
     * // Count the number of FirmwareUpdates
     * const count = await prisma.firmwareUpdate.count({
     *   where: {
     *     // ... the filter for the FirmwareUpdates we want to count
     *   }
     * })
    **/
    count<T extends FirmwareUpdateCountArgs>(
      args?: Subset<T, FirmwareUpdateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FirmwareUpdateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FirmwareUpdate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FirmwareUpdateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FirmwareUpdateAggregateArgs>(args: Subset<T, FirmwareUpdateAggregateArgs>): Prisma.PrismaPromise<GetFirmwareUpdateAggregateType<T>>

    /**
     * Group by FirmwareUpdate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FirmwareUpdateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FirmwareUpdateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FirmwareUpdateGroupByArgs['orderBy'] }
        : { orderBy?: FirmwareUpdateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FirmwareUpdateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFirmwareUpdateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FirmwareUpdate model
   */
  readonly fields: FirmwareUpdateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FirmwareUpdate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FirmwareUpdateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    device<T extends DeviceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DeviceDefaultArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FirmwareUpdate model
   */ 
  interface FirmwareUpdateFieldRefs {
    readonly id: FieldRef<"FirmwareUpdate", 'String'>
    readonly deviceId: FieldRef<"FirmwareUpdate", 'String'>
    readonly version: FieldRef<"FirmwareUpdate", 'String'>
    readonly fileName: FieldRef<"FirmwareUpdate", 'String'>
    readonly fileSize: FieldRef<"FirmwareUpdate", 'Int'>
    readonly checksum: FieldRef<"FirmwareUpdate", 'String'>
    readonly status: FieldRef<"FirmwareUpdate", 'FirmwareStatus'>
    readonly uploadedAt: FieldRef<"FirmwareUpdate", 'DateTime'>
    readonly deployedAt: FieldRef<"FirmwareUpdate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FirmwareUpdate findUnique
   */
  export type FirmwareUpdateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FirmwareUpdate
     */
    select?: FirmwareUpdateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FirmwareUpdateInclude<ExtArgs> | null
    /**
     * Filter, which FirmwareUpdate to fetch.
     */
    where: FirmwareUpdateWhereUniqueInput
  }

  /**
   * FirmwareUpdate findUniqueOrThrow
   */
  export type FirmwareUpdateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FirmwareUpdate
     */
    select?: FirmwareUpdateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FirmwareUpdateInclude<ExtArgs> | null
    /**
     * Filter, which FirmwareUpdate to fetch.
     */
    where: FirmwareUpdateWhereUniqueInput
  }

  /**
   * FirmwareUpdate findFirst
   */
  export type FirmwareUpdateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FirmwareUpdate
     */
    select?: FirmwareUpdateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FirmwareUpdateInclude<ExtArgs> | null
    /**
     * Filter, which FirmwareUpdate to fetch.
     */
    where?: FirmwareUpdateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FirmwareUpdates to fetch.
     */
    orderBy?: FirmwareUpdateOrderByWithRelationInput | FirmwareUpdateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FirmwareUpdates.
     */
    cursor?: FirmwareUpdateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FirmwareUpdates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FirmwareUpdates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FirmwareUpdates.
     */
    distinct?: FirmwareUpdateScalarFieldEnum | FirmwareUpdateScalarFieldEnum[]
  }

  /**
   * FirmwareUpdate findFirstOrThrow
   */
  export type FirmwareUpdateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FirmwareUpdate
     */
    select?: FirmwareUpdateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FirmwareUpdateInclude<ExtArgs> | null
    /**
     * Filter, which FirmwareUpdate to fetch.
     */
    where?: FirmwareUpdateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FirmwareUpdates to fetch.
     */
    orderBy?: FirmwareUpdateOrderByWithRelationInput | FirmwareUpdateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FirmwareUpdates.
     */
    cursor?: FirmwareUpdateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FirmwareUpdates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FirmwareUpdates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FirmwareUpdates.
     */
    distinct?: FirmwareUpdateScalarFieldEnum | FirmwareUpdateScalarFieldEnum[]
  }

  /**
   * FirmwareUpdate findMany
   */
  export type FirmwareUpdateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FirmwareUpdate
     */
    select?: FirmwareUpdateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FirmwareUpdateInclude<ExtArgs> | null
    /**
     * Filter, which FirmwareUpdates to fetch.
     */
    where?: FirmwareUpdateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FirmwareUpdates to fetch.
     */
    orderBy?: FirmwareUpdateOrderByWithRelationInput | FirmwareUpdateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FirmwareUpdates.
     */
    cursor?: FirmwareUpdateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FirmwareUpdates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FirmwareUpdates.
     */
    skip?: number
    distinct?: FirmwareUpdateScalarFieldEnum | FirmwareUpdateScalarFieldEnum[]
  }

  /**
   * FirmwareUpdate create
   */
  export type FirmwareUpdateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FirmwareUpdate
     */
    select?: FirmwareUpdateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FirmwareUpdateInclude<ExtArgs> | null
    /**
     * The data needed to create a FirmwareUpdate.
     */
    data: XOR<FirmwareUpdateCreateInput, FirmwareUpdateUncheckedCreateInput>
  }

  /**
   * FirmwareUpdate createMany
   */
  export type FirmwareUpdateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FirmwareUpdates.
     */
    data: FirmwareUpdateCreateManyInput | FirmwareUpdateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FirmwareUpdate createManyAndReturn
   */
  export type FirmwareUpdateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FirmwareUpdate
     */
    select?: FirmwareUpdateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FirmwareUpdates.
     */
    data: FirmwareUpdateCreateManyInput | FirmwareUpdateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FirmwareUpdateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FirmwareUpdate update
   */
  export type FirmwareUpdateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FirmwareUpdate
     */
    select?: FirmwareUpdateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FirmwareUpdateInclude<ExtArgs> | null
    /**
     * The data needed to update a FirmwareUpdate.
     */
    data: XOR<FirmwareUpdateUpdateInput, FirmwareUpdateUncheckedUpdateInput>
    /**
     * Choose, which FirmwareUpdate to update.
     */
    where: FirmwareUpdateWhereUniqueInput
  }

  /**
   * FirmwareUpdate updateMany
   */
  export type FirmwareUpdateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FirmwareUpdates.
     */
    data: XOR<FirmwareUpdateUpdateManyMutationInput, FirmwareUpdateUncheckedUpdateManyInput>
    /**
     * Filter which FirmwareUpdates to update
     */
    where?: FirmwareUpdateWhereInput
  }

  /**
   * FirmwareUpdate upsert
   */
  export type FirmwareUpdateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FirmwareUpdate
     */
    select?: FirmwareUpdateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FirmwareUpdateInclude<ExtArgs> | null
    /**
     * The filter to search for the FirmwareUpdate to update in case it exists.
     */
    where: FirmwareUpdateWhereUniqueInput
    /**
     * In case the FirmwareUpdate found by the `where` argument doesn't exist, create a new FirmwareUpdate with this data.
     */
    create: XOR<FirmwareUpdateCreateInput, FirmwareUpdateUncheckedCreateInput>
    /**
     * In case the FirmwareUpdate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FirmwareUpdateUpdateInput, FirmwareUpdateUncheckedUpdateInput>
  }

  /**
   * FirmwareUpdate delete
   */
  export type FirmwareUpdateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FirmwareUpdate
     */
    select?: FirmwareUpdateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FirmwareUpdateInclude<ExtArgs> | null
    /**
     * Filter which FirmwareUpdate to delete.
     */
    where: FirmwareUpdateWhereUniqueInput
  }

  /**
   * FirmwareUpdate deleteMany
   */
  export type FirmwareUpdateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FirmwareUpdates to delete
     */
    where?: FirmwareUpdateWhereInput
  }

  /**
   * FirmwareUpdate without action
   */
  export type FirmwareUpdateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FirmwareUpdate
     */
    select?: FirmwareUpdateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FirmwareUpdateInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    resource: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    resource: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    resource: number
    details: number
    ipAddress: number
    userAgent: number
    timestamp: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string
    action: string
    resource: string
    details: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: string
      resource: string
      details: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      timestamp: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly resource: FieldRef<"AuditLog", 'String'>
    readonly details: FieldRef<"AuditLog", 'Json'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model DeviceLog
   */

  export type AggregateDeviceLog = {
    _count: DeviceLogCountAggregateOutputType | null
    _min: DeviceLogMinAggregateOutputType | null
    _max: DeviceLogMaxAggregateOutputType | null
  }

  export type DeviceLogMinAggregateOutputType = {
    id: string | null
    deviceId: string | null
    level: $Enums.LogLevel | null
    message: string | null
    source: string | null
    timestamp: Date | null
  }

  export type DeviceLogMaxAggregateOutputType = {
    id: string | null
    deviceId: string | null
    level: $Enums.LogLevel | null
    message: string | null
    source: string | null
    timestamp: Date | null
  }

  export type DeviceLogCountAggregateOutputType = {
    id: number
    deviceId: number
    level: number
    message: number
    source: number
    timestamp: number
    _all: number
  }


  export type DeviceLogMinAggregateInputType = {
    id?: true
    deviceId?: true
    level?: true
    message?: true
    source?: true
    timestamp?: true
  }

  export type DeviceLogMaxAggregateInputType = {
    id?: true
    deviceId?: true
    level?: true
    message?: true
    source?: true
    timestamp?: true
  }

  export type DeviceLogCountAggregateInputType = {
    id?: true
    deviceId?: true
    level?: true
    message?: true
    source?: true
    timestamp?: true
    _all?: true
  }

  export type DeviceLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceLog to aggregate.
     */
    where?: DeviceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceLogs to fetch.
     */
    orderBy?: DeviceLogOrderByWithRelationInput | DeviceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeviceLogs
    **/
    _count?: true | DeviceLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceLogMaxAggregateInputType
  }

  export type GetDeviceLogAggregateType<T extends DeviceLogAggregateArgs> = {
        [P in keyof T & keyof AggregateDeviceLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeviceLog[P]>
      : GetScalarType<T[P], AggregateDeviceLog[P]>
  }




  export type DeviceLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceLogWhereInput
    orderBy?: DeviceLogOrderByWithAggregationInput | DeviceLogOrderByWithAggregationInput[]
    by: DeviceLogScalarFieldEnum[] | DeviceLogScalarFieldEnum
    having?: DeviceLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceLogCountAggregateInputType | true
    _min?: DeviceLogMinAggregateInputType
    _max?: DeviceLogMaxAggregateInputType
  }

  export type DeviceLogGroupByOutputType = {
    id: string
    deviceId: string
    level: $Enums.LogLevel
    message: string
    source: string | null
    timestamp: Date
    _count: DeviceLogCountAggregateOutputType | null
    _min: DeviceLogMinAggregateOutputType | null
    _max: DeviceLogMaxAggregateOutputType | null
  }

  type GetDeviceLogGroupByPayload<T extends DeviceLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeviceLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceLogGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceLogGroupByOutputType[P]>
        }
      >
    >


  export type DeviceLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deviceId?: boolean
    level?: boolean
    message?: boolean
    source?: boolean
    timestamp?: boolean
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deviceLog"]>

  export type DeviceLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deviceId?: boolean
    level?: boolean
    message?: boolean
    source?: boolean
    timestamp?: boolean
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deviceLog"]>

  export type DeviceLogSelectScalar = {
    id?: boolean
    deviceId?: boolean
    level?: boolean
    message?: boolean
    source?: boolean
    timestamp?: boolean
  }

  export type DeviceLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }
  export type DeviceLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    device?: boolean | DeviceDefaultArgs<ExtArgs>
  }

  export type $DeviceLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DeviceLog"
    objects: {
      device: Prisma.$DevicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      deviceId: string
      level: $Enums.LogLevel
      message: string
      source: string | null
      timestamp: Date
    }, ExtArgs["result"]["deviceLog"]>
    composites: {}
  }

  type DeviceLogGetPayload<S extends boolean | null | undefined | DeviceLogDefaultArgs> = $Result.GetResult<Prisma.$DeviceLogPayload, S>

  type DeviceLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DeviceLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DeviceLogCountAggregateInputType | true
    }

  export interface DeviceLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeviceLog'], meta: { name: 'DeviceLog' } }
    /**
     * Find zero or one DeviceLog that matches the filter.
     * @param {DeviceLogFindUniqueArgs} args - Arguments to find a DeviceLog
     * @example
     * // Get one DeviceLog
     * const deviceLog = await prisma.deviceLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeviceLogFindUniqueArgs>(args: SelectSubset<T, DeviceLogFindUniqueArgs<ExtArgs>>): Prisma__DeviceLogClient<$Result.GetResult<Prisma.$DeviceLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DeviceLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DeviceLogFindUniqueOrThrowArgs} args - Arguments to find a DeviceLog
     * @example
     * // Get one DeviceLog
     * const deviceLog = await prisma.deviceLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeviceLogFindUniqueOrThrowArgs>(args: SelectSubset<T, DeviceLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeviceLogClient<$Result.GetResult<Prisma.$DeviceLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DeviceLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceLogFindFirstArgs} args - Arguments to find a DeviceLog
     * @example
     * // Get one DeviceLog
     * const deviceLog = await prisma.deviceLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeviceLogFindFirstArgs>(args?: SelectSubset<T, DeviceLogFindFirstArgs<ExtArgs>>): Prisma__DeviceLogClient<$Result.GetResult<Prisma.$DeviceLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DeviceLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceLogFindFirstOrThrowArgs} args - Arguments to find a DeviceLog
     * @example
     * // Get one DeviceLog
     * const deviceLog = await prisma.deviceLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeviceLogFindFirstOrThrowArgs>(args?: SelectSubset<T, DeviceLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeviceLogClient<$Result.GetResult<Prisma.$DeviceLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DeviceLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeviceLogs
     * const deviceLogs = await prisma.deviceLog.findMany()
     * 
     * // Get first 10 DeviceLogs
     * const deviceLogs = await prisma.deviceLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deviceLogWithIdOnly = await prisma.deviceLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DeviceLogFindManyArgs>(args?: SelectSubset<T, DeviceLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DeviceLog.
     * @param {DeviceLogCreateArgs} args - Arguments to create a DeviceLog.
     * @example
     * // Create one DeviceLog
     * const DeviceLog = await prisma.deviceLog.create({
     *   data: {
     *     // ... data to create a DeviceLog
     *   }
     * })
     * 
     */
    create<T extends DeviceLogCreateArgs>(args: SelectSubset<T, DeviceLogCreateArgs<ExtArgs>>): Prisma__DeviceLogClient<$Result.GetResult<Prisma.$DeviceLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DeviceLogs.
     * @param {DeviceLogCreateManyArgs} args - Arguments to create many DeviceLogs.
     * @example
     * // Create many DeviceLogs
     * const deviceLog = await prisma.deviceLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeviceLogCreateManyArgs>(args?: SelectSubset<T, DeviceLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DeviceLogs and returns the data saved in the database.
     * @param {DeviceLogCreateManyAndReturnArgs} args - Arguments to create many DeviceLogs.
     * @example
     * // Create many DeviceLogs
     * const deviceLog = await prisma.deviceLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DeviceLogs and only return the `id`
     * const deviceLogWithIdOnly = await prisma.deviceLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeviceLogCreateManyAndReturnArgs>(args?: SelectSubset<T, DeviceLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DeviceLog.
     * @param {DeviceLogDeleteArgs} args - Arguments to delete one DeviceLog.
     * @example
     * // Delete one DeviceLog
     * const DeviceLog = await prisma.deviceLog.delete({
     *   where: {
     *     // ... filter to delete one DeviceLog
     *   }
     * })
     * 
     */
    delete<T extends DeviceLogDeleteArgs>(args: SelectSubset<T, DeviceLogDeleteArgs<ExtArgs>>): Prisma__DeviceLogClient<$Result.GetResult<Prisma.$DeviceLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DeviceLog.
     * @param {DeviceLogUpdateArgs} args - Arguments to update one DeviceLog.
     * @example
     * // Update one DeviceLog
     * const deviceLog = await prisma.deviceLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeviceLogUpdateArgs>(args: SelectSubset<T, DeviceLogUpdateArgs<ExtArgs>>): Prisma__DeviceLogClient<$Result.GetResult<Prisma.$DeviceLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DeviceLogs.
     * @param {DeviceLogDeleteManyArgs} args - Arguments to filter DeviceLogs to delete.
     * @example
     * // Delete a few DeviceLogs
     * const { count } = await prisma.deviceLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeviceLogDeleteManyArgs>(args?: SelectSubset<T, DeviceLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeviceLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeviceLogs
     * const deviceLog = await prisma.deviceLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeviceLogUpdateManyArgs>(args: SelectSubset<T, DeviceLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DeviceLog.
     * @param {DeviceLogUpsertArgs} args - Arguments to update or create a DeviceLog.
     * @example
     * // Update or create a DeviceLog
     * const deviceLog = await prisma.deviceLog.upsert({
     *   create: {
     *     // ... data to create a DeviceLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeviceLog we want to update
     *   }
     * })
     */
    upsert<T extends DeviceLogUpsertArgs>(args: SelectSubset<T, DeviceLogUpsertArgs<ExtArgs>>): Prisma__DeviceLogClient<$Result.GetResult<Prisma.$DeviceLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DeviceLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceLogCountArgs} args - Arguments to filter DeviceLogs to count.
     * @example
     * // Count the number of DeviceLogs
     * const count = await prisma.deviceLog.count({
     *   where: {
     *     // ... the filter for the DeviceLogs we want to count
     *   }
     * })
    **/
    count<T extends DeviceLogCountArgs>(
      args?: Subset<T, DeviceLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeviceLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceLogAggregateArgs>(args: Subset<T, DeviceLogAggregateArgs>): Prisma.PrismaPromise<GetDeviceLogAggregateType<T>>

    /**
     * Group by DeviceLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceLogGroupByArgs['orderBy'] }
        : { orderBy?: DeviceLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DeviceLog model
   */
  readonly fields: DeviceLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DeviceLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeviceLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    device<T extends DeviceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DeviceDefaultArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DeviceLog model
   */ 
  interface DeviceLogFieldRefs {
    readonly id: FieldRef<"DeviceLog", 'String'>
    readonly deviceId: FieldRef<"DeviceLog", 'String'>
    readonly level: FieldRef<"DeviceLog", 'LogLevel'>
    readonly message: FieldRef<"DeviceLog", 'String'>
    readonly source: FieldRef<"DeviceLog", 'String'>
    readonly timestamp: FieldRef<"DeviceLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DeviceLog findUnique
   */
  export type DeviceLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceLog
     */
    select?: DeviceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceLogInclude<ExtArgs> | null
    /**
     * Filter, which DeviceLog to fetch.
     */
    where: DeviceLogWhereUniqueInput
  }

  /**
   * DeviceLog findUniqueOrThrow
   */
  export type DeviceLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceLog
     */
    select?: DeviceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceLogInclude<ExtArgs> | null
    /**
     * Filter, which DeviceLog to fetch.
     */
    where: DeviceLogWhereUniqueInput
  }

  /**
   * DeviceLog findFirst
   */
  export type DeviceLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceLog
     */
    select?: DeviceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceLogInclude<ExtArgs> | null
    /**
     * Filter, which DeviceLog to fetch.
     */
    where?: DeviceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceLogs to fetch.
     */
    orderBy?: DeviceLogOrderByWithRelationInput | DeviceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceLogs.
     */
    cursor?: DeviceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceLogs.
     */
    distinct?: DeviceLogScalarFieldEnum | DeviceLogScalarFieldEnum[]
  }

  /**
   * DeviceLog findFirstOrThrow
   */
  export type DeviceLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceLog
     */
    select?: DeviceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceLogInclude<ExtArgs> | null
    /**
     * Filter, which DeviceLog to fetch.
     */
    where?: DeviceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceLogs to fetch.
     */
    orderBy?: DeviceLogOrderByWithRelationInput | DeviceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceLogs.
     */
    cursor?: DeviceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceLogs.
     */
    distinct?: DeviceLogScalarFieldEnum | DeviceLogScalarFieldEnum[]
  }

  /**
   * DeviceLog findMany
   */
  export type DeviceLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceLog
     */
    select?: DeviceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceLogInclude<ExtArgs> | null
    /**
     * Filter, which DeviceLogs to fetch.
     */
    where?: DeviceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceLogs to fetch.
     */
    orderBy?: DeviceLogOrderByWithRelationInput | DeviceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeviceLogs.
     */
    cursor?: DeviceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceLogs.
     */
    skip?: number
    distinct?: DeviceLogScalarFieldEnum | DeviceLogScalarFieldEnum[]
  }

  /**
   * DeviceLog create
   */
  export type DeviceLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceLog
     */
    select?: DeviceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceLogInclude<ExtArgs> | null
    /**
     * The data needed to create a DeviceLog.
     */
    data: XOR<DeviceLogCreateInput, DeviceLogUncheckedCreateInput>
  }

  /**
   * DeviceLog createMany
   */
  export type DeviceLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DeviceLogs.
     */
    data: DeviceLogCreateManyInput | DeviceLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeviceLog createManyAndReturn
   */
  export type DeviceLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceLog
     */
    select?: DeviceLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DeviceLogs.
     */
    data: DeviceLogCreateManyInput | DeviceLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DeviceLog update
   */
  export type DeviceLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceLog
     */
    select?: DeviceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceLogInclude<ExtArgs> | null
    /**
     * The data needed to update a DeviceLog.
     */
    data: XOR<DeviceLogUpdateInput, DeviceLogUncheckedUpdateInput>
    /**
     * Choose, which DeviceLog to update.
     */
    where: DeviceLogWhereUniqueInput
  }

  /**
   * DeviceLog updateMany
   */
  export type DeviceLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DeviceLogs.
     */
    data: XOR<DeviceLogUpdateManyMutationInput, DeviceLogUncheckedUpdateManyInput>
    /**
     * Filter which DeviceLogs to update
     */
    where?: DeviceLogWhereInput
  }

  /**
   * DeviceLog upsert
   */
  export type DeviceLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceLog
     */
    select?: DeviceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceLogInclude<ExtArgs> | null
    /**
     * The filter to search for the DeviceLog to update in case it exists.
     */
    where: DeviceLogWhereUniqueInput
    /**
     * In case the DeviceLog found by the `where` argument doesn't exist, create a new DeviceLog with this data.
     */
    create: XOR<DeviceLogCreateInput, DeviceLogUncheckedCreateInput>
    /**
     * In case the DeviceLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceLogUpdateInput, DeviceLogUncheckedUpdateInput>
  }

  /**
   * DeviceLog delete
   */
  export type DeviceLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceLog
     */
    select?: DeviceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceLogInclude<ExtArgs> | null
    /**
     * Filter which DeviceLog to delete.
     */
    where: DeviceLogWhereUniqueInput
  }

  /**
   * DeviceLog deleteMany
   */
  export type DeviceLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceLogs to delete
     */
    where?: DeviceLogWhereInput
  }

  /**
   * DeviceLog without action
   */
  export type DeviceLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceLog
     */
    select?: DeviceLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const DeviceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    ipAddress: 'ipAddress',
    macAddress: 'macAddress',
    manufacturer: 'manufacturer',
    model: 'model',
    firmwareVersion: 'firmwareVersion',
    osVersion: 'osVersion',
    status: 'status',
    lastSeen: 'lastSeen',
    registeredAt: 'registeredAt',
    updatedAt: 'updatedAt',
    securityScore: 'securityScore',
    riskLevel: 'riskLevel',
    ownerId: 'ownerId'
  };

  export type DeviceScalarFieldEnum = (typeof DeviceScalarFieldEnum)[keyof typeof DeviceScalarFieldEnum]


  export const DeviceTelemetryScalarFieldEnum: {
    id: 'id',
    deviceId: 'deviceId',
    timestamp: 'timestamp',
    cpuUsage: 'cpuUsage',
    memoryUsage: 'memoryUsage',
    diskUsage: 'diskUsage',
    temperature: 'temperature',
    networkIn: 'networkIn',
    networkOut: 'networkOut',
    customData: 'customData'
  };

  export type DeviceTelemetryScalarFieldEnum = (typeof DeviceTelemetryScalarFieldEnum)[keyof typeof DeviceTelemetryScalarFieldEnum]


  export const VulnerabilityReportScalarFieldEnum: {
    id: 'id',
    deviceId: 'deviceId',
    scanType: 'scanType',
    status: 'status',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    criticalCount: 'criticalCount',
    highCount: 'highCount',
    mediumCount: 'mediumCount',
    lowCount: 'lowCount',
    findings: 'findings'
  };

  export type VulnerabilityReportScalarFieldEnum = (typeof VulnerabilityReportScalarFieldEnum)[keyof typeof VulnerabilityReportScalarFieldEnum]


  export const AlertScalarFieldEnum: {
    id: 'id',
    deviceId: 'deviceId',
    userId: 'userId',
    type: 'type',
    severity: 'severity',
    title: 'title',
    description: 'description',
    status: 'status',
    createdAt: 'createdAt',
    resolvedAt: 'resolvedAt',
    metadata: 'metadata'
  };

  export type AlertScalarFieldEnum = (typeof AlertScalarFieldEnum)[keyof typeof AlertScalarFieldEnum]


  export const FirmwareUpdateScalarFieldEnum: {
    id: 'id',
    deviceId: 'deviceId',
    version: 'version',
    fileName: 'fileName',
    fileSize: 'fileSize',
    checksum: 'checksum',
    status: 'status',
    uploadedAt: 'uploadedAt',
    deployedAt: 'deployedAt'
  };

  export type FirmwareUpdateScalarFieldEnum = (typeof FirmwareUpdateScalarFieldEnum)[keyof typeof FirmwareUpdateScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    resource: 'resource',
    details: 'details',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    timestamp: 'timestamp'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const DeviceLogScalarFieldEnum: {
    id: 'id',
    deviceId: 'deviceId',
    level: 'level',
    message: 'message',
    source: 'source',
    timestamp: 'timestamp'
  };

  export type DeviceLogScalarFieldEnum = (typeof DeviceLogScalarFieldEnum)[keyof typeof DeviceLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'DeviceType'
   */
  export type EnumDeviceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeviceType'>
    


  /**
   * Reference to a field of type 'DeviceType[]'
   */
  export type ListEnumDeviceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeviceType[]'>
    


  /**
   * Reference to a field of type 'DeviceStatus'
   */
  export type EnumDeviceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeviceStatus'>
    


  /**
   * Reference to a field of type 'DeviceStatus[]'
   */
  export type ListEnumDeviceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeviceStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'RiskLevel'
   */
  export type EnumRiskLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskLevel'>
    


  /**
   * Reference to a field of type 'RiskLevel[]'
   */
  export type ListEnumRiskLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskLevel[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'ScanType'
   */
  export type EnumScanTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScanType'>
    


  /**
   * Reference to a field of type 'ScanType[]'
   */
  export type ListEnumScanTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScanType[]'>
    


  /**
   * Reference to a field of type 'ScanStatus'
   */
  export type EnumScanStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScanStatus'>
    


  /**
   * Reference to a field of type 'ScanStatus[]'
   */
  export type ListEnumScanStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScanStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'AlertType'
   */
  export type EnumAlertTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertType'>
    


  /**
   * Reference to a field of type 'AlertType[]'
   */
  export type ListEnumAlertTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertType[]'>
    


  /**
   * Reference to a field of type 'AlertSeverity'
   */
  export type EnumAlertSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertSeverity'>
    


  /**
   * Reference to a field of type 'AlertSeverity[]'
   */
  export type ListEnumAlertSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertSeverity[]'>
    


  /**
   * Reference to a field of type 'AlertStatus'
   */
  export type EnumAlertStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertStatus'>
    


  /**
   * Reference to a field of type 'AlertStatus[]'
   */
  export type ListEnumAlertStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertStatus[]'>
    


  /**
   * Reference to a field of type 'FirmwareStatus'
   */
  export type EnumFirmwareStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FirmwareStatus'>
    


  /**
   * Reference to a field of type 'FirmwareStatus[]'
   */
  export type ListEnumFirmwareStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FirmwareStatus[]'>
    


  /**
   * Reference to a field of type 'LogLevel'
   */
  export type EnumLogLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogLevel'>
    


  /**
   * Reference to a field of type 'LogLevel[]'
   */
  export type ListEnumLogLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogLevel[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    devices?: DeviceListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    alerts?: AlertListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    devices?: DeviceOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    alerts?: AlertOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    devices?: DeviceListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    alerts?: AlertListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type DeviceWhereInput = {
    AND?: DeviceWhereInput | DeviceWhereInput[]
    OR?: DeviceWhereInput[]
    NOT?: DeviceWhereInput | DeviceWhereInput[]
    id?: StringFilter<"Device"> | string
    name?: StringFilter<"Device"> | string
    type?: EnumDeviceTypeFilter<"Device"> | $Enums.DeviceType
    ipAddress?: StringFilter<"Device"> | string
    macAddress?: StringFilter<"Device"> | string
    manufacturer?: StringNullableFilter<"Device"> | string | null
    model?: StringNullableFilter<"Device"> | string | null
    firmwareVersion?: StringNullableFilter<"Device"> | string | null
    osVersion?: StringNullableFilter<"Device"> | string | null
    status?: EnumDeviceStatusFilter<"Device"> | $Enums.DeviceStatus
    lastSeen?: DateTimeNullableFilter<"Device"> | Date | string | null
    registeredAt?: DateTimeFilter<"Device"> | Date | string
    updatedAt?: DateTimeFilter<"Device"> | Date | string
    securityScore?: FloatNullableFilter<"Device"> | number | null
    riskLevel?: EnumRiskLevelFilter<"Device"> | $Enums.RiskLevel
    ownerId?: StringFilter<"Device"> | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    telemetry?: DeviceTelemetryListRelationFilter
    scans?: VulnerabilityReportListRelationFilter
    alerts?: AlertListRelationFilter
    firmwareUpdates?: FirmwareUpdateListRelationFilter
    logs?: DeviceLogListRelationFilter
  }

  export type DeviceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    ipAddress?: SortOrder
    macAddress?: SortOrder
    manufacturer?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    firmwareVersion?: SortOrderInput | SortOrder
    osVersion?: SortOrderInput | SortOrder
    status?: SortOrder
    lastSeen?: SortOrderInput | SortOrder
    registeredAt?: SortOrder
    updatedAt?: SortOrder
    securityScore?: SortOrderInput | SortOrder
    riskLevel?: SortOrder
    ownerId?: SortOrder
    owner?: UserOrderByWithRelationInput
    telemetry?: DeviceTelemetryOrderByRelationAggregateInput
    scans?: VulnerabilityReportOrderByRelationAggregateInput
    alerts?: AlertOrderByRelationAggregateInput
    firmwareUpdates?: FirmwareUpdateOrderByRelationAggregateInput
    logs?: DeviceLogOrderByRelationAggregateInput
  }

  export type DeviceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    macAddress?: string
    AND?: DeviceWhereInput | DeviceWhereInput[]
    OR?: DeviceWhereInput[]
    NOT?: DeviceWhereInput | DeviceWhereInput[]
    name?: StringFilter<"Device"> | string
    type?: EnumDeviceTypeFilter<"Device"> | $Enums.DeviceType
    ipAddress?: StringFilter<"Device"> | string
    manufacturer?: StringNullableFilter<"Device"> | string | null
    model?: StringNullableFilter<"Device"> | string | null
    firmwareVersion?: StringNullableFilter<"Device"> | string | null
    osVersion?: StringNullableFilter<"Device"> | string | null
    status?: EnumDeviceStatusFilter<"Device"> | $Enums.DeviceStatus
    lastSeen?: DateTimeNullableFilter<"Device"> | Date | string | null
    registeredAt?: DateTimeFilter<"Device"> | Date | string
    updatedAt?: DateTimeFilter<"Device"> | Date | string
    securityScore?: FloatNullableFilter<"Device"> | number | null
    riskLevel?: EnumRiskLevelFilter<"Device"> | $Enums.RiskLevel
    ownerId?: StringFilter<"Device"> | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    telemetry?: DeviceTelemetryListRelationFilter
    scans?: VulnerabilityReportListRelationFilter
    alerts?: AlertListRelationFilter
    firmwareUpdates?: FirmwareUpdateListRelationFilter
    logs?: DeviceLogListRelationFilter
  }, "id" | "macAddress">

  export type DeviceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    ipAddress?: SortOrder
    macAddress?: SortOrder
    manufacturer?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    firmwareVersion?: SortOrderInput | SortOrder
    osVersion?: SortOrderInput | SortOrder
    status?: SortOrder
    lastSeen?: SortOrderInput | SortOrder
    registeredAt?: SortOrder
    updatedAt?: SortOrder
    securityScore?: SortOrderInput | SortOrder
    riskLevel?: SortOrder
    ownerId?: SortOrder
    _count?: DeviceCountOrderByAggregateInput
    _avg?: DeviceAvgOrderByAggregateInput
    _max?: DeviceMaxOrderByAggregateInput
    _min?: DeviceMinOrderByAggregateInput
    _sum?: DeviceSumOrderByAggregateInput
  }

  export type DeviceScalarWhereWithAggregatesInput = {
    AND?: DeviceScalarWhereWithAggregatesInput | DeviceScalarWhereWithAggregatesInput[]
    OR?: DeviceScalarWhereWithAggregatesInput[]
    NOT?: DeviceScalarWhereWithAggregatesInput | DeviceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Device"> | string
    name?: StringWithAggregatesFilter<"Device"> | string
    type?: EnumDeviceTypeWithAggregatesFilter<"Device"> | $Enums.DeviceType
    ipAddress?: StringWithAggregatesFilter<"Device"> | string
    macAddress?: StringWithAggregatesFilter<"Device"> | string
    manufacturer?: StringNullableWithAggregatesFilter<"Device"> | string | null
    model?: StringNullableWithAggregatesFilter<"Device"> | string | null
    firmwareVersion?: StringNullableWithAggregatesFilter<"Device"> | string | null
    osVersion?: StringNullableWithAggregatesFilter<"Device"> | string | null
    status?: EnumDeviceStatusWithAggregatesFilter<"Device"> | $Enums.DeviceStatus
    lastSeen?: DateTimeNullableWithAggregatesFilter<"Device"> | Date | string | null
    registeredAt?: DateTimeWithAggregatesFilter<"Device"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Device"> | Date | string
    securityScore?: FloatNullableWithAggregatesFilter<"Device"> | number | null
    riskLevel?: EnumRiskLevelWithAggregatesFilter<"Device"> | $Enums.RiskLevel
    ownerId?: StringWithAggregatesFilter<"Device"> | string
  }

  export type DeviceTelemetryWhereInput = {
    AND?: DeviceTelemetryWhereInput | DeviceTelemetryWhereInput[]
    OR?: DeviceTelemetryWhereInput[]
    NOT?: DeviceTelemetryWhereInput | DeviceTelemetryWhereInput[]
    id?: StringFilter<"DeviceTelemetry"> | string
    deviceId?: StringFilter<"DeviceTelemetry"> | string
    timestamp?: DateTimeFilter<"DeviceTelemetry"> | Date | string
    cpuUsage?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    memoryUsage?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    diskUsage?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    temperature?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    networkIn?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    networkOut?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    customData?: JsonNullableFilter<"DeviceTelemetry">
    device?: XOR<DeviceRelationFilter, DeviceWhereInput>
  }

  export type DeviceTelemetryOrderByWithRelationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    timestamp?: SortOrder
    cpuUsage?: SortOrderInput | SortOrder
    memoryUsage?: SortOrderInput | SortOrder
    diskUsage?: SortOrderInput | SortOrder
    temperature?: SortOrderInput | SortOrder
    networkIn?: SortOrderInput | SortOrder
    networkOut?: SortOrderInput | SortOrder
    customData?: SortOrderInput | SortOrder
    device?: DeviceOrderByWithRelationInput
  }

  export type DeviceTelemetryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DeviceTelemetryWhereInput | DeviceTelemetryWhereInput[]
    OR?: DeviceTelemetryWhereInput[]
    NOT?: DeviceTelemetryWhereInput | DeviceTelemetryWhereInput[]
    deviceId?: StringFilter<"DeviceTelemetry"> | string
    timestamp?: DateTimeFilter<"DeviceTelemetry"> | Date | string
    cpuUsage?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    memoryUsage?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    diskUsage?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    temperature?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    networkIn?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    networkOut?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    customData?: JsonNullableFilter<"DeviceTelemetry">
    device?: XOR<DeviceRelationFilter, DeviceWhereInput>
  }, "id">

  export type DeviceTelemetryOrderByWithAggregationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    timestamp?: SortOrder
    cpuUsage?: SortOrderInput | SortOrder
    memoryUsage?: SortOrderInput | SortOrder
    diskUsage?: SortOrderInput | SortOrder
    temperature?: SortOrderInput | SortOrder
    networkIn?: SortOrderInput | SortOrder
    networkOut?: SortOrderInput | SortOrder
    customData?: SortOrderInput | SortOrder
    _count?: DeviceTelemetryCountOrderByAggregateInput
    _avg?: DeviceTelemetryAvgOrderByAggregateInput
    _max?: DeviceTelemetryMaxOrderByAggregateInput
    _min?: DeviceTelemetryMinOrderByAggregateInput
    _sum?: DeviceTelemetrySumOrderByAggregateInput
  }

  export type DeviceTelemetryScalarWhereWithAggregatesInput = {
    AND?: DeviceTelemetryScalarWhereWithAggregatesInput | DeviceTelemetryScalarWhereWithAggregatesInput[]
    OR?: DeviceTelemetryScalarWhereWithAggregatesInput[]
    NOT?: DeviceTelemetryScalarWhereWithAggregatesInput | DeviceTelemetryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DeviceTelemetry"> | string
    deviceId?: StringWithAggregatesFilter<"DeviceTelemetry"> | string
    timestamp?: DateTimeWithAggregatesFilter<"DeviceTelemetry"> | Date | string
    cpuUsage?: FloatNullableWithAggregatesFilter<"DeviceTelemetry"> | number | null
    memoryUsage?: FloatNullableWithAggregatesFilter<"DeviceTelemetry"> | number | null
    diskUsage?: FloatNullableWithAggregatesFilter<"DeviceTelemetry"> | number | null
    temperature?: FloatNullableWithAggregatesFilter<"DeviceTelemetry"> | number | null
    networkIn?: FloatNullableWithAggregatesFilter<"DeviceTelemetry"> | number | null
    networkOut?: FloatNullableWithAggregatesFilter<"DeviceTelemetry"> | number | null
    customData?: JsonNullableWithAggregatesFilter<"DeviceTelemetry">
  }

  export type VulnerabilityReportWhereInput = {
    AND?: VulnerabilityReportWhereInput | VulnerabilityReportWhereInput[]
    OR?: VulnerabilityReportWhereInput[]
    NOT?: VulnerabilityReportWhereInput | VulnerabilityReportWhereInput[]
    id?: StringFilter<"VulnerabilityReport"> | string
    deviceId?: StringFilter<"VulnerabilityReport"> | string
    scanType?: EnumScanTypeFilter<"VulnerabilityReport"> | $Enums.ScanType
    status?: EnumScanStatusFilter<"VulnerabilityReport"> | $Enums.ScanStatus
    startedAt?: DateTimeFilter<"VulnerabilityReport"> | Date | string
    completedAt?: DateTimeNullableFilter<"VulnerabilityReport"> | Date | string | null
    criticalCount?: IntFilter<"VulnerabilityReport"> | number
    highCount?: IntFilter<"VulnerabilityReport"> | number
    mediumCount?: IntFilter<"VulnerabilityReport"> | number
    lowCount?: IntFilter<"VulnerabilityReport"> | number
    findings?: JsonNullableFilter<"VulnerabilityReport">
    device?: XOR<DeviceRelationFilter, DeviceWhereInput>
  }

  export type VulnerabilityReportOrderByWithRelationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    scanType?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    criticalCount?: SortOrder
    highCount?: SortOrder
    mediumCount?: SortOrder
    lowCount?: SortOrder
    findings?: SortOrderInput | SortOrder
    device?: DeviceOrderByWithRelationInput
  }

  export type VulnerabilityReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VulnerabilityReportWhereInput | VulnerabilityReportWhereInput[]
    OR?: VulnerabilityReportWhereInput[]
    NOT?: VulnerabilityReportWhereInput | VulnerabilityReportWhereInput[]
    deviceId?: StringFilter<"VulnerabilityReport"> | string
    scanType?: EnumScanTypeFilter<"VulnerabilityReport"> | $Enums.ScanType
    status?: EnumScanStatusFilter<"VulnerabilityReport"> | $Enums.ScanStatus
    startedAt?: DateTimeFilter<"VulnerabilityReport"> | Date | string
    completedAt?: DateTimeNullableFilter<"VulnerabilityReport"> | Date | string | null
    criticalCount?: IntFilter<"VulnerabilityReport"> | number
    highCount?: IntFilter<"VulnerabilityReport"> | number
    mediumCount?: IntFilter<"VulnerabilityReport"> | number
    lowCount?: IntFilter<"VulnerabilityReport"> | number
    findings?: JsonNullableFilter<"VulnerabilityReport">
    device?: XOR<DeviceRelationFilter, DeviceWhereInput>
  }, "id">

  export type VulnerabilityReportOrderByWithAggregationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    scanType?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    criticalCount?: SortOrder
    highCount?: SortOrder
    mediumCount?: SortOrder
    lowCount?: SortOrder
    findings?: SortOrderInput | SortOrder
    _count?: VulnerabilityReportCountOrderByAggregateInput
    _avg?: VulnerabilityReportAvgOrderByAggregateInput
    _max?: VulnerabilityReportMaxOrderByAggregateInput
    _min?: VulnerabilityReportMinOrderByAggregateInput
    _sum?: VulnerabilityReportSumOrderByAggregateInput
  }

  export type VulnerabilityReportScalarWhereWithAggregatesInput = {
    AND?: VulnerabilityReportScalarWhereWithAggregatesInput | VulnerabilityReportScalarWhereWithAggregatesInput[]
    OR?: VulnerabilityReportScalarWhereWithAggregatesInput[]
    NOT?: VulnerabilityReportScalarWhereWithAggregatesInput | VulnerabilityReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VulnerabilityReport"> | string
    deviceId?: StringWithAggregatesFilter<"VulnerabilityReport"> | string
    scanType?: EnumScanTypeWithAggregatesFilter<"VulnerabilityReport"> | $Enums.ScanType
    status?: EnumScanStatusWithAggregatesFilter<"VulnerabilityReport"> | $Enums.ScanStatus
    startedAt?: DateTimeWithAggregatesFilter<"VulnerabilityReport"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"VulnerabilityReport"> | Date | string | null
    criticalCount?: IntWithAggregatesFilter<"VulnerabilityReport"> | number
    highCount?: IntWithAggregatesFilter<"VulnerabilityReport"> | number
    mediumCount?: IntWithAggregatesFilter<"VulnerabilityReport"> | number
    lowCount?: IntWithAggregatesFilter<"VulnerabilityReport"> | number
    findings?: JsonNullableWithAggregatesFilter<"VulnerabilityReport">
  }

  export type AlertWhereInput = {
    AND?: AlertWhereInput | AlertWhereInput[]
    OR?: AlertWhereInput[]
    NOT?: AlertWhereInput | AlertWhereInput[]
    id?: StringFilter<"Alert"> | string
    deviceId?: StringNullableFilter<"Alert"> | string | null
    userId?: StringNullableFilter<"Alert"> | string | null
    type?: EnumAlertTypeFilter<"Alert"> | $Enums.AlertType
    severity?: EnumAlertSeverityFilter<"Alert"> | $Enums.AlertSeverity
    title?: StringFilter<"Alert"> | string
    description?: StringFilter<"Alert"> | string
    status?: EnumAlertStatusFilter<"Alert"> | $Enums.AlertStatus
    createdAt?: DateTimeFilter<"Alert"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Alert"> | Date | string | null
    metadata?: JsonNullableFilter<"Alert">
    device?: XOR<DeviceNullableRelationFilter, DeviceWhereInput> | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AlertOrderByWithRelationInput = {
    id?: SortOrder
    deviceId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    device?: DeviceOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type AlertWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AlertWhereInput | AlertWhereInput[]
    OR?: AlertWhereInput[]
    NOT?: AlertWhereInput | AlertWhereInput[]
    deviceId?: StringNullableFilter<"Alert"> | string | null
    userId?: StringNullableFilter<"Alert"> | string | null
    type?: EnumAlertTypeFilter<"Alert"> | $Enums.AlertType
    severity?: EnumAlertSeverityFilter<"Alert"> | $Enums.AlertSeverity
    title?: StringFilter<"Alert"> | string
    description?: StringFilter<"Alert"> | string
    status?: EnumAlertStatusFilter<"Alert"> | $Enums.AlertStatus
    createdAt?: DateTimeFilter<"Alert"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Alert"> | Date | string | null
    metadata?: JsonNullableFilter<"Alert">
    device?: XOR<DeviceNullableRelationFilter, DeviceWhereInput> | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AlertOrderByWithAggregationInput = {
    id?: SortOrder
    deviceId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    _count?: AlertCountOrderByAggregateInput
    _max?: AlertMaxOrderByAggregateInput
    _min?: AlertMinOrderByAggregateInput
  }

  export type AlertScalarWhereWithAggregatesInput = {
    AND?: AlertScalarWhereWithAggregatesInput | AlertScalarWhereWithAggregatesInput[]
    OR?: AlertScalarWhereWithAggregatesInput[]
    NOT?: AlertScalarWhereWithAggregatesInput | AlertScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Alert"> | string
    deviceId?: StringNullableWithAggregatesFilter<"Alert"> | string | null
    userId?: StringNullableWithAggregatesFilter<"Alert"> | string | null
    type?: EnumAlertTypeWithAggregatesFilter<"Alert"> | $Enums.AlertType
    severity?: EnumAlertSeverityWithAggregatesFilter<"Alert"> | $Enums.AlertSeverity
    title?: StringWithAggregatesFilter<"Alert"> | string
    description?: StringWithAggregatesFilter<"Alert"> | string
    status?: EnumAlertStatusWithAggregatesFilter<"Alert"> | $Enums.AlertStatus
    createdAt?: DateTimeWithAggregatesFilter<"Alert"> | Date | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"Alert"> | Date | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Alert">
  }

  export type FirmwareUpdateWhereInput = {
    AND?: FirmwareUpdateWhereInput | FirmwareUpdateWhereInput[]
    OR?: FirmwareUpdateWhereInput[]
    NOT?: FirmwareUpdateWhereInput | FirmwareUpdateWhereInput[]
    id?: StringFilter<"FirmwareUpdate"> | string
    deviceId?: StringFilter<"FirmwareUpdate"> | string
    version?: StringFilter<"FirmwareUpdate"> | string
    fileName?: StringFilter<"FirmwareUpdate"> | string
    fileSize?: IntFilter<"FirmwareUpdate"> | number
    checksum?: StringFilter<"FirmwareUpdate"> | string
    status?: EnumFirmwareStatusFilter<"FirmwareUpdate"> | $Enums.FirmwareStatus
    uploadedAt?: DateTimeFilter<"FirmwareUpdate"> | Date | string
    deployedAt?: DateTimeNullableFilter<"FirmwareUpdate"> | Date | string | null
    device?: XOR<DeviceRelationFilter, DeviceWhereInput>
  }

  export type FirmwareUpdateOrderByWithRelationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    version?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    checksum?: SortOrder
    status?: SortOrder
    uploadedAt?: SortOrder
    deployedAt?: SortOrderInput | SortOrder
    device?: DeviceOrderByWithRelationInput
  }

  export type FirmwareUpdateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FirmwareUpdateWhereInput | FirmwareUpdateWhereInput[]
    OR?: FirmwareUpdateWhereInput[]
    NOT?: FirmwareUpdateWhereInput | FirmwareUpdateWhereInput[]
    deviceId?: StringFilter<"FirmwareUpdate"> | string
    version?: StringFilter<"FirmwareUpdate"> | string
    fileName?: StringFilter<"FirmwareUpdate"> | string
    fileSize?: IntFilter<"FirmwareUpdate"> | number
    checksum?: StringFilter<"FirmwareUpdate"> | string
    status?: EnumFirmwareStatusFilter<"FirmwareUpdate"> | $Enums.FirmwareStatus
    uploadedAt?: DateTimeFilter<"FirmwareUpdate"> | Date | string
    deployedAt?: DateTimeNullableFilter<"FirmwareUpdate"> | Date | string | null
    device?: XOR<DeviceRelationFilter, DeviceWhereInput>
  }, "id">

  export type FirmwareUpdateOrderByWithAggregationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    version?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    checksum?: SortOrder
    status?: SortOrder
    uploadedAt?: SortOrder
    deployedAt?: SortOrderInput | SortOrder
    _count?: FirmwareUpdateCountOrderByAggregateInput
    _avg?: FirmwareUpdateAvgOrderByAggregateInput
    _max?: FirmwareUpdateMaxOrderByAggregateInput
    _min?: FirmwareUpdateMinOrderByAggregateInput
    _sum?: FirmwareUpdateSumOrderByAggregateInput
  }

  export type FirmwareUpdateScalarWhereWithAggregatesInput = {
    AND?: FirmwareUpdateScalarWhereWithAggregatesInput | FirmwareUpdateScalarWhereWithAggregatesInput[]
    OR?: FirmwareUpdateScalarWhereWithAggregatesInput[]
    NOT?: FirmwareUpdateScalarWhereWithAggregatesInput | FirmwareUpdateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FirmwareUpdate"> | string
    deviceId?: StringWithAggregatesFilter<"FirmwareUpdate"> | string
    version?: StringWithAggregatesFilter<"FirmwareUpdate"> | string
    fileName?: StringWithAggregatesFilter<"FirmwareUpdate"> | string
    fileSize?: IntWithAggregatesFilter<"FirmwareUpdate"> | number
    checksum?: StringWithAggregatesFilter<"FirmwareUpdate"> | string
    status?: EnumFirmwareStatusWithAggregatesFilter<"FirmwareUpdate"> | $Enums.FirmwareStatus
    uploadedAt?: DateTimeWithAggregatesFilter<"FirmwareUpdate"> | Date | string
    deployedAt?: DateTimeNullableWithAggregatesFilter<"FirmwareUpdate"> | Date | string | null
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    details?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    details?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    resource?: StringWithAggregatesFilter<"AuditLog"> | string
    details?: JsonNullableWithAggregatesFilter<"AuditLog">
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type DeviceLogWhereInput = {
    AND?: DeviceLogWhereInput | DeviceLogWhereInput[]
    OR?: DeviceLogWhereInput[]
    NOT?: DeviceLogWhereInput | DeviceLogWhereInput[]
    id?: StringFilter<"DeviceLog"> | string
    deviceId?: StringFilter<"DeviceLog"> | string
    level?: EnumLogLevelFilter<"DeviceLog"> | $Enums.LogLevel
    message?: StringFilter<"DeviceLog"> | string
    source?: StringNullableFilter<"DeviceLog"> | string | null
    timestamp?: DateTimeFilter<"DeviceLog"> | Date | string
    device?: XOR<DeviceRelationFilter, DeviceWhereInput>
  }

  export type DeviceLogOrderByWithRelationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    source?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    device?: DeviceOrderByWithRelationInput
  }

  export type DeviceLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DeviceLogWhereInput | DeviceLogWhereInput[]
    OR?: DeviceLogWhereInput[]
    NOT?: DeviceLogWhereInput | DeviceLogWhereInput[]
    deviceId?: StringFilter<"DeviceLog"> | string
    level?: EnumLogLevelFilter<"DeviceLog"> | $Enums.LogLevel
    message?: StringFilter<"DeviceLog"> | string
    source?: StringNullableFilter<"DeviceLog"> | string | null
    timestamp?: DateTimeFilter<"DeviceLog"> | Date | string
    device?: XOR<DeviceRelationFilter, DeviceWhereInput>
  }, "id">

  export type DeviceLogOrderByWithAggregationInput = {
    id?: SortOrder
    deviceId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    source?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: DeviceLogCountOrderByAggregateInput
    _max?: DeviceLogMaxOrderByAggregateInput
    _min?: DeviceLogMinOrderByAggregateInput
  }

  export type DeviceLogScalarWhereWithAggregatesInput = {
    AND?: DeviceLogScalarWhereWithAggregatesInput | DeviceLogScalarWhereWithAggregatesInput[]
    OR?: DeviceLogScalarWhereWithAggregatesInput[]
    NOT?: DeviceLogScalarWhereWithAggregatesInput | DeviceLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DeviceLog"> | string
    deviceId?: StringWithAggregatesFilter<"DeviceLog"> | string
    level?: EnumLogLevelWithAggregatesFilter<"DeviceLog"> | $Enums.LogLevel
    message?: StringWithAggregatesFilter<"DeviceLog"> | string
    source?: StringNullableWithAggregatesFilter<"DeviceLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"DeviceLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    devices?: DeviceCreateNestedManyWithoutOwnerInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    devices?: DeviceUncheckedCreateNestedManyWithoutOwnerInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    devices?: DeviceUpdateManyWithoutOwnerNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    devices?: DeviceUncheckedUpdateManyWithoutOwnerNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceCreateInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    owner: UserCreateNestedOneWithoutDevicesInput
    telemetry?: DeviceTelemetryCreateNestedManyWithoutDeviceInput
    scans?: VulnerabilityReportCreateNestedManyWithoutDeviceInput
    alerts?: AlertCreateNestedManyWithoutDeviceInput
    firmwareUpdates?: FirmwareUpdateCreateNestedManyWithoutDeviceInput
    logs?: DeviceLogCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    ownerId: string
    telemetry?: DeviceTelemetryUncheckedCreateNestedManyWithoutDeviceInput
    scans?: VulnerabilityReportUncheckedCreateNestedManyWithoutDeviceInput
    alerts?: AlertUncheckedCreateNestedManyWithoutDeviceInput
    firmwareUpdates?: FirmwareUpdateUncheckedCreateNestedManyWithoutDeviceInput
    logs?: DeviceLogUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    owner?: UserUpdateOneRequiredWithoutDevicesNestedInput
    telemetry?: DeviceTelemetryUpdateManyWithoutDeviceNestedInput
    scans?: VulnerabilityReportUpdateManyWithoutDeviceNestedInput
    alerts?: AlertUpdateManyWithoutDeviceNestedInput
    firmwareUpdates?: FirmwareUpdateUpdateManyWithoutDeviceNestedInput
    logs?: DeviceLogUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    ownerId?: StringFieldUpdateOperationsInput | string
    telemetry?: DeviceTelemetryUncheckedUpdateManyWithoutDeviceNestedInput
    scans?: VulnerabilityReportUncheckedUpdateManyWithoutDeviceNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutDeviceNestedInput
    firmwareUpdates?: FirmwareUpdateUncheckedUpdateManyWithoutDeviceNestedInput
    logs?: DeviceLogUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceCreateManyInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    ownerId: string
  }

  export type DeviceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
  }

  export type DeviceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    ownerId?: StringFieldUpdateOperationsInput | string
  }

  export type DeviceTelemetryCreateInput = {
    id?: string
    timestamp?: Date | string
    cpuUsage?: number | null
    memoryUsage?: number | null
    diskUsage?: number | null
    temperature?: number | null
    networkIn?: number | null
    networkOut?: number | null
    customData?: NullableJsonNullValueInput | InputJsonValue
    device: DeviceCreateNestedOneWithoutTelemetryInput
  }

  export type DeviceTelemetryUncheckedCreateInput = {
    id?: string
    deviceId: string
    timestamp?: Date | string
    cpuUsage?: number | null
    memoryUsage?: number | null
    diskUsage?: number | null
    temperature?: number | null
    networkIn?: number | null
    networkOut?: number | null
    customData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DeviceTelemetryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    cpuUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    memoryUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    diskUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    networkIn?: NullableFloatFieldUpdateOperationsInput | number | null
    networkOut?: NullableFloatFieldUpdateOperationsInput | number | null
    customData?: NullableJsonNullValueInput | InputJsonValue
    device?: DeviceUpdateOneRequiredWithoutTelemetryNestedInput
  }

  export type DeviceTelemetryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    cpuUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    memoryUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    diskUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    networkIn?: NullableFloatFieldUpdateOperationsInput | number | null
    networkOut?: NullableFloatFieldUpdateOperationsInput | number | null
    customData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DeviceTelemetryCreateManyInput = {
    id?: string
    deviceId: string
    timestamp?: Date | string
    cpuUsage?: number | null
    memoryUsage?: number | null
    diskUsage?: number | null
    temperature?: number | null
    networkIn?: number | null
    networkOut?: number | null
    customData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DeviceTelemetryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    cpuUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    memoryUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    diskUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    networkIn?: NullableFloatFieldUpdateOperationsInput | number | null
    networkOut?: NullableFloatFieldUpdateOperationsInput | number | null
    customData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DeviceTelemetryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    cpuUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    memoryUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    diskUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    networkIn?: NullableFloatFieldUpdateOperationsInput | number | null
    networkOut?: NullableFloatFieldUpdateOperationsInput | number | null
    customData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type VulnerabilityReportCreateInput = {
    id?: string
    scanType: $Enums.ScanType
    status?: $Enums.ScanStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    criticalCount?: number
    highCount?: number
    mediumCount?: number
    lowCount?: number
    findings?: NullableJsonNullValueInput | InputJsonValue
    device: DeviceCreateNestedOneWithoutScansInput
  }

  export type VulnerabilityReportUncheckedCreateInput = {
    id?: string
    deviceId: string
    scanType: $Enums.ScanType
    status?: $Enums.ScanStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    criticalCount?: number
    highCount?: number
    mediumCount?: number
    lowCount?: number
    findings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type VulnerabilityReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scanType?: EnumScanTypeFieldUpdateOperationsInput | $Enums.ScanType
    status?: EnumScanStatusFieldUpdateOperationsInput | $Enums.ScanStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    criticalCount?: IntFieldUpdateOperationsInput | number
    highCount?: IntFieldUpdateOperationsInput | number
    mediumCount?: IntFieldUpdateOperationsInput | number
    lowCount?: IntFieldUpdateOperationsInput | number
    findings?: NullableJsonNullValueInput | InputJsonValue
    device?: DeviceUpdateOneRequiredWithoutScansNestedInput
  }

  export type VulnerabilityReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    scanType?: EnumScanTypeFieldUpdateOperationsInput | $Enums.ScanType
    status?: EnumScanStatusFieldUpdateOperationsInput | $Enums.ScanStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    criticalCount?: IntFieldUpdateOperationsInput | number
    highCount?: IntFieldUpdateOperationsInput | number
    mediumCount?: IntFieldUpdateOperationsInput | number
    lowCount?: IntFieldUpdateOperationsInput | number
    findings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type VulnerabilityReportCreateManyInput = {
    id?: string
    deviceId: string
    scanType: $Enums.ScanType
    status?: $Enums.ScanStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    criticalCount?: number
    highCount?: number
    mediumCount?: number
    lowCount?: number
    findings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type VulnerabilityReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scanType?: EnumScanTypeFieldUpdateOperationsInput | $Enums.ScanType
    status?: EnumScanStatusFieldUpdateOperationsInput | $Enums.ScanStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    criticalCount?: IntFieldUpdateOperationsInput | number
    highCount?: IntFieldUpdateOperationsInput | number
    mediumCount?: IntFieldUpdateOperationsInput | number
    lowCount?: IntFieldUpdateOperationsInput | number
    findings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type VulnerabilityReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    scanType?: EnumScanTypeFieldUpdateOperationsInput | $Enums.ScanType
    status?: EnumScanStatusFieldUpdateOperationsInput | $Enums.ScanStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    criticalCount?: IntFieldUpdateOperationsInput | number
    highCount?: IntFieldUpdateOperationsInput | number
    mediumCount?: IntFieldUpdateOperationsInput | number
    lowCount?: IntFieldUpdateOperationsInput | number
    findings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AlertCreateInput = {
    id?: string
    type: $Enums.AlertType
    severity: $Enums.AlertSeverity
    title: string
    description: string
    status?: $Enums.AlertStatus
    createdAt?: Date | string
    resolvedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    device?: DeviceCreateNestedOneWithoutAlertsInput
    user?: UserCreateNestedOneWithoutAlertsInput
  }

  export type AlertUncheckedCreateInput = {
    id?: string
    deviceId?: string | null
    userId?: string | null
    type: $Enums.AlertType
    severity: $Enums.AlertSeverity
    title: string
    description: string
    status?: $Enums.AlertStatus
    createdAt?: Date | string
    resolvedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AlertUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    device?: DeviceUpdateOneWithoutAlertsNestedInput
    user?: UserUpdateOneWithoutAlertsNestedInput
  }

  export type AlertUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AlertCreateManyInput = {
    id?: string
    deviceId?: string | null
    userId?: string | null
    type: $Enums.AlertType
    severity: $Enums.AlertSeverity
    title: string
    description: string
    status?: $Enums.AlertStatus
    createdAt?: Date | string
    resolvedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AlertUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AlertUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FirmwareUpdateCreateInput = {
    id?: string
    version: string
    fileName: string
    fileSize: number
    checksum: string
    status?: $Enums.FirmwareStatus
    uploadedAt?: Date | string
    deployedAt?: Date | string | null
    device: DeviceCreateNestedOneWithoutFirmwareUpdatesInput
  }

  export type FirmwareUpdateUncheckedCreateInput = {
    id?: string
    deviceId: string
    version: string
    fileName: string
    fileSize: number
    checksum: string
    status?: $Enums.FirmwareStatus
    uploadedAt?: Date | string
    deployedAt?: Date | string | null
  }

  export type FirmwareUpdateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    checksum?: StringFieldUpdateOperationsInput | string
    status?: EnumFirmwareStatusFieldUpdateOperationsInput | $Enums.FirmwareStatus
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deployedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    device?: DeviceUpdateOneRequiredWithoutFirmwareUpdatesNestedInput
  }

  export type FirmwareUpdateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    checksum?: StringFieldUpdateOperationsInput | string
    status?: EnumFirmwareStatusFieldUpdateOperationsInput | $Enums.FirmwareStatus
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deployedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FirmwareUpdateCreateManyInput = {
    id?: string
    deviceId: string
    version: string
    fileName: string
    fileSize: number
    checksum: string
    status?: $Enums.FirmwareStatus
    uploadedAt?: Date | string
    deployedAt?: Date | string | null
  }

  export type FirmwareUpdateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    checksum?: StringFieldUpdateOperationsInput | string
    status?: EnumFirmwareStatusFieldUpdateOperationsInput | $Enums.FirmwareStatus
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deployedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FirmwareUpdateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    checksum?: StringFieldUpdateOperationsInput | string
    status?: EnumFirmwareStatusFieldUpdateOperationsInput | $Enums.FirmwareStatus
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deployedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    resource: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId: string
    action: string
    resource: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId: string
    action: string
    resource: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceLogCreateInput = {
    id?: string
    level: $Enums.LogLevel
    message: string
    source?: string | null
    timestamp?: Date | string
    device: DeviceCreateNestedOneWithoutLogsInput
  }

  export type DeviceLogUncheckedCreateInput = {
    id?: string
    deviceId: string
    level: $Enums.LogLevel
    message: string
    source?: string | null
    timestamp?: Date | string
  }

  export type DeviceLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    device?: DeviceUpdateOneRequiredWithoutLogsNestedInput
  }

  export type DeviceLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceLogCreateManyInput = {
    id?: string
    deviceId: string
    level: $Enums.LogLevel
    message: string
    source?: string | null
    timestamp?: Date | string
  }

  export type DeviceLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DeviceListRelationFilter = {
    every?: DeviceWhereInput
    some?: DeviceWhereInput
    none?: DeviceWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type AlertListRelationFilter = {
    every?: AlertWhereInput
    some?: AlertWhereInput
    none?: AlertWhereInput
  }

  export type DeviceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlertOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumDeviceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDeviceTypeFilter<$PrismaModel> | $Enums.DeviceType
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumDeviceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceStatus | EnumDeviceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DeviceStatus[] | ListEnumDeviceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeviceStatus[] | ListEnumDeviceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDeviceStatusFilter<$PrismaModel> | $Enums.DeviceStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EnumRiskLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelFilter<$PrismaModel> | $Enums.RiskLevel
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DeviceTelemetryListRelationFilter = {
    every?: DeviceTelemetryWhereInput
    some?: DeviceTelemetryWhereInput
    none?: DeviceTelemetryWhereInput
  }

  export type VulnerabilityReportListRelationFilter = {
    every?: VulnerabilityReportWhereInput
    some?: VulnerabilityReportWhereInput
    none?: VulnerabilityReportWhereInput
  }

  export type FirmwareUpdateListRelationFilter = {
    every?: FirmwareUpdateWhereInput
    some?: FirmwareUpdateWhereInput
    none?: FirmwareUpdateWhereInput
  }

  export type DeviceLogListRelationFilter = {
    every?: DeviceLogWhereInput
    some?: DeviceLogWhereInput
    none?: DeviceLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DeviceTelemetryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VulnerabilityReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FirmwareUpdateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DeviceLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DeviceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    ipAddress?: SortOrder
    macAddress?: SortOrder
    manufacturer?: SortOrder
    model?: SortOrder
    firmwareVersion?: SortOrder
    osVersion?: SortOrder
    status?: SortOrder
    lastSeen?: SortOrder
    registeredAt?: SortOrder
    updatedAt?: SortOrder
    securityScore?: SortOrder
    riskLevel?: SortOrder
    ownerId?: SortOrder
  }

  export type DeviceAvgOrderByAggregateInput = {
    securityScore?: SortOrder
  }

  export type DeviceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    ipAddress?: SortOrder
    macAddress?: SortOrder
    manufacturer?: SortOrder
    model?: SortOrder
    firmwareVersion?: SortOrder
    osVersion?: SortOrder
    status?: SortOrder
    lastSeen?: SortOrder
    registeredAt?: SortOrder
    updatedAt?: SortOrder
    securityScore?: SortOrder
    riskLevel?: SortOrder
    ownerId?: SortOrder
  }

  export type DeviceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    ipAddress?: SortOrder
    macAddress?: SortOrder
    manufacturer?: SortOrder
    model?: SortOrder
    firmwareVersion?: SortOrder
    osVersion?: SortOrder
    status?: SortOrder
    lastSeen?: SortOrder
    registeredAt?: SortOrder
    updatedAt?: SortOrder
    securityScore?: SortOrder
    riskLevel?: SortOrder
    ownerId?: SortOrder
  }

  export type DeviceSumOrderByAggregateInput = {
    securityScore?: SortOrder
  }

  export type EnumDeviceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDeviceTypeWithAggregatesFilter<$PrismaModel> | $Enums.DeviceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDeviceTypeFilter<$PrismaModel>
    _max?: NestedEnumDeviceTypeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumDeviceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceStatus | EnumDeviceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DeviceStatus[] | ListEnumDeviceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeviceStatus[] | ListEnumDeviceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDeviceStatusWithAggregatesFilter<$PrismaModel> | $Enums.DeviceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDeviceStatusFilter<$PrismaModel>
    _max?: NestedEnumDeviceStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumRiskLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DeviceRelationFilter = {
    is?: DeviceWhereInput
    isNot?: DeviceWhereInput
  }

  export type DeviceTelemetryCountOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    timestamp?: SortOrder
    cpuUsage?: SortOrder
    memoryUsage?: SortOrder
    diskUsage?: SortOrder
    temperature?: SortOrder
    networkIn?: SortOrder
    networkOut?: SortOrder
    customData?: SortOrder
  }

  export type DeviceTelemetryAvgOrderByAggregateInput = {
    cpuUsage?: SortOrder
    memoryUsage?: SortOrder
    diskUsage?: SortOrder
    temperature?: SortOrder
    networkIn?: SortOrder
    networkOut?: SortOrder
  }

  export type DeviceTelemetryMaxOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    timestamp?: SortOrder
    cpuUsage?: SortOrder
    memoryUsage?: SortOrder
    diskUsage?: SortOrder
    temperature?: SortOrder
    networkIn?: SortOrder
    networkOut?: SortOrder
  }

  export type DeviceTelemetryMinOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    timestamp?: SortOrder
    cpuUsage?: SortOrder
    memoryUsage?: SortOrder
    diskUsage?: SortOrder
    temperature?: SortOrder
    networkIn?: SortOrder
    networkOut?: SortOrder
  }

  export type DeviceTelemetrySumOrderByAggregateInput = {
    cpuUsage?: SortOrder
    memoryUsage?: SortOrder
    diskUsage?: SortOrder
    temperature?: SortOrder
    networkIn?: SortOrder
    networkOut?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumScanTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ScanType | EnumScanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ScanType[] | ListEnumScanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScanType[] | ListEnumScanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumScanTypeFilter<$PrismaModel> | $Enums.ScanType
  }

  export type EnumScanStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ScanStatus | EnumScanStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ScanStatus[] | ListEnumScanStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScanStatus[] | ListEnumScanStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumScanStatusFilter<$PrismaModel> | $Enums.ScanStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type VulnerabilityReportCountOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    scanType?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    criticalCount?: SortOrder
    highCount?: SortOrder
    mediumCount?: SortOrder
    lowCount?: SortOrder
    findings?: SortOrder
  }

  export type VulnerabilityReportAvgOrderByAggregateInput = {
    criticalCount?: SortOrder
    highCount?: SortOrder
    mediumCount?: SortOrder
    lowCount?: SortOrder
  }

  export type VulnerabilityReportMaxOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    scanType?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    criticalCount?: SortOrder
    highCount?: SortOrder
    mediumCount?: SortOrder
    lowCount?: SortOrder
  }

  export type VulnerabilityReportMinOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    scanType?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    criticalCount?: SortOrder
    highCount?: SortOrder
    mediumCount?: SortOrder
    lowCount?: SortOrder
  }

  export type VulnerabilityReportSumOrderByAggregateInput = {
    criticalCount?: SortOrder
    highCount?: SortOrder
    mediumCount?: SortOrder
    lowCount?: SortOrder
  }

  export type EnumScanTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScanType | EnumScanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ScanType[] | ListEnumScanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScanType[] | ListEnumScanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumScanTypeWithAggregatesFilter<$PrismaModel> | $Enums.ScanType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScanTypeFilter<$PrismaModel>
    _max?: NestedEnumScanTypeFilter<$PrismaModel>
  }

  export type EnumScanStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScanStatus | EnumScanStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ScanStatus[] | ListEnumScanStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScanStatus[] | ListEnumScanStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumScanStatusWithAggregatesFilter<$PrismaModel> | $Enums.ScanStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScanStatusFilter<$PrismaModel>
    _max?: NestedEnumScanStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumAlertTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertType | EnumAlertTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertTypeFilter<$PrismaModel> | $Enums.AlertType
  }

  export type EnumAlertSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertSeverityFilter<$PrismaModel> | $Enums.AlertSeverity
  }

  export type EnumAlertStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertStatus | EnumAlertStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertStatusFilter<$PrismaModel> | $Enums.AlertStatus
  }

  export type DeviceNullableRelationFilter = {
    is?: DeviceWhereInput | null
    isNot?: DeviceWhereInput | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AlertCountOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrder
    metadata?: SortOrder
  }

  export type AlertMaxOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type AlertMinOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type EnumAlertTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertType | EnumAlertTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertTypeWithAggregatesFilter<$PrismaModel> | $Enums.AlertType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertTypeFilter<$PrismaModel>
    _max?: NestedEnumAlertTypeFilter<$PrismaModel>
  }

  export type EnumAlertSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertSeverityWithAggregatesFilter<$PrismaModel> | $Enums.AlertSeverity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertSeverityFilter<$PrismaModel>
    _max?: NestedEnumAlertSeverityFilter<$PrismaModel>
  }

  export type EnumAlertStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertStatus | EnumAlertStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertStatusWithAggregatesFilter<$PrismaModel> | $Enums.AlertStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertStatusFilter<$PrismaModel>
    _max?: NestedEnumAlertStatusFilter<$PrismaModel>
  }

  export type EnumFirmwareStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FirmwareStatus | EnumFirmwareStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FirmwareStatus[] | ListEnumFirmwareStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FirmwareStatus[] | ListEnumFirmwareStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFirmwareStatusFilter<$PrismaModel> | $Enums.FirmwareStatus
  }

  export type FirmwareUpdateCountOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    version?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    checksum?: SortOrder
    status?: SortOrder
    uploadedAt?: SortOrder
    deployedAt?: SortOrder
  }

  export type FirmwareUpdateAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type FirmwareUpdateMaxOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    version?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    checksum?: SortOrder
    status?: SortOrder
    uploadedAt?: SortOrder
    deployedAt?: SortOrder
  }

  export type FirmwareUpdateMinOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    version?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    checksum?: SortOrder
    status?: SortOrder
    uploadedAt?: SortOrder
    deployedAt?: SortOrder
  }

  export type FirmwareUpdateSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type EnumFirmwareStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FirmwareStatus | EnumFirmwareStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FirmwareStatus[] | ListEnumFirmwareStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FirmwareStatus[] | ListEnumFirmwareStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFirmwareStatusWithAggregatesFilter<$PrismaModel> | $Enums.FirmwareStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFirmwareStatusFilter<$PrismaModel>
    _max?: NestedEnumFirmwareStatusFilter<$PrismaModel>
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
  }

  export type EnumLogLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLogLevelFilter<$PrismaModel> | $Enums.LogLevel
  }

  export type DeviceLogCountOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    source?: SortOrder
    timestamp?: SortOrder
  }

  export type DeviceLogMaxOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    source?: SortOrder
    timestamp?: SortOrder
  }

  export type DeviceLogMinOrderByAggregateInput = {
    id?: SortOrder
    deviceId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    source?: SortOrder
    timestamp?: SortOrder
  }

  export type EnumLogLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLogLevelWithAggregatesFilter<$PrismaModel> | $Enums.LogLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogLevelFilter<$PrismaModel>
    _max?: NestedEnumLogLevelFilter<$PrismaModel>
  }

  export type DeviceCreateNestedManyWithoutOwnerInput = {
    create?: XOR<DeviceCreateWithoutOwnerInput, DeviceUncheckedCreateWithoutOwnerInput> | DeviceCreateWithoutOwnerInput[] | DeviceUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: DeviceCreateOrConnectWithoutOwnerInput | DeviceCreateOrConnectWithoutOwnerInput[]
    createMany?: DeviceCreateManyOwnerInputEnvelope
    connect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type AlertCreateNestedManyWithoutUserInput = {
    create?: XOR<AlertCreateWithoutUserInput, AlertUncheckedCreateWithoutUserInput> | AlertCreateWithoutUserInput[] | AlertUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutUserInput | AlertCreateOrConnectWithoutUserInput[]
    createMany?: AlertCreateManyUserInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type DeviceUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<DeviceCreateWithoutOwnerInput, DeviceUncheckedCreateWithoutOwnerInput> | DeviceCreateWithoutOwnerInput[] | DeviceUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: DeviceCreateOrConnectWithoutOwnerInput | DeviceCreateOrConnectWithoutOwnerInput[]
    createMany?: DeviceCreateManyOwnerInputEnvelope
    connect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type AlertUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AlertCreateWithoutUserInput, AlertUncheckedCreateWithoutUserInput> | AlertCreateWithoutUserInput[] | AlertUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutUserInput | AlertCreateOrConnectWithoutUserInput[]
    createMany?: AlertCreateManyUserInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DeviceUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<DeviceCreateWithoutOwnerInput, DeviceUncheckedCreateWithoutOwnerInput> | DeviceCreateWithoutOwnerInput[] | DeviceUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: DeviceCreateOrConnectWithoutOwnerInput | DeviceCreateOrConnectWithoutOwnerInput[]
    upsert?: DeviceUpsertWithWhereUniqueWithoutOwnerInput | DeviceUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: DeviceCreateManyOwnerInputEnvelope
    set?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    disconnect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    delete?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    connect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    update?: DeviceUpdateWithWhereUniqueWithoutOwnerInput | DeviceUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: DeviceUpdateManyWithWhereWithoutOwnerInput | DeviceUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: DeviceScalarWhereInput | DeviceScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type AlertUpdateManyWithoutUserNestedInput = {
    create?: XOR<AlertCreateWithoutUserInput, AlertUncheckedCreateWithoutUserInput> | AlertCreateWithoutUserInput[] | AlertUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutUserInput | AlertCreateOrConnectWithoutUserInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutUserInput | AlertUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AlertCreateManyUserInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutUserInput | AlertUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutUserInput | AlertUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type DeviceUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<DeviceCreateWithoutOwnerInput, DeviceUncheckedCreateWithoutOwnerInput> | DeviceCreateWithoutOwnerInput[] | DeviceUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: DeviceCreateOrConnectWithoutOwnerInput | DeviceCreateOrConnectWithoutOwnerInput[]
    upsert?: DeviceUpsertWithWhereUniqueWithoutOwnerInput | DeviceUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: DeviceCreateManyOwnerInputEnvelope
    set?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    disconnect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    delete?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    connect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    update?: DeviceUpdateWithWhereUniqueWithoutOwnerInput | DeviceUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: DeviceUpdateManyWithWhereWithoutOwnerInput | DeviceUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: DeviceScalarWhereInput | DeviceScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type AlertUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AlertCreateWithoutUserInput, AlertUncheckedCreateWithoutUserInput> | AlertCreateWithoutUserInput[] | AlertUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutUserInput | AlertCreateOrConnectWithoutUserInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutUserInput | AlertUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AlertCreateManyUserInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutUserInput | AlertUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutUserInput | AlertUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDevicesInput = {
    create?: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDevicesInput
    connect?: UserWhereUniqueInput
  }

  export type DeviceTelemetryCreateNestedManyWithoutDeviceInput = {
    create?: XOR<DeviceTelemetryCreateWithoutDeviceInput, DeviceTelemetryUncheckedCreateWithoutDeviceInput> | DeviceTelemetryCreateWithoutDeviceInput[] | DeviceTelemetryUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: DeviceTelemetryCreateOrConnectWithoutDeviceInput | DeviceTelemetryCreateOrConnectWithoutDeviceInput[]
    createMany?: DeviceTelemetryCreateManyDeviceInputEnvelope
    connect?: DeviceTelemetryWhereUniqueInput | DeviceTelemetryWhereUniqueInput[]
  }

  export type VulnerabilityReportCreateNestedManyWithoutDeviceInput = {
    create?: XOR<VulnerabilityReportCreateWithoutDeviceInput, VulnerabilityReportUncheckedCreateWithoutDeviceInput> | VulnerabilityReportCreateWithoutDeviceInput[] | VulnerabilityReportUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: VulnerabilityReportCreateOrConnectWithoutDeviceInput | VulnerabilityReportCreateOrConnectWithoutDeviceInput[]
    createMany?: VulnerabilityReportCreateManyDeviceInputEnvelope
    connect?: VulnerabilityReportWhereUniqueInput | VulnerabilityReportWhereUniqueInput[]
  }

  export type AlertCreateNestedManyWithoutDeviceInput = {
    create?: XOR<AlertCreateWithoutDeviceInput, AlertUncheckedCreateWithoutDeviceInput> | AlertCreateWithoutDeviceInput[] | AlertUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutDeviceInput | AlertCreateOrConnectWithoutDeviceInput[]
    createMany?: AlertCreateManyDeviceInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type FirmwareUpdateCreateNestedManyWithoutDeviceInput = {
    create?: XOR<FirmwareUpdateCreateWithoutDeviceInput, FirmwareUpdateUncheckedCreateWithoutDeviceInput> | FirmwareUpdateCreateWithoutDeviceInput[] | FirmwareUpdateUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FirmwareUpdateCreateOrConnectWithoutDeviceInput | FirmwareUpdateCreateOrConnectWithoutDeviceInput[]
    createMany?: FirmwareUpdateCreateManyDeviceInputEnvelope
    connect?: FirmwareUpdateWhereUniqueInput | FirmwareUpdateWhereUniqueInput[]
  }

  export type DeviceLogCreateNestedManyWithoutDeviceInput = {
    create?: XOR<DeviceLogCreateWithoutDeviceInput, DeviceLogUncheckedCreateWithoutDeviceInput> | DeviceLogCreateWithoutDeviceInput[] | DeviceLogUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: DeviceLogCreateOrConnectWithoutDeviceInput | DeviceLogCreateOrConnectWithoutDeviceInput[]
    createMany?: DeviceLogCreateManyDeviceInputEnvelope
    connect?: DeviceLogWhereUniqueInput | DeviceLogWhereUniqueInput[]
  }

  export type DeviceTelemetryUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<DeviceTelemetryCreateWithoutDeviceInput, DeviceTelemetryUncheckedCreateWithoutDeviceInput> | DeviceTelemetryCreateWithoutDeviceInput[] | DeviceTelemetryUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: DeviceTelemetryCreateOrConnectWithoutDeviceInput | DeviceTelemetryCreateOrConnectWithoutDeviceInput[]
    createMany?: DeviceTelemetryCreateManyDeviceInputEnvelope
    connect?: DeviceTelemetryWhereUniqueInput | DeviceTelemetryWhereUniqueInput[]
  }

  export type VulnerabilityReportUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<VulnerabilityReportCreateWithoutDeviceInput, VulnerabilityReportUncheckedCreateWithoutDeviceInput> | VulnerabilityReportCreateWithoutDeviceInput[] | VulnerabilityReportUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: VulnerabilityReportCreateOrConnectWithoutDeviceInput | VulnerabilityReportCreateOrConnectWithoutDeviceInput[]
    createMany?: VulnerabilityReportCreateManyDeviceInputEnvelope
    connect?: VulnerabilityReportWhereUniqueInput | VulnerabilityReportWhereUniqueInput[]
  }

  export type AlertUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<AlertCreateWithoutDeviceInput, AlertUncheckedCreateWithoutDeviceInput> | AlertCreateWithoutDeviceInput[] | AlertUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutDeviceInput | AlertCreateOrConnectWithoutDeviceInput[]
    createMany?: AlertCreateManyDeviceInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type FirmwareUpdateUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<FirmwareUpdateCreateWithoutDeviceInput, FirmwareUpdateUncheckedCreateWithoutDeviceInput> | FirmwareUpdateCreateWithoutDeviceInput[] | FirmwareUpdateUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FirmwareUpdateCreateOrConnectWithoutDeviceInput | FirmwareUpdateCreateOrConnectWithoutDeviceInput[]
    createMany?: FirmwareUpdateCreateManyDeviceInputEnvelope
    connect?: FirmwareUpdateWhereUniqueInput | FirmwareUpdateWhereUniqueInput[]
  }

  export type DeviceLogUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<DeviceLogCreateWithoutDeviceInput, DeviceLogUncheckedCreateWithoutDeviceInput> | DeviceLogCreateWithoutDeviceInput[] | DeviceLogUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: DeviceLogCreateOrConnectWithoutDeviceInput | DeviceLogCreateOrConnectWithoutDeviceInput[]
    createMany?: DeviceLogCreateManyDeviceInputEnvelope
    connect?: DeviceLogWhereUniqueInput | DeviceLogWhereUniqueInput[]
  }

  export type EnumDeviceTypeFieldUpdateOperationsInput = {
    set?: $Enums.DeviceType
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumDeviceStatusFieldUpdateOperationsInput = {
    set?: $Enums.DeviceStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumRiskLevelFieldUpdateOperationsInput = {
    set?: $Enums.RiskLevel
  }

  export type UserUpdateOneRequiredWithoutDevicesNestedInput = {
    create?: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDevicesInput
    upsert?: UserUpsertWithoutDevicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDevicesInput, UserUpdateWithoutDevicesInput>, UserUncheckedUpdateWithoutDevicesInput>
  }

  export type DeviceTelemetryUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<DeviceTelemetryCreateWithoutDeviceInput, DeviceTelemetryUncheckedCreateWithoutDeviceInput> | DeviceTelemetryCreateWithoutDeviceInput[] | DeviceTelemetryUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: DeviceTelemetryCreateOrConnectWithoutDeviceInput | DeviceTelemetryCreateOrConnectWithoutDeviceInput[]
    upsert?: DeviceTelemetryUpsertWithWhereUniqueWithoutDeviceInput | DeviceTelemetryUpsertWithWhereUniqueWithoutDeviceInput[]
    createMany?: DeviceTelemetryCreateManyDeviceInputEnvelope
    set?: DeviceTelemetryWhereUniqueInput | DeviceTelemetryWhereUniqueInput[]
    disconnect?: DeviceTelemetryWhereUniqueInput | DeviceTelemetryWhereUniqueInput[]
    delete?: DeviceTelemetryWhereUniqueInput | DeviceTelemetryWhereUniqueInput[]
    connect?: DeviceTelemetryWhereUniqueInput | DeviceTelemetryWhereUniqueInput[]
    update?: DeviceTelemetryUpdateWithWhereUniqueWithoutDeviceInput | DeviceTelemetryUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: DeviceTelemetryUpdateManyWithWhereWithoutDeviceInput | DeviceTelemetryUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: DeviceTelemetryScalarWhereInput | DeviceTelemetryScalarWhereInput[]
  }

  export type VulnerabilityReportUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<VulnerabilityReportCreateWithoutDeviceInput, VulnerabilityReportUncheckedCreateWithoutDeviceInput> | VulnerabilityReportCreateWithoutDeviceInput[] | VulnerabilityReportUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: VulnerabilityReportCreateOrConnectWithoutDeviceInput | VulnerabilityReportCreateOrConnectWithoutDeviceInput[]
    upsert?: VulnerabilityReportUpsertWithWhereUniqueWithoutDeviceInput | VulnerabilityReportUpsertWithWhereUniqueWithoutDeviceInput[]
    createMany?: VulnerabilityReportCreateManyDeviceInputEnvelope
    set?: VulnerabilityReportWhereUniqueInput | VulnerabilityReportWhereUniqueInput[]
    disconnect?: VulnerabilityReportWhereUniqueInput | VulnerabilityReportWhereUniqueInput[]
    delete?: VulnerabilityReportWhereUniqueInput | VulnerabilityReportWhereUniqueInput[]
    connect?: VulnerabilityReportWhereUniqueInput | VulnerabilityReportWhereUniqueInput[]
    update?: VulnerabilityReportUpdateWithWhereUniqueWithoutDeviceInput | VulnerabilityReportUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: VulnerabilityReportUpdateManyWithWhereWithoutDeviceInput | VulnerabilityReportUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: VulnerabilityReportScalarWhereInput | VulnerabilityReportScalarWhereInput[]
  }

  export type AlertUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<AlertCreateWithoutDeviceInput, AlertUncheckedCreateWithoutDeviceInput> | AlertCreateWithoutDeviceInput[] | AlertUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutDeviceInput | AlertCreateOrConnectWithoutDeviceInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutDeviceInput | AlertUpsertWithWhereUniqueWithoutDeviceInput[]
    createMany?: AlertCreateManyDeviceInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutDeviceInput | AlertUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutDeviceInput | AlertUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type FirmwareUpdateUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<FirmwareUpdateCreateWithoutDeviceInput, FirmwareUpdateUncheckedCreateWithoutDeviceInput> | FirmwareUpdateCreateWithoutDeviceInput[] | FirmwareUpdateUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FirmwareUpdateCreateOrConnectWithoutDeviceInput | FirmwareUpdateCreateOrConnectWithoutDeviceInput[]
    upsert?: FirmwareUpdateUpsertWithWhereUniqueWithoutDeviceInput | FirmwareUpdateUpsertWithWhereUniqueWithoutDeviceInput[]
    createMany?: FirmwareUpdateCreateManyDeviceInputEnvelope
    set?: FirmwareUpdateWhereUniqueInput | FirmwareUpdateWhereUniqueInput[]
    disconnect?: FirmwareUpdateWhereUniqueInput | FirmwareUpdateWhereUniqueInput[]
    delete?: FirmwareUpdateWhereUniqueInput | FirmwareUpdateWhereUniqueInput[]
    connect?: FirmwareUpdateWhereUniqueInput | FirmwareUpdateWhereUniqueInput[]
    update?: FirmwareUpdateUpdateWithWhereUniqueWithoutDeviceInput | FirmwareUpdateUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: FirmwareUpdateUpdateManyWithWhereWithoutDeviceInput | FirmwareUpdateUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: FirmwareUpdateScalarWhereInput | FirmwareUpdateScalarWhereInput[]
  }

  export type DeviceLogUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<DeviceLogCreateWithoutDeviceInput, DeviceLogUncheckedCreateWithoutDeviceInput> | DeviceLogCreateWithoutDeviceInput[] | DeviceLogUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: DeviceLogCreateOrConnectWithoutDeviceInput | DeviceLogCreateOrConnectWithoutDeviceInput[]
    upsert?: DeviceLogUpsertWithWhereUniqueWithoutDeviceInput | DeviceLogUpsertWithWhereUniqueWithoutDeviceInput[]
    createMany?: DeviceLogCreateManyDeviceInputEnvelope
    set?: DeviceLogWhereUniqueInput | DeviceLogWhereUniqueInput[]
    disconnect?: DeviceLogWhereUniqueInput | DeviceLogWhereUniqueInput[]
    delete?: DeviceLogWhereUniqueInput | DeviceLogWhereUniqueInput[]
    connect?: DeviceLogWhereUniqueInput | DeviceLogWhereUniqueInput[]
    update?: DeviceLogUpdateWithWhereUniqueWithoutDeviceInput | DeviceLogUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: DeviceLogUpdateManyWithWhereWithoutDeviceInput | DeviceLogUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: DeviceLogScalarWhereInput | DeviceLogScalarWhereInput[]
  }

  export type DeviceTelemetryUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<DeviceTelemetryCreateWithoutDeviceInput, DeviceTelemetryUncheckedCreateWithoutDeviceInput> | DeviceTelemetryCreateWithoutDeviceInput[] | DeviceTelemetryUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: DeviceTelemetryCreateOrConnectWithoutDeviceInput | DeviceTelemetryCreateOrConnectWithoutDeviceInput[]
    upsert?: DeviceTelemetryUpsertWithWhereUniqueWithoutDeviceInput | DeviceTelemetryUpsertWithWhereUniqueWithoutDeviceInput[]
    createMany?: DeviceTelemetryCreateManyDeviceInputEnvelope
    set?: DeviceTelemetryWhereUniqueInput | DeviceTelemetryWhereUniqueInput[]
    disconnect?: DeviceTelemetryWhereUniqueInput | DeviceTelemetryWhereUniqueInput[]
    delete?: DeviceTelemetryWhereUniqueInput | DeviceTelemetryWhereUniqueInput[]
    connect?: DeviceTelemetryWhereUniqueInput | DeviceTelemetryWhereUniqueInput[]
    update?: DeviceTelemetryUpdateWithWhereUniqueWithoutDeviceInput | DeviceTelemetryUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: DeviceTelemetryUpdateManyWithWhereWithoutDeviceInput | DeviceTelemetryUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: DeviceTelemetryScalarWhereInput | DeviceTelemetryScalarWhereInput[]
  }

  export type VulnerabilityReportUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<VulnerabilityReportCreateWithoutDeviceInput, VulnerabilityReportUncheckedCreateWithoutDeviceInput> | VulnerabilityReportCreateWithoutDeviceInput[] | VulnerabilityReportUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: VulnerabilityReportCreateOrConnectWithoutDeviceInput | VulnerabilityReportCreateOrConnectWithoutDeviceInput[]
    upsert?: VulnerabilityReportUpsertWithWhereUniqueWithoutDeviceInput | VulnerabilityReportUpsertWithWhereUniqueWithoutDeviceInput[]
    createMany?: VulnerabilityReportCreateManyDeviceInputEnvelope
    set?: VulnerabilityReportWhereUniqueInput | VulnerabilityReportWhereUniqueInput[]
    disconnect?: VulnerabilityReportWhereUniqueInput | VulnerabilityReportWhereUniqueInput[]
    delete?: VulnerabilityReportWhereUniqueInput | VulnerabilityReportWhereUniqueInput[]
    connect?: VulnerabilityReportWhereUniqueInput | VulnerabilityReportWhereUniqueInput[]
    update?: VulnerabilityReportUpdateWithWhereUniqueWithoutDeviceInput | VulnerabilityReportUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: VulnerabilityReportUpdateManyWithWhereWithoutDeviceInput | VulnerabilityReportUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: VulnerabilityReportScalarWhereInput | VulnerabilityReportScalarWhereInput[]
  }

  export type AlertUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<AlertCreateWithoutDeviceInput, AlertUncheckedCreateWithoutDeviceInput> | AlertCreateWithoutDeviceInput[] | AlertUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutDeviceInput | AlertCreateOrConnectWithoutDeviceInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutDeviceInput | AlertUpsertWithWhereUniqueWithoutDeviceInput[]
    createMany?: AlertCreateManyDeviceInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutDeviceInput | AlertUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutDeviceInput | AlertUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type FirmwareUpdateUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<FirmwareUpdateCreateWithoutDeviceInput, FirmwareUpdateUncheckedCreateWithoutDeviceInput> | FirmwareUpdateCreateWithoutDeviceInput[] | FirmwareUpdateUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: FirmwareUpdateCreateOrConnectWithoutDeviceInput | FirmwareUpdateCreateOrConnectWithoutDeviceInput[]
    upsert?: FirmwareUpdateUpsertWithWhereUniqueWithoutDeviceInput | FirmwareUpdateUpsertWithWhereUniqueWithoutDeviceInput[]
    createMany?: FirmwareUpdateCreateManyDeviceInputEnvelope
    set?: FirmwareUpdateWhereUniqueInput | FirmwareUpdateWhereUniqueInput[]
    disconnect?: FirmwareUpdateWhereUniqueInput | FirmwareUpdateWhereUniqueInput[]
    delete?: FirmwareUpdateWhereUniqueInput | FirmwareUpdateWhereUniqueInput[]
    connect?: FirmwareUpdateWhereUniqueInput | FirmwareUpdateWhereUniqueInput[]
    update?: FirmwareUpdateUpdateWithWhereUniqueWithoutDeviceInput | FirmwareUpdateUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: FirmwareUpdateUpdateManyWithWhereWithoutDeviceInput | FirmwareUpdateUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: FirmwareUpdateScalarWhereInput | FirmwareUpdateScalarWhereInput[]
  }

  export type DeviceLogUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<DeviceLogCreateWithoutDeviceInput, DeviceLogUncheckedCreateWithoutDeviceInput> | DeviceLogCreateWithoutDeviceInput[] | DeviceLogUncheckedCreateWithoutDeviceInput[]
    connectOrCreate?: DeviceLogCreateOrConnectWithoutDeviceInput | DeviceLogCreateOrConnectWithoutDeviceInput[]
    upsert?: DeviceLogUpsertWithWhereUniqueWithoutDeviceInput | DeviceLogUpsertWithWhereUniqueWithoutDeviceInput[]
    createMany?: DeviceLogCreateManyDeviceInputEnvelope
    set?: DeviceLogWhereUniqueInput | DeviceLogWhereUniqueInput[]
    disconnect?: DeviceLogWhereUniqueInput | DeviceLogWhereUniqueInput[]
    delete?: DeviceLogWhereUniqueInput | DeviceLogWhereUniqueInput[]
    connect?: DeviceLogWhereUniqueInput | DeviceLogWhereUniqueInput[]
    update?: DeviceLogUpdateWithWhereUniqueWithoutDeviceInput | DeviceLogUpdateWithWhereUniqueWithoutDeviceInput[]
    updateMany?: DeviceLogUpdateManyWithWhereWithoutDeviceInput | DeviceLogUpdateManyWithWhereWithoutDeviceInput[]
    deleteMany?: DeviceLogScalarWhereInput | DeviceLogScalarWhereInput[]
  }

  export type DeviceCreateNestedOneWithoutTelemetryInput = {
    create?: XOR<DeviceCreateWithoutTelemetryInput, DeviceUncheckedCreateWithoutTelemetryInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutTelemetryInput
    connect?: DeviceWhereUniqueInput
  }

  export type DeviceUpdateOneRequiredWithoutTelemetryNestedInput = {
    create?: XOR<DeviceCreateWithoutTelemetryInput, DeviceUncheckedCreateWithoutTelemetryInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutTelemetryInput
    upsert?: DeviceUpsertWithoutTelemetryInput
    connect?: DeviceWhereUniqueInput
    update?: XOR<XOR<DeviceUpdateToOneWithWhereWithoutTelemetryInput, DeviceUpdateWithoutTelemetryInput>, DeviceUncheckedUpdateWithoutTelemetryInput>
  }

  export type DeviceCreateNestedOneWithoutScansInput = {
    create?: XOR<DeviceCreateWithoutScansInput, DeviceUncheckedCreateWithoutScansInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutScansInput
    connect?: DeviceWhereUniqueInput
  }

  export type EnumScanTypeFieldUpdateOperationsInput = {
    set?: $Enums.ScanType
  }

  export type EnumScanStatusFieldUpdateOperationsInput = {
    set?: $Enums.ScanStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DeviceUpdateOneRequiredWithoutScansNestedInput = {
    create?: XOR<DeviceCreateWithoutScansInput, DeviceUncheckedCreateWithoutScansInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutScansInput
    upsert?: DeviceUpsertWithoutScansInput
    connect?: DeviceWhereUniqueInput
    update?: XOR<XOR<DeviceUpdateToOneWithWhereWithoutScansInput, DeviceUpdateWithoutScansInput>, DeviceUncheckedUpdateWithoutScansInput>
  }

  export type DeviceCreateNestedOneWithoutAlertsInput = {
    create?: XOR<DeviceCreateWithoutAlertsInput, DeviceUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutAlertsInput
    connect?: DeviceWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAlertsInput = {
    create?: XOR<UserCreateWithoutAlertsInput, UserUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlertsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAlertTypeFieldUpdateOperationsInput = {
    set?: $Enums.AlertType
  }

  export type EnumAlertSeverityFieldUpdateOperationsInput = {
    set?: $Enums.AlertSeverity
  }

  export type EnumAlertStatusFieldUpdateOperationsInput = {
    set?: $Enums.AlertStatus
  }

  export type DeviceUpdateOneWithoutAlertsNestedInput = {
    create?: XOR<DeviceCreateWithoutAlertsInput, DeviceUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutAlertsInput
    upsert?: DeviceUpsertWithoutAlertsInput
    disconnect?: DeviceWhereInput | boolean
    delete?: DeviceWhereInput | boolean
    connect?: DeviceWhereUniqueInput
    update?: XOR<XOR<DeviceUpdateToOneWithWhereWithoutAlertsInput, DeviceUpdateWithoutAlertsInput>, DeviceUncheckedUpdateWithoutAlertsInput>
  }

  export type UserUpdateOneWithoutAlertsNestedInput = {
    create?: XOR<UserCreateWithoutAlertsInput, UserUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlertsInput
    upsert?: UserUpsertWithoutAlertsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAlertsInput, UserUpdateWithoutAlertsInput>, UserUncheckedUpdateWithoutAlertsInput>
  }

  export type DeviceCreateNestedOneWithoutFirmwareUpdatesInput = {
    create?: XOR<DeviceCreateWithoutFirmwareUpdatesInput, DeviceUncheckedCreateWithoutFirmwareUpdatesInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutFirmwareUpdatesInput
    connect?: DeviceWhereUniqueInput
  }

  export type EnumFirmwareStatusFieldUpdateOperationsInput = {
    set?: $Enums.FirmwareStatus
  }

  export type DeviceUpdateOneRequiredWithoutFirmwareUpdatesNestedInput = {
    create?: XOR<DeviceCreateWithoutFirmwareUpdatesInput, DeviceUncheckedCreateWithoutFirmwareUpdatesInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutFirmwareUpdatesInput
    upsert?: DeviceUpsertWithoutFirmwareUpdatesInput
    connect?: DeviceWhereUniqueInput
    update?: XOR<XOR<DeviceUpdateToOneWithWhereWithoutFirmwareUpdatesInput, DeviceUpdateWithoutFirmwareUpdatesInput>, DeviceUncheckedUpdateWithoutFirmwareUpdatesInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type DeviceCreateNestedOneWithoutLogsInput = {
    create?: XOR<DeviceCreateWithoutLogsInput, DeviceUncheckedCreateWithoutLogsInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutLogsInput
    connect?: DeviceWhereUniqueInput
  }

  export type EnumLogLevelFieldUpdateOperationsInput = {
    set?: $Enums.LogLevel
  }

  export type DeviceUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<DeviceCreateWithoutLogsInput, DeviceUncheckedCreateWithoutLogsInput>
    connectOrCreate?: DeviceCreateOrConnectWithoutLogsInput
    upsert?: DeviceUpsertWithoutLogsInput
    connect?: DeviceWhereUniqueInput
    update?: XOR<XOR<DeviceUpdateToOneWithWhereWithoutLogsInput, DeviceUpdateWithoutLogsInput>, DeviceUncheckedUpdateWithoutLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumDeviceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDeviceTypeFilter<$PrismaModel> | $Enums.DeviceType
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumDeviceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceStatus | EnumDeviceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DeviceStatus[] | ListEnumDeviceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeviceStatus[] | ListEnumDeviceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDeviceStatusFilter<$PrismaModel> | $Enums.DeviceStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRiskLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelFilter<$PrismaModel> | $Enums.RiskLevel
  }

  export type NestedEnumDeviceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDeviceTypeWithAggregatesFilter<$PrismaModel> | $Enums.DeviceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDeviceTypeFilter<$PrismaModel>
    _max?: NestedEnumDeviceTypeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumDeviceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceStatus | EnumDeviceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DeviceStatus[] | ListEnumDeviceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeviceStatus[] | ListEnumDeviceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDeviceStatusWithAggregatesFilter<$PrismaModel> | $Enums.DeviceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDeviceStatusFilter<$PrismaModel>
    _max?: NestedEnumDeviceStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumScanTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ScanType | EnumScanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ScanType[] | ListEnumScanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScanType[] | ListEnumScanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumScanTypeFilter<$PrismaModel> | $Enums.ScanType
  }

  export type NestedEnumScanStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ScanStatus | EnumScanStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ScanStatus[] | ListEnumScanStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScanStatus[] | ListEnumScanStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumScanStatusFilter<$PrismaModel> | $Enums.ScanStatus
  }

  export type NestedEnumScanTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScanType | EnumScanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ScanType[] | ListEnumScanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScanType[] | ListEnumScanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumScanTypeWithAggregatesFilter<$PrismaModel> | $Enums.ScanType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScanTypeFilter<$PrismaModel>
    _max?: NestedEnumScanTypeFilter<$PrismaModel>
  }

  export type NestedEnumScanStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScanStatus | EnumScanStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ScanStatus[] | ListEnumScanStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScanStatus[] | ListEnumScanStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumScanStatusWithAggregatesFilter<$PrismaModel> | $Enums.ScanStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScanStatusFilter<$PrismaModel>
    _max?: NestedEnumScanStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumAlertTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertType | EnumAlertTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertTypeFilter<$PrismaModel> | $Enums.AlertType
  }

  export type NestedEnumAlertSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertSeverityFilter<$PrismaModel> | $Enums.AlertSeverity
  }

  export type NestedEnumAlertStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertStatus | EnumAlertStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertStatusFilter<$PrismaModel> | $Enums.AlertStatus
  }

  export type NestedEnumAlertTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertType | EnumAlertTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertTypeWithAggregatesFilter<$PrismaModel> | $Enums.AlertType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertTypeFilter<$PrismaModel>
    _max?: NestedEnumAlertTypeFilter<$PrismaModel>
  }

  export type NestedEnumAlertSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertSeverity[] | ListEnumAlertSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertSeverityWithAggregatesFilter<$PrismaModel> | $Enums.AlertSeverity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertSeverityFilter<$PrismaModel>
    _max?: NestedEnumAlertSeverityFilter<$PrismaModel>
  }

  export type NestedEnumAlertStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertStatus | EnumAlertStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertStatus[] | ListEnumAlertStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertStatusWithAggregatesFilter<$PrismaModel> | $Enums.AlertStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertStatusFilter<$PrismaModel>
    _max?: NestedEnumAlertStatusFilter<$PrismaModel>
  }

  export type NestedEnumFirmwareStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FirmwareStatus | EnumFirmwareStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FirmwareStatus[] | ListEnumFirmwareStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FirmwareStatus[] | ListEnumFirmwareStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFirmwareStatusFilter<$PrismaModel> | $Enums.FirmwareStatus
  }

  export type NestedEnumFirmwareStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FirmwareStatus | EnumFirmwareStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FirmwareStatus[] | ListEnumFirmwareStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FirmwareStatus[] | ListEnumFirmwareStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFirmwareStatusWithAggregatesFilter<$PrismaModel> | $Enums.FirmwareStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFirmwareStatusFilter<$PrismaModel>
    _max?: NestedEnumFirmwareStatusFilter<$PrismaModel>
  }

  export type NestedEnumLogLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLogLevelFilter<$PrismaModel> | $Enums.LogLevel
  }

  export type NestedEnumLogLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogLevel | EnumLogLevelFieldRefInput<$PrismaModel>
    in?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogLevel[] | ListEnumLogLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumLogLevelWithAggregatesFilter<$PrismaModel> | $Enums.LogLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogLevelFilter<$PrismaModel>
    _max?: NestedEnumLogLevelFilter<$PrismaModel>
  }

  export type DeviceCreateWithoutOwnerInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    telemetry?: DeviceTelemetryCreateNestedManyWithoutDeviceInput
    scans?: VulnerabilityReportCreateNestedManyWithoutDeviceInput
    alerts?: AlertCreateNestedManyWithoutDeviceInput
    firmwareUpdates?: FirmwareUpdateCreateNestedManyWithoutDeviceInput
    logs?: DeviceLogCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    telemetry?: DeviceTelemetryUncheckedCreateNestedManyWithoutDeviceInput
    scans?: VulnerabilityReportUncheckedCreateNestedManyWithoutDeviceInput
    alerts?: AlertUncheckedCreateNestedManyWithoutDeviceInput
    firmwareUpdates?: FirmwareUpdateUncheckedCreateNestedManyWithoutDeviceInput
    logs?: DeviceLogUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutOwnerInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutOwnerInput, DeviceUncheckedCreateWithoutOwnerInput>
  }

  export type DeviceCreateManyOwnerInputEnvelope = {
    data: DeviceCreateManyOwnerInput | DeviceCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    resource: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    resource: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AlertCreateWithoutUserInput = {
    id?: string
    type: $Enums.AlertType
    severity: $Enums.AlertSeverity
    title: string
    description: string
    status?: $Enums.AlertStatus
    createdAt?: Date | string
    resolvedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    device?: DeviceCreateNestedOneWithoutAlertsInput
  }

  export type AlertUncheckedCreateWithoutUserInput = {
    id?: string
    deviceId?: string | null
    type: $Enums.AlertType
    severity: $Enums.AlertSeverity
    title: string
    description: string
    status?: $Enums.AlertStatus
    createdAt?: Date | string
    resolvedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AlertCreateOrConnectWithoutUserInput = {
    where: AlertWhereUniqueInput
    create: XOR<AlertCreateWithoutUserInput, AlertUncheckedCreateWithoutUserInput>
  }

  export type AlertCreateManyUserInputEnvelope = {
    data: AlertCreateManyUserInput | AlertCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DeviceUpsertWithWhereUniqueWithoutOwnerInput = {
    where: DeviceWhereUniqueInput
    update: XOR<DeviceUpdateWithoutOwnerInput, DeviceUncheckedUpdateWithoutOwnerInput>
    create: XOR<DeviceCreateWithoutOwnerInput, DeviceUncheckedCreateWithoutOwnerInput>
  }

  export type DeviceUpdateWithWhereUniqueWithoutOwnerInput = {
    where: DeviceWhereUniqueInput
    data: XOR<DeviceUpdateWithoutOwnerInput, DeviceUncheckedUpdateWithoutOwnerInput>
  }

  export type DeviceUpdateManyWithWhereWithoutOwnerInput = {
    where: DeviceScalarWhereInput
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyWithoutOwnerInput>
  }

  export type DeviceScalarWhereInput = {
    AND?: DeviceScalarWhereInput | DeviceScalarWhereInput[]
    OR?: DeviceScalarWhereInput[]
    NOT?: DeviceScalarWhereInput | DeviceScalarWhereInput[]
    id?: StringFilter<"Device"> | string
    name?: StringFilter<"Device"> | string
    type?: EnumDeviceTypeFilter<"Device"> | $Enums.DeviceType
    ipAddress?: StringFilter<"Device"> | string
    macAddress?: StringFilter<"Device"> | string
    manufacturer?: StringNullableFilter<"Device"> | string | null
    model?: StringNullableFilter<"Device"> | string | null
    firmwareVersion?: StringNullableFilter<"Device"> | string | null
    osVersion?: StringNullableFilter<"Device"> | string | null
    status?: EnumDeviceStatusFilter<"Device"> | $Enums.DeviceStatus
    lastSeen?: DateTimeNullableFilter<"Device"> | Date | string | null
    registeredAt?: DateTimeFilter<"Device"> | Date | string
    updatedAt?: DateTimeFilter<"Device"> | Date | string
    securityScore?: FloatNullableFilter<"Device"> | number | null
    riskLevel?: EnumRiskLevelFilter<"Device"> | $Enums.RiskLevel
    ownerId?: StringFilter<"Device"> | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    details?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type AlertUpsertWithWhereUniqueWithoutUserInput = {
    where: AlertWhereUniqueInput
    update: XOR<AlertUpdateWithoutUserInput, AlertUncheckedUpdateWithoutUserInput>
    create: XOR<AlertCreateWithoutUserInput, AlertUncheckedCreateWithoutUserInput>
  }

  export type AlertUpdateWithWhereUniqueWithoutUserInput = {
    where: AlertWhereUniqueInput
    data: XOR<AlertUpdateWithoutUserInput, AlertUncheckedUpdateWithoutUserInput>
  }

  export type AlertUpdateManyWithWhereWithoutUserInput = {
    where: AlertScalarWhereInput
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyWithoutUserInput>
  }

  export type AlertScalarWhereInput = {
    AND?: AlertScalarWhereInput | AlertScalarWhereInput[]
    OR?: AlertScalarWhereInput[]
    NOT?: AlertScalarWhereInput | AlertScalarWhereInput[]
    id?: StringFilter<"Alert"> | string
    deviceId?: StringNullableFilter<"Alert"> | string | null
    userId?: StringNullableFilter<"Alert"> | string | null
    type?: EnumAlertTypeFilter<"Alert"> | $Enums.AlertType
    severity?: EnumAlertSeverityFilter<"Alert"> | $Enums.AlertSeverity
    title?: StringFilter<"Alert"> | string
    description?: StringFilter<"Alert"> | string
    status?: EnumAlertStatusFilter<"Alert"> | $Enums.AlertStatus
    createdAt?: DateTimeFilter<"Alert"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Alert"> | Date | string | null
    metadata?: JsonNullableFilter<"Alert">
  }

  export type UserCreateWithoutDevicesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDevicesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDevicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
  }

  export type DeviceTelemetryCreateWithoutDeviceInput = {
    id?: string
    timestamp?: Date | string
    cpuUsage?: number | null
    memoryUsage?: number | null
    diskUsage?: number | null
    temperature?: number | null
    networkIn?: number | null
    networkOut?: number | null
    customData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DeviceTelemetryUncheckedCreateWithoutDeviceInput = {
    id?: string
    timestamp?: Date | string
    cpuUsage?: number | null
    memoryUsage?: number | null
    diskUsage?: number | null
    temperature?: number | null
    networkIn?: number | null
    networkOut?: number | null
    customData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DeviceTelemetryCreateOrConnectWithoutDeviceInput = {
    where: DeviceTelemetryWhereUniqueInput
    create: XOR<DeviceTelemetryCreateWithoutDeviceInput, DeviceTelemetryUncheckedCreateWithoutDeviceInput>
  }

  export type DeviceTelemetryCreateManyDeviceInputEnvelope = {
    data: DeviceTelemetryCreateManyDeviceInput | DeviceTelemetryCreateManyDeviceInput[]
    skipDuplicates?: boolean
  }

  export type VulnerabilityReportCreateWithoutDeviceInput = {
    id?: string
    scanType: $Enums.ScanType
    status?: $Enums.ScanStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    criticalCount?: number
    highCount?: number
    mediumCount?: number
    lowCount?: number
    findings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type VulnerabilityReportUncheckedCreateWithoutDeviceInput = {
    id?: string
    scanType: $Enums.ScanType
    status?: $Enums.ScanStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    criticalCount?: number
    highCount?: number
    mediumCount?: number
    lowCount?: number
    findings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type VulnerabilityReportCreateOrConnectWithoutDeviceInput = {
    where: VulnerabilityReportWhereUniqueInput
    create: XOR<VulnerabilityReportCreateWithoutDeviceInput, VulnerabilityReportUncheckedCreateWithoutDeviceInput>
  }

  export type VulnerabilityReportCreateManyDeviceInputEnvelope = {
    data: VulnerabilityReportCreateManyDeviceInput | VulnerabilityReportCreateManyDeviceInput[]
    skipDuplicates?: boolean
  }

  export type AlertCreateWithoutDeviceInput = {
    id?: string
    type: $Enums.AlertType
    severity: $Enums.AlertSeverity
    title: string
    description: string
    status?: $Enums.AlertStatus
    createdAt?: Date | string
    resolvedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    user?: UserCreateNestedOneWithoutAlertsInput
  }

  export type AlertUncheckedCreateWithoutDeviceInput = {
    id?: string
    userId?: string | null
    type: $Enums.AlertType
    severity: $Enums.AlertSeverity
    title: string
    description: string
    status?: $Enums.AlertStatus
    createdAt?: Date | string
    resolvedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AlertCreateOrConnectWithoutDeviceInput = {
    where: AlertWhereUniqueInput
    create: XOR<AlertCreateWithoutDeviceInput, AlertUncheckedCreateWithoutDeviceInput>
  }

  export type AlertCreateManyDeviceInputEnvelope = {
    data: AlertCreateManyDeviceInput | AlertCreateManyDeviceInput[]
    skipDuplicates?: boolean
  }

  export type FirmwareUpdateCreateWithoutDeviceInput = {
    id?: string
    version: string
    fileName: string
    fileSize: number
    checksum: string
    status?: $Enums.FirmwareStatus
    uploadedAt?: Date | string
    deployedAt?: Date | string | null
  }

  export type FirmwareUpdateUncheckedCreateWithoutDeviceInput = {
    id?: string
    version: string
    fileName: string
    fileSize: number
    checksum: string
    status?: $Enums.FirmwareStatus
    uploadedAt?: Date | string
    deployedAt?: Date | string | null
  }

  export type FirmwareUpdateCreateOrConnectWithoutDeviceInput = {
    where: FirmwareUpdateWhereUniqueInput
    create: XOR<FirmwareUpdateCreateWithoutDeviceInput, FirmwareUpdateUncheckedCreateWithoutDeviceInput>
  }

  export type FirmwareUpdateCreateManyDeviceInputEnvelope = {
    data: FirmwareUpdateCreateManyDeviceInput | FirmwareUpdateCreateManyDeviceInput[]
    skipDuplicates?: boolean
  }

  export type DeviceLogCreateWithoutDeviceInput = {
    id?: string
    level: $Enums.LogLevel
    message: string
    source?: string | null
    timestamp?: Date | string
  }

  export type DeviceLogUncheckedCreateWithoutDeviceInput = {
    id?: string
    level: $Enums.LogLevel
    message: string
    source?: string | null
    timestamp?: Date | string
  }

  export type DeviceLogCreateOrConnectWithoutDeviceInput = {
    where: DeviceLogWhereUniqueInput
    create: XOR<DeviceLogCreateWithoutDeviceInput, DeviceLogUncheckedCreateWithoutDeviceInput>
  }

  export type DeviceLogCreateManyDeviceInputEnvelope = {
    data: DeviceLogCreateManyDeviceInput | DeviceLogCreateManyDeviceInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutDevicesInput = {
    update: XOR<UserUpdateWithoutDevicesInput, UserUncheckedUpdateWithoutDevicesInput>
    create: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDevicesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDevicesInput, UserUncheckedUpdateWithoutDevicesInput>
  }

  export type UserUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDevicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DeviceTelemetryUpsertWithWhereUniqueWithoutDeviceInput = {
    where: DeviceTelemetryWhereUniqueInput
    update: XOR<DeviceTelemetryUpdateWithoutDeviceInput, DeviceTelemetryUncheckedUpdateWithoutDeviceInput>
    create: XOR<DeviceTelemetryCreateWithoutDeviceInput, DeviceTelemetryUncheckedCreateWithoutDeviceInput>
  }

  export type DeviceTelemetryUpdateWithWhereUniqueWithoutDeviceInput = {
    where: DeviceTelemetryWhereUniqueInput
    data: XOR<DeviceTelemetryUpdateWithoutDeviceInput, DeviceTelemetryUncheckedUpdateWithoutDeviceInput>
  }

  export type DeviceTelemetryUpdateManyWithWhereWithoutDeviceInput = {
    where: DeviceTelemetryScalarWhereInput
    data: XOR<DeviceTelemetryUpdateManyMutationInput, DeviceTelemetryUncheckedUpdateManyWithoutDeviceInput>
  }

  export type DeviceTelemetryScalarWhereInput = {
    AND?: DeviceTelemetryScalarWhereInput | DeviceTelemetryScalarWhereInput[]
    OR?: DeviceTelemetryScalarWhereInput[]
    NOT?: DeviceTelemetryScalarWhereInput | DeviceTelemetryScalarWhereInput[]
    id?: StringFilter<"DeviceTelemetry"> | string
    deviceId?: StringFilter<"DeviceTelemetry"> | string
    timestamp?: DateTimeFilter<"DeviceTelemetry"> | Date | string
    cpuUsage?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    memoryUsage?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    diskUsage?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    temperature?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    networkIn?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    networkOut?: FloatNullableFilter<"DeviceTelemetry"> | number | null
    customData?: JsonNullableFilter<"DeviceTelemetry">
  }

  export type VulnerabilityReportUpsertWithWhereUniqueWithoutDeviceInput = {
    where: VulnerabilityReportWhereUniqueInput
    update: XOR<VulnerabilityReportUpdateWithoutDeviceInput, VulnerabilityReportUncheckedUpdateWithoutDeviceInput>
    create: XOR<VulnerabilityReportCreateWithoutDeviceInput, VulnerabilityReportUncheckedCreateWithoutDeviceInput>
  }

  export type VulnerabilityReportUpdateWithWhereUniqueWithoutDeviceInput = {
    where: VulnerabilityReportWhereUniqueInput
    data: XOR<VulnerabilityReportUpdateWithoutDeviceInput, VulnerabilityReportUncheckedUpdateWithoutDeviceInput>
  }

  export type VulnerabilityReportUpdateManyWithWhereWithoutDeviceInput = {
    where: VulnerabilityReportScalarWhereInput
    data: XOR<VulnerabilityReportUpdateManyMutationInput, VulnerabilityReportUncheckedUpdateManyWithoutDeviceInput>
  }

  export type VulnerabilityReportScalarWhereInput = {
    AND?: VulnerabilityReportScalarWhereInput | VulnerabilityReportScalarWhereInput[]
    OR?: VulnerabilityReportScalarWhereInput[]
    NOT?: VulnerabilityReportScalarWhereInput | VulnerabilityReportScalarWhereInput[]
    id?: StringFilter<"VulnerabilityReport"> | string
    deviceId?: StringFilter<"VulnerabilityReport"> | string
    scanType?: EnumScanTypeFilter<"VulnerabilityReport"> | $Enums.ScanType
    status?: EnumScanStatusFilter<"VulnerabilityReport"> | $Enums.ScanStatus
    startedAt?: DateTimeFilter<"VulnerabilityReport"> | Date | string
    completedAt?: DateTimeNullableFilter<"VulnerabilityReport"> | Date | string | null
    criticalCount?: IntFilter<"VulnerabilityReport"> | number
    highCount?: IntFilter<"VulnerabilityReport"> | number
    mediumCount?: IntFilter<"VulnerabilityReport"> | number
    lowCount?: IntFilter<"VulnerabilityReport"> | number
    findings?: JsonNullableFilter<"VulnerabilityReport">
  }

  export type AlertUpsertWithWhereUniqueWithoutDeviceInput = {
    where: AlertWhereUniqueInput
    update: XOR<AlertUpdateWithoutDeviceInput, AlertUncheckedUpdateWithoutDeviceInput>
    create: XOR<AlertCreateWithoutDeviceInput, AlertUncheckedCreateWithoutDeviceInput>
  }

  export type AlertUpdateWithWhereUniqueWithoutDeviceInput = {
    where: AlertWhereUniqueInput
    data: XOR<AlertUpdateWithoutDeviceInput, AlertUncheckedUpdateWithoutDeviceInput>
  }

  export type AlertUpdateManyWithWhereWithoutDeviceInput = {
    where: AlertScalarWhereInput
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyWithoutDeviceInput>
  }

  export type FirmwareUpdateUpsertWithWhereUniqueWithoutDeviceInput = {
    where: FirmwareUpdateWhereUniqueInput
    update: XOR<FirmwareUpdateUpdateWithoutDeviceInput, FirmwareUpdateUncheckedUpdateWithoutDeviceInput>
    create: XOR<FirmwareUpdateCreateWithoutDeviceInput, FirmwareUpdateUncheckedCreateWithoutDeviceInput>
  }

  export type FirmwareUpdateUpdateWithWhereUniqueWithoutDeviceInput = {
    where: FirmwareUpdateWhereUniqueInput
    data: XOR<FirmwareUpdateUpdateWithoutDeviceInput, FirmwareUpdateUncheckedUpdateWithoutDeviceInput>
  }

  export type FirmwareUpdateUpdateManyWithWhereWithoutDeviceInput = {
    where: FirmwareUpdateScalarWhereInput
    data: XOR<FirmwareUpdateUpdateManyMutationInput, FirmwareUpdateUncheckedUpdateManyWithoutDeviceInput>
  }

  export type FirmwareUpdateScalarWhereInput = {
    AND?: FirmwareUpdateScalarWhereInput | FirmwareUpdateScalarWhereInput[]
    OR?: FirmwareUpdateScalarWhereInput[]
    NOT?: FirmwareUpdateScalarWhereInput | FirmwareUpdateScalarWhereInput[]
    id?: StringFilter<"FirmwareUpdate"> | string
    deviceId?: StringFilter<"FirmwareUpdate"> | string
    version?: StringFilter<"FirmwareUpdate"> | string
    fileName?: StringFilter<"FirmwareUpdate"> | string
    fileSize?: IntFilter<"FirmwareUpdate"> | number
    checksum?: StringFilter<"FirmwareUpdate"> | string
    status?: EnumFirmwareStatusFilter<"FirmwareUpdate"> | $Enums.FirmwareStatus
    uploadedAt?: DateTimeFilter<"FirmwareUpdate"> | Date | string
    deployedAt?: DateTimeNullableFilter<"FirmwareUpdate"> | Date | string | null
  }

  export type DeviceLogUpsertWithWhereUniqueWithoutDeviceInput = {
    where: DeviceLogWhereUniqueInput
    update: XOR<DeviceLogUpdateWithoutDeviceInput, DeviceLogUncheckedUpdateWithoutDeviceInput>
    create: XOR<DeviceLogCreateWithoutDeviceInput, DeviceLogUncheckedCreateWithoutDeviceInput>
  }

  export type DeviceLogUpdateWithWhereUniqueWithoutDeviceInput = {
    where: DeviceLogWhereUniqueInput
    data: XOR<DeviceLogUpdateWithoutDeviceInput, DeviceLogUncheckedUpdateWithoutDeviceInput>
  }

  export type DeviceLogUpdateManyWithWhereWithoutDeviceInput = {
    where: DeviceLogScalarWhereInput
    data: XOR<DeviceLogUpdateManyMutationInput, DeviceLogUncheckedUpdateManyWithoutDeviceInput>
  }

  export type DeviceLogScalarWhereInput = {
    AND?: DeviceLogScalarWhereInput | DeviceLogScalarWhereInput[]
    OR?: DeviceLogScalarWhereInput[]
    NOT?: DeviceLogScalarWhereInput | DeviceLogScalarWhereInput[]
    id?: StringFilter<"DeviceLog"> | string
    deviceId?: StringFilter<"DeviceLog"> | string
    level?: EnumLogLevelFilter<"DeviceLog"> | $Enums.LogLevel
    message?: StringFilter<"DeviceLog"> | string
    source?: StringNullableFilter<"DeviceLog"> | string | null
    timestamp?: DateTimeFilter<"DeviceLog"> | Date | string
  }

  export type DeviceCreateWithoutTelemetryInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    owner: UserCreateNestedOneWithoutDevicesInput
    scans?: VulnerabilityReportCreateNestedManyWithoutDeviceInput
    alerts?: AlertCreateNestedManyWithoutDeviceInput
    firmwareUpdates?: FirmwareUpdateCreateNestedManyWithoutDeviceInput
    logs?: DeviceLogCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutTelemetryInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    ownerId: string
    scans?: VulnerabilityReportUncheckedCreateNestedManyWithoutDeviceInput
    alerts?: AlertUncheckedCreateNestedManyWithoutDeviceInput
    firmwareUpdates?: FirmwareUpdateUncheckedCreateNestedManyWithoutDeviceInput
    logs?: DeviceLogUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutTelemetryInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutTelemetryInput, DeviceUncheckedCreateWithoutTelemetryInput>
  }

  export type DeviceUpsertWithoutTelemetryInput = {
    update: XOR<DeviceUpdateWithoutTelemetryInput, DeviceUncheckedUpdateWithoutTelemetryInput>
    create: XOR<DeviceCreateWithoutTelemetryInput, DeviceUncheckedCreateWithoutTelemetryInput>
    where?: DeviceWhereInput
  }

  export type DeviceUpdateToOneWithWhereWithoutTelemetryInput = {
    where?: DeviceWhereInput
    data: XOR<DeviceUpdateWithoutTelemetryInput, DeviceUncheckedUpdateWithoutTelemetryInput>
  }

  export type DeviceUpdateWithoutTelemetryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    owner?: UserUpdateOneRequiredWithoutDevicesNestedInput
    scans?: VulnerabilityReportUpdateManyWithoutDeviceNestedInput
    alerts?: AlertUpdateManyWithoutDeviceNestedInput
    firmwareUpdates?: FirmwareUpdateUpdateManyWithoutDeviceNestedInput
    logs?: DeviceLogUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutTelemetryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    ownerId?: StringFieldUpdateOperationsInput | string
    scans?: VulnerabilityReportUncheckedUpdateManyWithoutDeviceNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutDeviceNestedInput
    firmwareUpdates?: FirmwareUpdateUncheckedUpdateManyWithoutDeviceNestedInput
    logs?: DeviceLogUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceCreateWithoutScansInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    owner: UserCreateNestedOneWithoutDevicesInput
    telemetry?: DeviceTelemetryCreateNestedManyWithoutDeviceInput
    alerts?: AlertCreateNestedManyWithoutDeviceInput
    firmwareUpdates?: FirmwareUpdateCreateNestedManyWithoutDeviceInput
    logs?: DeviceLogCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutScansInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    ownerId: string
    telemetry?: DeviceTelemetryUncheckedCreateNestedManyWithoutDeviceInput
    alerts?: AlertUncheckedCreateNestedManyWithoutDeviceInput
    firmwareUpdates?: FirmwareUpdateUncheckedCreateNestedManyWithoutDeviceInput
    logs?: DeviceLogUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutScansInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutScansInput, DeviceUncheckedCreateWithoutScansInput>
  }

  export type DeviceUpsertWithoutScansInput = {
    update: XOR<DeviceUpdateWithoutScansInput, DeviceUncheckedUpdateWithoutScansInput>
    create: XOR<DeviceCreateWithoutScansInput, DeviceUncheckedCreateWithoutScansInput>
    where?: DeviceWhereInput
  }

  export type DeviceUpdateToOneWithWhereWithoutScansInput = {
    where?: DeviceWhereInput
    data: XOR<DeviceUpdateWithoutScansInput, DeviceUncheckedUpdateWithoutScansInput>
  }

  export type DeviceUpdateWithoutScansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    owner?: UserUpdateOneRequiredWithoutDevicesNestedInput
    telemetry?: DeviceTelemetryUpdateManyWithoutDeviceNestedInput
    alerts?: AlertUpdateManyWithoutDeviceNestedInput
    firmwareUpdates?: FirmwareUpdateUpdateManyWithoutDeviceNestedInput
    logs?: DeviceLogUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutScansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    ownerId?: StringFieldUpdateOperationsInput | string
    telemetry?: DeviceTelemetryUncheckedUpdateManyWithoutDeviceNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutDeviceNestedInput
    firmwareUpdates?: FirmwareUpdateUncheckedUpdateManyWithoutDeviceNestedInput
    logs?: DeviceLogUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceCreateWithoutAlertsInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    owner: UserCreateNestedOneWithoutDevicesInput
    telemetry?: DeviceTelemetryCreateNestedManyWithoutDeviceInput
    scans?: VulnerabilityReportCreateNestedManyWithoutDeviceInput
    firmwareUpdates?: FirmwareUpdateCreateNestedManyWithoutDeviceInput
    logs?: DeviceLogCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutAlertsInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    ownerId: string
    telemetry?: DeviceTelemetryUncheckedCreateNestedManyWithoutDeviceInput
    scans?: VulnerabilityReportUncheckedCreateNestedManyWithoutDeviceInput
    firmwareUpdates?: FirmwareUpdateUncheckedCreateNestedManyWithoutDeviceInput
    logs?: DeviceLogUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutAlertsInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutAlertsInput, DeviceUncheckedCreateWithoutAlertsInput>
  }

  export type UserCreateWithoutAlertsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    devices?: DeviceCreateNestedManyWithoutOwnerInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAlertsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    devices?: DeviceUncheckedCreateNestedManyWithoutOwnerInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAlertsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAlertsInput, UserUncheckedCreateWithoutAlertsInput>
  }

  export type DeviceUpsertWithoutAlertsInput = {
    update: XOR<DeviceUpdateWithoutAlertsInput, DeviceUncheckedUpdateWithoutAlertsInput>
    create: XOR<DeviceCreateWithoutAlertsInput, DeviceUncheckedCreateWithoutAlertsInput>
    where?: DeviceWhereInput
  }

  export type DeviceUpdateToOneWithWhereWithoutAlertsInput = {
    where?: DeviceWhereInput
    data: XOR<DeviceUpdateWithoutAlertsInput, DeviceUncheckedUpdateWithoutAlertsInput>
  }

  export type DeviceUpdateWithoutAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    owner?: UserUpdateOneRequiredWithoutDevicesNestedInput
    telemetry?: DeviceTelemetryUpdateManyWithoutDeviceNestedInput
    scans?: VulnerabilityReportUpdateManyWithoutDeviceNestedInput
    firmwareUpdates?: FirmwareUpdateUpdateManyWithoutDeviceNestedInput
    logs?: DeviceLogUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    ownerId?: StringFieldUpdateOperationsInput | string
    telemetry?: DeviceTelemetryUncheckedUpdateManyWithoutDeviceNestedInput
    scans?: VulnerabilityReportUncheckedUpdateManyWithoutDeviceNestedInput
    firmwareUpdates?: FirmwareUpdateUncheckedUpdateManyWithoutDeviceNestedInput
    logs?: DeviceLogUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type UserUpsertWithoutAlertsInput = {
    update: XOR<UserUpdateWithoutAlertsInput, UserUncheckedUpdateWithoutAlertsInput>
    create: XOR<UserCreateWithoutAlertsInput, UserUncheckedCreateWithoutAlertsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAlertsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAlertsInput, UserUncheckedUpdateWithoutAlertsInput>
  }

  export type UserUpdateWithoutAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    devices?: DeviceUpdateManyWithoutOwnerNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    devices?: DeviceUncheckedUpdateManyWithoutOwnerNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DeviceCreateWithoutFirmwareUpdatesInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    owner: UserCreateNestedOneWithoutDevicesInput
    telemetry?: DeviceTelemetryCreateNestedManyWithoutDeviceInput
    scans?: VulnerabilityReportCreateNestedManyWithoutDeviceInput
    alerts?: AlertCreateNestedManyWithoutDeviceInput
    logs?: DeviceLogCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutFirmwareUpdatesInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    ownerId: string
    telemetry?: DeviceTelemetryUncheckedCreateNestedManyWithoutDeviceInput
    scans?: VulnerabilityReportUncheckedCreateNestedManyWithoutDeviceInput
    alerts?: AlertUncheckedCreateNestedManyWithoutDeviceInput
    logs?: DeviceLogUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutFirmwareUpdatesInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutFirmwareUpdatesInput, DeviceUncheckedCreateWithoutFirmwareUpdatesInput>
  }

  export type DeviceUpsertWithoutFirmwareUpdatesInput = {
    update: XOR<DeviceUpdateWithoutFirmwareUpdatesInput, DeviceUncheckedUpdateWithoutFirmwareUpdatesInput>
    create: XOR<DeviceCreateWithoutFirmwareUpdatesInput, DeviceUncheckedCreateWithoutFirmwareUpdatesInput>
    where?: DeviceWhereInput
  }

  export type DeviceUpdateToOneWithWhereWithoutFirmwareUpdatesInput = {
    where?: DeviceWhereInput
    data: XOR<DeviceUpdateWithoutFirmwareUpdatesInput, DeviceUncheckedUpdateWithoutFirmwareUpdatesInput>
  }

  export type DeviceUpdateWithoutFirmwareUpdatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    owner?: UserUpdateOneRequiredWithoutDevicesNestedInput
    telemetry?: DeviceTelemetryUpdateManyWithoutDeviceNestedInput
    scans?: VulnerabilityReportUpdateManyWithoutDeviceNestedInput
    alerts?: AlertUpdateManyWithoutDeviceNestedInput
    logs?: DeviceLogUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutFirmwareUpdatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    ownerId?: StringFieldUpdateOperationsInput | string
    telemetry?: DeviceTelemetryUncheckedUpdateManyWithoutDeviceNestedInput
    scans?: VulnerabilityReportUncheckedUpdateManyWithoutDeviceNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutDeviceNestedInput
    logs?: DeviceLogUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    devices?: DeviceCreateNestedManyWithoutOwnerInput
    alerts?: AlertCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    devices?: DeviceUncheckedCreateNestedManyWithoutOwnerInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    devices?: DeviceUpdateManyWithoutOwnerNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    devices?: DeviceUncheckedUpdateManyWithoutOwnerNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DeviceCreateWithoutLogsInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    owner: UserCreateNestedOneWithoutDevicesInput
    telemetry?: DeviceTelemetryCreateNestedManyWithoutDeviceInput
    scans?: VulnerabilityReportCreateNestedManyWithoutDeviceInput
    alerts?: AlertCreateNestedManyWithoutDeviceInput
    firmwareUpdates?: FirmwareUpdateCreateNestedManyWithoutDeviceInput
  }

  export type DeviceUncheckedCreateWithoutLogsInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
    ownerId: string
    telemetry?: DeviceTelemetryUncheckedCreateNestedManyWithoutDeviceInput
    scans?: VulnerabilityReportUncheckedCreateNestedManyWithoutDeviceInput
    alerts?: AlertUncheckedCreateNestedManyWithoutDeviceInput
    firmwareUpdates?: FirmwareUpdateUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type DeviceCreateOrConnectWithoutLogsInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutLogsInput, DeviceUncheckedCreateWithoutLogsInput>
  }

  export type DeviceUpsertWithoutLogsInput = {
    update: XOR<DeviceUpdateWithoutLogsInput, DeviceUncheckedUpdateWithoutLogsInput>
    create: XOR<DeviceCreateWithoutLogsInput, DeviceUncheckedCreateWithoutLogsInput>
    where?: DeviceWhereInput
  }

  export type DeviceUpdateToOneWithWhereWithoutLogsInput = {
    where?: DeviceWhereInput
    data: XOR<DeviceUpdateWithoutLogsInput, DeviceUncheckedUpdateWithoutLogsInput>
  }

  export type DeviceUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    owner?: UserUpdateOneRequiredWithoutDevicesNestedInput
    telemetry?: DeviceTelemetryUpdateManyWithoutDeviceNestedInput
    scans?: VulnerabilityReportUpdateManyWithoutDeviceNestedInput
    alerts?: AlertUpdateManyWithoutDeviceNestedInput
    firmwareUpdates?: FirmwareUpdateUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    ownerId?: StringFieldUpdateOperationsInput | string
    telemetry?: DeviceTelemetryUncheckedUpdateManyWithoutDeviceNestedInput
    scans?: VulnerabilityReportUncheckedUpdateManyWithoutDeviceNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutDeviceNestedInput
    firmwareUpdates?: FirmwareUpdateUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceCreateManyOwnerInput = {
    id?: string
    name: string
    type: $Enums.DeviceType
    ipAddress: string
    macAddress: string
    manufacturer?: string | null
    model?: string | null
    firmwareVersion?: string | null
    osVersion?: string | null
    status?: $Enums.DeviceStatus
    lastSeen?: Date | string | null
    registeredAt?: Date | string
    updatedAt?: Date | string
    securityScore?: number | null
    riskLevel?: $Enums.RiskLevel
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: string
    resource: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
  }

  export type AlertCreateManyUserInput = {
    id?: string
    deviceId?: string | null
    type: $Enums.AlertType
    severity: $Enums.AlertSeverity
    title: string
    description: string
    status?: $Enums.AlertStatus
    createdAt?: Date | string
    resolvedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DeviceUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    telemetry?: DeviceTelemetryUpdateManyWithoutDeviceNestedInput
    scans?: VulnerabilityReportUpdateManyWithoutDeviceNestedInput
    alerts?: AlertUpdateManyWithoutDeviceNestedInput
    firmwareUpdates?: FirmwareUpdateUpdateManyWithoutDeviceNestedInput
    logs?: DeviceLogUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    telemetry?: DeviceTelemetryUncheckedUpdateManyWithoutDeviceNestedInput
    scans?: VulnerabilityReportUncheckedUpdateManyWithoutDeviceNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutDeviceNestedInput
    firmwareUpdates?: FirmwareUpdateUncheckedUpdateManyWithoutDeviceNestedInput
    logs?: DeviceLogUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type DeviceUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    ipAddress?: StringFieldUpdateOperationsInput | string
    macAddress?: StringFieldUpdateOperationsInput | string
    manufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    firmwareVersion?: NullableStringFieldUpdateOperationsInput | string | null
    osVersion?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDeviceStatusFieldUpdateOperationsInput | $Enums.DeviceStatus
    lastSeen?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    device?: DeviceUpdateOneWithoutAlertsNestedInput
  }

  export type AlertUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AlertUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DeviceTelemetryCreateManyDeviceInput = {
    id?: string
    timestamp?: Date | string
    cpuUsage?: number | null
    memoryUsage?: number | null
    diskUsage?: number | null
    temperature?: number | null
    networkIn?: number | null
    networkOut?: number | null
    customData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type VulnerabilityReportCreateManyDeviceInput = {
    id?: string
    scanType: $Enums.ScanType
    status?: $Enums.ScanStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    criticalCount?: number
    highCount?: number
    mediumCount?: number
    lowCount?: number
    findings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AlertCreateManyDeviceInput = {
    id?: string
    userId?: string | null
    type: $Enums.AlertType
    severity: $Enums.AlertSeverity
    title: string
    description: string
    status?: $Enums.AlertStatus
    createdAt?: Date | string
    resolvedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FirmwareUpdateCreateManyDeviceInput = {
    id?: string
    version: string
    fileName: string
    fileSize: number
    checksum: string
    status?: $Enums.FirmwareStatus
    uploadedAt?: Date | string
    deployedAt?: Date | string | null
  }

  export type DeviceLogCreateManyDeviceInput = {
    id?: string
    level: $Enums.LogLevel
    message: string
    source?: string | null
    timestamp?: Date | string
  }

  export type DeviceTelemetryUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    cpuUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    memoryUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    diskUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    networkIn?: NullableFloatFieldUpdateOperationsInput | number | null
    networkOut?: NullableFloatFieldUpdateOperationsInput | number | null
    customData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DeviceTelemetryUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    cpuUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    memoryUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    diskUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    networkIn?: NullableFloatFieldUpdateOperationsInput | number | null
    networkOut?: NullableFloatFieldUpdateOperationsInput | number | null
    customData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DeviceTelemetryUncheckedUpdateManyWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    cpuUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    memoryUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    diskUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    networkIn?: NullableFloatFieldUpdateOperationsInput | number | null
    networkOut?: NullableFloatFieldUpdateOperationsInput | number | null
    customData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type VulnerabilityReportUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    scanType?: EnumScanTypeFieldUpdateOperationsInput | $Enums.ScanType
    status?: EnumScanStatusFieldUpdateOperationsInput | $Enums.ScanStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    criticalCount?: IntFieldUpdateOperationsInput | number
    highCount?: IntFieldUpdateOperationsInput | number
    mediumCount?: IntFieldUpdateOperationsInput | number
    lowCount?: IntFieldUpdateOperationsInput | number
    findings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type VulnerabilityReportUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    scanType?: EnumScanTypeFieldUpdateOperationsInput | $Enums.ScanType
    status?: EnumScanStatusFieldUpdateOperationsInput | $Enums.ScanStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    criticalCount?: IntFieldUpdateOperationsInput | number
    highCount?: IntFieldUpdateOperationsInput | number
    mediumCount?: IntFieldUpdateOperationsInput | number
    lowCount?: IntFieldUpdateOperationsInput | number
    findings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type VulnerabilityReportUncheckedUpdateManyWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    scanType?: EnumScanTypeFieldUpdateOperationsInput | $Enums.ScanType
    status?: EnumScanStatusFieldUpdateOperationsInput | $Enums.ScanStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    criticalCount?: IntFieldUpdateOperationsInput | number
    highCount?: IntFieldUpdateOperationsInput | number
    mediumCount?: IntFieldUpdateOperationsInput | number
    lowCount?: IntFieldUpdateOperationsInput | number
    findings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AlertUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneWithoutAlertsNestedInput
  }

  export type AlertUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AlertUncheckedUpdateManyWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FirmwareUpdateUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    checksum?: StringFieldUpdateOperationsInput | string
    status?: EnumFirmwareStatusFieldUpdateOperationsInput | $Enums.FirmwareStatus
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deployedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FirmwareUpdateUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    checksum?: StringFieldUpdateOperationsInput | string
    status?: EnumFirmwareStatusFieldUpdateOperationsInput | $Enums.FirmwareStatus
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deployedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FirmwareUpdateUncheckedUpdateManyWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    checksum?: StringFieldUpdateOperationsInput | string
    status?: EnumFirmwareStatusFieldUpdateOperationsInput | $Enums.FirmwareStatus
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deployedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DeviceLogUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceLogUncheckedUpdateWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceLogUncheckedUpdateManyWithoutDeviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: EnumLogLevelFieldUpdateOperationsInput | $Enums.LogLevel
    message?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DeviceCountOutputTypeDefaultArgs instead
     */
    export type DeviceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DeviceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DeviceDefaultArgs instead
     */
    export type DeviceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DeviceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DeviceTelemetryDefaultArgs instead
     */
    export type DeviceTelemetryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DeviceTelemetryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VulnerabilityReportDefaultArgs instead
     */
    export type VulnerabilityReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VulnerabilityReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlertDefaultArgs instead
     */
    export type AlertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlertDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FirmwareUpdateDefaultArgs instead
     */
    export type FirmwareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FirmwareUpdateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DeviceLogDefaultArgs instead
     */
    export type DeviceLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DeviceLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}